


	 █     █░ ▄▄▄       ██▀███  ▓█████ ▒███████▒ ██▓     ▒█████   ▄▄▄      ▓█████▄ ▓█████  ██▀███  
	▓█░ █ ░█░▒████▄    ▓██ ▒ ██▒▓█   ▀ ▒ ▒ ▒ ▄▀░▓██▒    ▒██▒  ██▒▒████▄    ▒██▀ ██▌▓█   ▀ ▓██ ▒ ██▒
	▒█░ █ ░█ ▒██  ▀█▄  ▓██ ░▄█ ▒▒███   ░ ▒ ▄▀▒░ ▒██░    ▒██░  ██▒▒██  ▀█▄  ░██   █▌▒███   ▓██ ░▄█ ▒
	░█░ █ ░█ ░██▄▄▄▄██ ▒██▀▀█▄  ▒▓█  ▄   ▄▀▒   ░▒██░    ▒██   ██░░██▄▄▄▄██ ░▓█▄   ▌▒▓█  ▄ ▒██▀▀█▄  
	░░██▒██▓  ▓█   ▓██▒░██▓ ▒██▒░▒████▒▒███████▒░██████▒░ ████▓▒░ ▓█   ▓██▒░▒████▓ ░▒████▒░██▓ ▒██▒
	░ ▓░▒ ▒   ▒▒   ▓▒█░░ ▒▓ ░▒▓░░░ ▒░ ░░▒▒ ▓░▒░▒░ ▒░▓  ░░ ▒░▒░▒░  ▒▒   ▓▒█░ ▒▒▓  ▒ ░░ ▒░ ░░ ▒▓ ░▒▓░
	  ▒ ░ ░    ▒   ▒▒ ░  ░▒ ░ ▒░ ░F i n░a░l ▒ ░ ▒░ ░ ▒  ░  ░ ▒ ▒░   ▒   ▒▒ ░ ░ ▒  ▒  ░ ░  ░  ░▒ ░ ▒░
	  ░   ░    ░   ▒     ░░   ░    ░   ░ ░ ░ ░ Z  I N E ░ ░ ░ ▒    ░   ▒    ░ ░  ░    ░     ░░   ░ 

			Warezloader - providing a platform for exchanging wares(https://www.dictionary.com/browse/wares) 
		the Legion of Warezloaders ponders on - untouched, unseized, unstoppable, undoxed and stateless

	So now when Warezloader is opensource. We have made a it clear.
	We got several offers for people to buy
	it but we would sell our member data to anyone even if they offered all the tea 
	in entire china or all the lentil :)

RIP Warezloader 2017-2020

It hurts us to do this but we are not suitable to run Warezloader anymore. Ideologists can not run profitable 
platforms we have decided. We created Warezloader from an ideologist stand point, We had big plans
for it but it is not free to run a platform like this with the high maintenance it requires a lot, answering
member questions, having the code base up to date and so on ...

Warezloader was in many cases a success and partly because if you are reading the Zine it means that we kept
our promise and released the source code as a final act. 

From day one we where heavily attacked by various parts
the only successful attack was a denial of service slow 
loris attack that cause an hour or two downtime which was fixed
by doing some black magic in the load balancer. 
We where mostly attacked by smaller private security companies(they where very cute)
that "index darknet sites to find cybercriminal" and 
then sell the indexed data to government's and other violent
parties. Not everyone believes in integrity, especially if there is a paycheck involved. 
The hacking sceen has allways been without a paycheck. and it will allways be like so.
Warezloader never had a successful attack and 
never had any member data leaked. 
We have received several threats from various parties that
they where going to do X and Y with Warezloader but all 
those packages just felt off Warezloader like
rain falling of an umbrella.
When Warezloader was launched in late December 2017 
and now officially dies in august 2019 we hosted Warezloader
pretty much in plain site, no offshore hosting required, the firewall was set to route 
all traffic throw tor and no problem was found. 
We needed more hardware when the traffic load became bigger
so we switched server to something more pricey. 
The system was put up with 3 instances of Warezloader and a HTTP
loadbalancer to distribute the traffic.
We managed to be innovative as well, we are especially 
proud of introducing a system where the user gets to 
decide it's own Salt, so if our database and source code ever was leaked 
it would be very hard to crack all the members password. 


Tips for people interesting in creating a underground marketplace:
	Have an open dialog with the vendors.
	It's like every site - the more commercial you do for it, the higher user load you will have.
	Code it from scratch, don't use a blob of php that you do not know how to manage.
	the whole point in writing it your self is that no one will know it like you do,
	they cant fucking fingerprint a banner and then look for public exploits to it.
	Do it, if it fails, it fails! at least you did something when all the other marketplaces
	where shit. 
	Watch your log extremely closely, you need to live in your log files, you need to know
	what happens and when it does. You live in the log file!
	
Was Warezloader released on the right time?
In retrospect: we should have released Warezloader a couple of month earlier and caught the alphabay user wave.
The might have stopped a lot of people from going to the terrible place we all know as Hansa.
As operators of a underground marketplace we can see the pattern Hansa had:
	[0] A third party creates Hansa
	[1] Hansa goes okey but not great
	[2] time goes on and nothing really happens
	[3] Hansa crew gives up and puts Hansa for sale and a person working for the state buys it.
	[4] The creator of Hansa goes away and we are left with some bad part running the site.


We could have sold of Warezloader and our user base to some shady third party, but we all like to sleep at night 
knowing our morals are intact.


We would like to thank everyone who sent us messages and thanked us. 
One of the most popular features
we had was the Garden of Lentil, where we tried to revive  the Tor library that got shutdown a while ago.


All good things dies, or leave space for something else to grow. 
Sigaint went up in smoke and it is most likely that their servers got raided because it is hard to hide mx servers..
But the value of Sigaint, the mindset to stand up and say Hey we are not going to give out user data!
We are going to protect our users instead of going full facebook and google and selling them to the highest bidder.
It might never be the same like what it once was. But it might also become a lot better. instead of Warezloader being 
closed and source code released, there might pop up a majority of clones and everyone runs a marketplace, instead
of one sigaint, we might have 200 different sigaints. There is always going to be the cat and mouse game and 
as a provider you will always need to guard your servers to make sure it all stays up to date 
in order to keep the state payed orchs out.


A lot is left to say, but leaving a little mystery to it makes it more exciting.
By releasing the source code we contribute to a more non-php world, in the hopes of having more marketplaces be 
written in python, perhaps golang or rust! and not php.
The end goal was always to release the source code and disappear, which is what we are doing:


We are going to stick around for a short time and offer 
consulting for .onion services, warezloader@secmail.pro is where you will find us.


A huge thanks to everyone we where in contact with and everyone else who make .onion land the magical JavaScript
free place it is.


We would like to thank all the people who used Warezloader and who gained something from it
Warezloader will now go down in the history books as the first marketplace that 
existed in the best way possible, The admins not rich in fiat but in Consciousness

That's is, this is warezloader - We would like to hold up a glas, joint or *insert stimulate of your choice here* 
to all the real onces. Nomather who or what they/you are, you do it for moral reasons, you are a activist.  
You dont do it for publicity you do it because it rights. You are real, you are someone the people selling merchandize will 
never become.

Over and out
The legion of Warezloaders
Sailing on a wave of crypto



Want to see us to release the rest of the code? shoot us some coins and we will spin up a vm with the code repo 
1wKroRBXRdggYgcZ7f8VckaM8Vy6LoJgu


Code:

	cat warezloader.py

     1	#!/usr/bin/python2.7
     2	# -*- coding: utf-8 -*-
     3	
     4	#powerd by magicSyntax
     5	#:%s/\r/\r/g
     6	
     7	import flask, MySQLdb
     8	import base64, io, tempfile
     9	from base64 import b64decode, b64encode
    10	from dateutil import parser as dateparser
    11	import sys, random, requests#requests, random
    12	from cleaner.cleanit import cleans #cleans
    13	from bitcoin import *
    14	from pureimg import ImageCaptcha as captchacaptcha
    15	from os import urandom, path, unlink
    16	import os.path, functools, json, time#, bitcoin
    17	from bitcoin.core import CTransaction, b2lx
    18	from bitcoin.messages import msg_version, msg_inv, msg_ping, msg_verack, msg_pong, msg_tx, messagemap, MsgSerializable, MSG_TX, MSG_BLOCK
    19	from bitcoin.net import CInv
    20	from fnmatch import fnmatch
    21	from urllib2 import HTTPError, urlopen
    22	from urllib import urlencode
    23	from functools import wraps
    24	import logging, subprocess
    25	from os.path import getsize, exists
    26	from werkzeug import secure_filename, cached_property
    27	from werkzeug.utils import cached_property
    28	import numpy as npnumpy
    29	#import gevent - - fuck this
    30	#from gevent.pool import Group as geventGroup #piece of pure shit
    31	from werkzeug.exceptions import NotFound, BadRequestKeyError #test
    32	import ecdsa, itertools, functools, pycoind, pycoin
    33	import pylru
    34	from pycoin.tx.tx_utils import *
    35	from pycoin.tx import tx_utils
    36	import hashlib, urllib #, gevent
    37	from bitcoin.core.serialize import Hash as btcHash
    38	#from flask.ext.scrypt import generate_password_hash
    39	#from flask.ext.cache import Cache
    40	from flask_autoindex import AutoIndex
    41	from flask_silk import Silk
    42	from future.utils import with_metaclass
    43	from future.moves.urllib.parse import urljoin
    44	from threading import Lock
    45	from future.builtins import object #str
    46	from mimetypes import guess_type
    47	import re as fre
    48	from itertools import repeat
    49	from datetime import timedelta
    50	import logging.handlers as lhandlers
    51	from random_words import RandomWords
    52	from forex_python.converter import CurrencyRates #https://github.com/MicroPyramid/forex-python
    53	from forex_python.bitcoin import BtcConverter
    54	import datetime, decimal, flask_paginate#, struct
    55	from decimal import *
    56	import pickledb # https://github.com/jlhutch/pylru cacheing
    57	import socket, gnupg
    58	from binascii import unhexlify
    59	from io import BytesIO
    60	#import urllib3.contrib.pyopenssl#https://urllib3.readthedocs.io/en/latest/reference/urllib3.contrib.html#urllib3.contrib.pyopenssl.inject_into_urllib3
    61	#urllib3.contrib.pyopenssl.inject_into_urllib3()
    62	from Crypto.Cipher import AES
    63	from pyblake2 import *
    64	from base64 import *
    65	from os import urandom
    66	
    67	#monero.py script
    68	import monero
    69	
    70	
    71	
    72	torport = 9050
    73	#socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", torport, True) #use in prod
    74	#s = socks.socksocket()
    75	
    76	#session = requesocks.session()
    77	#session.proxies = {'http': 'socks5://127.0.0.1:9050', 'https': 'socks5://127.0.0.1:9050'}
    78	#session.get()
    79	
    80	#import requesocks
    81	#session = requesocks.session()
    82	#session.proxies = {'http': 'socks5h://127.0.0.1:9050', 'https': 'socks5h://127.0.0.1:9050'}
    83
    84	#<Response [501]>
    85	
    86	from scrypt import hash as scrypt_hash
    87	
    88	def generate_password_hash(password, salt, N=1 << 14, r=8, p=1, buflen=64):
    89	    pw_hash = scrypt_hash(password.encode('utf-8'), salt.encode('utf-8'), N, r, p, buflen)
    90	    return base64.b64encode(pw_hash)
    91	
    92	
    93	mincache = pylru.lrucache(100)
    94	
    95	#todo cache this - to auto update it
    96	SECRET_KEY5 = 'stuffgoeshere + str(datetime.date.today())
    97	
    98	globalvendorprice = 100
    99	
   100	import logging
   101	import os, re, shutil, threading, string, tarfile, collections
   102	from pyblake2 import blake2b
   103	#gnupg , use root???or usr
   104	gpg = gnupg.GPG()#'/home/webb/.gnupg/')
   105	#gpg = gnupg.GPG(gnupghome='/root/.gnupg')
   106	gpg.encoding = 'utf-8'
   107	
   108	
   109	
   110	#shift pgp key half a year
   111	
   112	markup = 1.07
   113	decimal.getcontext().prec = 4
   114	
   115	b = BtcConverter() 
   116	
   117	rw = RandomWords()
   118	
   119	txlog = logging.getLogger('btc_tx')
   120	A = None
   121	
   122	
   123	#monerolog = logging.getLogger(name='monerologger')
   124	monerolog = logging.getLogger('monerolog')
   125	hdlr = logging.FileHandler(os.getcwd()+'/monerolog.log')
   126	formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
   127	hdlr.setFormatter(formatter)
   128	monerolog.addHandler(hdlr) 
   129	
   130	
   131	reload( sys )
   132	sys.setdefaultencoding('utf-8')
   133	
   134	wl = flask.Flask(__name__) 
   135	wl.config['ALLOWED_EXTENSIONS'] = set(['png', 'jpg', 'jpeg', 'gif'])
   136	wl.config['items_FOLDER'] = 'static/itempicz'
   137	wl.config['ITEM_FOLDER'] = 'static/item_pics/'
   138	#wl.config['items_FOLDER'] = ' '
   139	wl.config['AVATAR_FOLDER'] = 'static/vendors_pics/'
   140	
   141	wl.config['directory_tar_buffsize'] = '262144'
   142	wl.config['directory_downloadable'] = 'libs/'
   143	wl.config['directory_remove'] = 'lib'
   144	wl.config['directory_base'] = 'libs'
   145	#lib
   146	wl.config['lib_FOLDER'] = 'libs/'
   147	#wl.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024 #16mb
   148	#simplyfy *
   149	app = wl
   150	
   151	
   152	whitelisted_cats = ['Malware', 'Guides', 'Hosting', 'Computer', 'Software', 'Custom', 'Garden', 'Carded', 'Carding', 'Clothes', 'Activism', 'Carded Items', 'Drugs', 'Cardin_Fraud', 'Music', 'Home_and_Garden', 'Lab_supplies', 'custom_Orders', 'Weapons', 'Software_scripts_source-codes', 'Various_hacking_phreaking', 'Guides_E-books', 'Hosting_servers', 'Collectibles', 'Art', 'Computer_equipment', 'Services']
   153	
   154	#txdb = pickledb.load('tx.db', False)
   155	ss_db = pickledb.load('catz.db', False)
   156	s_db = pickledb.load('example.db', False)#in mem
   157	time_db = pickledb.load('time.db', True)
   158	
   159	#lib
   160	Default = None
   161	AutoIndex(wl, browse_root='lib/')
   162	is_same_path = lambda x, y: os.stat(x) == os.stat(y)
   163	by_extension = [
   164	    ('page_white_python.png', 'py'),
   165	    ('python.png', 'pyc'),
   166	    ('page_white_text_width.png', ['md', 'markdown', 'rst', 'rtf']),
   167	    ('page_white_code.png', ['html', 'htm', 'cgi']),
   168	    ('page_white_visualstudio.png', ['asp', 'vb']),
   169	    ('page_white_ruby.png', 'rb'),
   170	    ('page_code.png', 'xhtml'),
   171	    ('page_white_code_red.png', ['xml', 'xsl', 'xslt', 'yml']),
   172	    ('script.png', ['js', 'json', 'applescript', 'htc']),
   173	    ('layout.png', ['css', 'less']),
   174	    ('page_white_php.png', 'php'),
   175	    ('page_white_c.png', 'c'),
   176	    ('page_white_cplusplus.png', 'cpp'),
   177	    ('page_white_h.png', 'h'),
   178	    ('database.png', ['db', 'sqlite', 'sqlite3']),
   179	    ('page_white_database.png', 'sql'),
   180	    ('page_white_gear.png', ['conf', 'cfg', 'ini', 'reg', 'sys']),
   181	    ('page_white_zip.png', ['zip', 'tar', 'gz', 'tgz', '7z', 'alz', 'rar', \
   182	                            'bin', 'cab']),
   183	    ('cup.png', 'jar'),
   184	    ('page_white_cup.png', ['java', 'jsp']),
   185	    ('application_osx_terminal.png', 'sh'),
   186	    ('page_white_acrobat.png', 'pdf'),
   187	    ('package.png', ['pkg', 'dmg']),
   188	    ('shape_group.png', ['ai', 'svg', 'eps']),
   189	    ('application_osx.png', 'app'),
   190	    ('cursor.png', 'cur'),
   191	    ('feed.png', 'rss'),
   192	    ('cd.png', ['iso', 'vcd', 'toast']),
   193	    ('page_white_powerpoint.png', ['ppt', 'pptx']),
   194	    ('page_white_excel.png', ['xls', 'xlsx', 'csv']),
   195	    ('page_white_word.png', ['doc', 'docx']),
   196	    ('page_white_flash.png', 'swf'),
   197	    ('page_white_actionscript.png', ['fla', 'as']),
   198	    ('comment.png', 'smi'),
   199	    ('disk.png', ['bak', 'bup']),
   200	    ('application_xp_terminal.png', ['bat', 'com']),
   201	    ('application.png', 'exe'),
   202	    ('key.png', 'cer'),
   203	    ('cog.png', ['dll', 'so']),
   204	    ('pictures.png', 'ics'),
   205	    ('error.png', 'log'),
   206	    ('music.png', 'mpa'),
   207	    ('font.png', ['ttf', 'eot']),
   208	    ('vcard.png', 'vcf'),
   209	    ('page_white.png', Default)
   210	]
   211	by_filename = [
   212	    ('page_white_gear.png', ['Makefile', 'Rakefile'])
   213	]
   214	by_mimetype = [
   215	    ('page_white_text.png', 'text/*'),
   216	    ('picture.png', 'image/*'),
   217	    ('music.png', 'audio/*'),
   218	    ('film.png', 'video/*')
   219	]
   220	
   221	
   222	#urllib3.disable_warnings()
   223	
   224	#define some k3ys
   225	wl.secret_key = 'censored key'
   226	
   227	hash1 = 'censored key' #more then->128
   228	hash2 = 'censored key' #more then->128
   229	hash3 = 'censored key' #more then->128
   230	
   231	wlblake = 'censored key'
   232	
   233	#30 min for perm session
   234	wl.permanent_session_lifetime = timedelta(minutes=30)
   235	
   236	#cache = Cache(wl, config={'CACHE_TYPE': 'simple'})
   237	#cache.init_app(wl, config={'CACHE_TYPE': 'simple'})
   238	
   239	
   240	#mysql connect
   241	#mysql connect
   242	#def connect():
   243	    #db = MySQLdb.connect(host='localhost', user='warez', passwd='passwd', db='databasename')
   244	    #return db
   245	
   246	#wl.logger.create_logger()
   247	
   248	
   249	#def mysql_filelog():
   250	    #db = MySQLdb.connect(host=)>
   251	    #safer to run a localscript in case of leakage
   252	
   253	def connecttxdb():
   254	    return MySQLdb.connect(host='localhost', user='txkeepr', passwd='vEbpBlls4yqU', db='databasename')
   255	
   256	def connectmycoinz():
   257	    return MySQLdb.connect(host='localhost', user='mcoinkeepr', passwd='hWFYSHfV', db='databasename')
   258	
   259	def connectauctions():
   260	    return MySQLdb.connect(host='localhost', user='akeepr00', passwd='qY5r7Yw', db='databasename')
   261	
   262	def connectinvite():
   263	    return MySQLdb.connect(host='localhost', user='inkeepr', passwd='4PCYLfuR', db='databasename')
   264	
   265	def connectcoinz():
   266	    return MySQLdb.connect(host='localhost', user='ckeepr', passwd='4PCYLwuR', db='databasename')
   267	
   268	def connectdis():
   269	    return MySQLdb.connect(host='localhost', user='diskeepr', passwd='pV!@@)$*%!@)&%_&#$&*();nOLP', db='discount_codes')
   270	
   271	def connects():
   272	    return MySQLdb.connect(host='localhost', user='skeepr', passwd='tqlqUlS', db='databasename')
   273	
   274	def connectsupport():
   275	    return MySQLdb.connect(host='localhost', user='supportkeepr00', passwd='2WTZW6qdYT9bCqMTYZ67Ws399uWNDaU2pf7ITryshV74iq4TyULERYvJeGYbF4T6x1LBK+AAO4vG', db='databasename')
   276	
   277	def connectorders():
   278	    return MySQLdb.connect(host='localhost', user='okeepr00', passwd='ho+UrJuVlgj1liMjd3A5gpzM8yNWrXTilbzSFXo+zzJXY5xK3zBflVk4inMJTtT+iW6ZCVXm288P', db='databasename')
   279	
   280	def connectvens():
   281	    return MySQLdb.connect(host='localhost', user='vkeepr', passwd='uqMeIsPXnBhtK85CdMaqXjmbDOauva5s33+ZTL8+DEXwPUs+Ct4gq6aknfLcZiDNkK1qxZ02nVo', db='databasename')
   282	
   283	def connectitems():
   284	    return MySQLdb.connect(host='localhost', user='ikeepr', passwd='1xTFaXRkNtujiD6LcGUwzgE8owataYDTfCIiroecTFirOxfEhLZvqOqImuaJENt9t5FMO1zLWSRT', db='databasename')
   285	
   286	def connectnews():
   287	    return MySQLdb.connect(host='localhost', user='nkeepr', passwd='PV70pc0x0befTLcg24XUNxrHTaY+AI1Wvx4oU87eLtm2wJmuAPK8UfrXnqpQvcL6mX+aLKXqtG9', db='databasename')
   288	
   289	def connectauth():
   290	    return MySQLdb.connect(host='localhost', user='authkeepr', passwd='+PMyA6SlBJ9tWNVY5jPvps8SA8CJmt5ZQh764OW08u4QXceinzp99kHYOj8b6HDLSppbnArR5kS', db='databasename')
   291	
   292	def connecttx():
   293	    return MySQLdb.connect(host='localhost', user='txkeepr', passwd='vEbpBlls4yq/HGY25QGazhpOyK331UmImPbUDGvZNhi7cSKU', db='databasename')
   294	
   295	def connecttrade():
   296	    return MySQLdb.connect(host='localhost', user='tradekeepr00', passwd='+PMyw2A6SlBJ9tWNVY5jPvps8SA8CJmt5ZQh764OW08u4QXceinzp99kHYOj8b6HDLSppbnArR5kS', db='databasename')
   297	
   298	def connectinbox():
   299	    return MySQLdb.connect(host='localhost', user='inboxkeepr', passwd='hWn7OEYqSpwwga1QUWiDgT1xilEfxnalHoyXJCzSVDJh5gJmYpORlDX7bY4OEp3bachecFYSHfV', db='databasename')
   300	
   301	
   302	
   303	#curl forex
   304	#soo = b.get_latest_price('USD')
   305	#no work  in offline mode
   306	
   307	
   308	
   309	import logging
   310	##logging test
   311	log = logging.getLogger(__name__)
   312	logging.basicConfig(filename='debug.log',level=logging.DEBUG)
   313	logging.basicConfig(filename='warning.log',level=logging.WARNING)
   314	logging.basicConfig(filename='info.log',level=logging.INFO)
   315	logging.basicConfig(filename='critical.log',level=logging.CRITICAL)
   316	logging.basicConfig(filename='error.log',level=logging.ERROR) 	
   317	logging.basicConfig(filename='notset.log',level=logging.NOTSET)
   318	#log BitcoinRPC
   319	#logging.getLogger("BitcoinRPC").setLevel(logging.DEBUG, filename='bitcoin.log')
   320	
   321	#logging.getLogger("werkzeug").setLevel(logging.INFO, filename='bitcoin.log')
   322	#logging.getLogger(name='werkzeug').log()
   323	
   324	logger1 = logging.getLogger('root')
   325	log_handler1 = lhandlers.RotatingFileHandler('w.log', maxBytes=1024 * 1024 * 100, backupCount=20)
   326	logger1.addHandler(log_handler1)
   327	
   328	logger2 = logging.getLogger('INFO:werkzeug')
   329	log_handler2 = lhandlers.RotatingFileHandler('w.log', maxBytes=1024 * 1024 * 100, backupCount=20)
   330	logger1.addHandler(log_handler2)
   331	
   332	#http://flask.pocoo.org/snippets/100/
   333	#headers
   334	def add_response_headers(headers={}):
   335	    """This decorator adds the headers passed in to the response"""
   336	    def decorator(f):
   337		@wraps(f)
   338		def decorated_function(*args, **kwargs):
   339		    resp = flask.make_response(f(*args, **kwargs))
   340		    h = resp.headers
   341		    for header, value in headers.items():
   342			h[header] = value
   343		    return resp
   344		return decorated_function
   345	    return decorator
   346	
   347	
   348	def noindex(f):
   349	    """This decorator passes X-Robots-Tag: noindex"""
   350	    @wraps(f)
   351	    @add_response_headers({'Server': 'Warezloader'})
   352	    def decorated_function(*args, **kwargs):
   353		return f(*args, **kwargs)
   354	    return decorated_function
   355	
   356	def axss(f):
   357	    @wraps(f)
   358	    @add_response_headers({'X-XSS-Protection': '1; mode=block'})
   359	    def decorated_function(*args, **kwargs):
   360		return f(*args, **kwargs)
   361	    return decorated_function
   362	    
   363	def rss(f):
   364	    @wraps(f)
   365	    @add_response_headers({'Content-Type': 'application/rss+xml'})
   366	    def decorated_function(*args, **kwargs):
   367		return f(*args, **kwargs)
   368	    return decorated_function    
   369	    
   370	def af(f):
   371	    @wraps(f)
   372	    @add_response_headers({'X-Frame-Options': 'SAMEORIGIN'})
   373	    def decorated_function(*args, **kwargs):
   374		return f(*args, **kwargs)
   375	    return decorated_function
   376		
   377		
   378	def adate(f):
   379	    @wraps(f)
   380	    @add_response_headers({'Date': 'Fri, Jan 1984 01:13:37'})
   381	    def decorated_function(*args, **kwargs):
   382		return f(*args, **kwargs)
   383	    return decorated_function
   384		    
   385	
   386	restless = {}
   387	
   388	class cloak():
   389		def __init__(self):
   390		    self.tempdb = {}
   391		    self.inbox = {}
   392		    self.prefix = 'cloaked_'
   393	
   394	
   395		def checkexpiredate(self, datumet):
   396		    return dateparser.parse(datumet) < datetime.datetime.today()
   397	
   398		def resolvecloak(self, cloak):
   399			for x in restless.keys():
   400			    if restless.get(x).get('cloak') == cloak:
   401				if self.checkexpiredate(restless.get(x).get('expire')):
   402				    #remove in runtime?
   403				    global restless
   404				    restless.pop(cloak)
   405				    return False
   406				return restless.get(x).get('nick')
   407			return False
   408	
   409		def gencloak(self, nick):
   410			global restless
   411			yiha = False
   412			while not yiha:
   413			    cloaken = self.prefix+base64.b64encode(os.urandom(36)).replace('=', '').replace('\\', '').replace('/', '')
   414			    if not restless.keys().__contains__(cloaken):
   415				yiha = True
   416			restless[cloaken] = {'cloak':cloaken, 'nick': nick,'expire': str(datetime.datetime.now()+datetime.timedelta(days=7))[:19], 'inbox':[],'active':'yes'}
   417			return cloaken
   418	
   419		def get_cloak(self, nick):
   420		    km = []
   421		    for cloaken in restless.keys():
   422			x = restless.get(cloaken)
   423			if x:
   424			    if self.checkexpiredate(x.get('expire')):
   425				global restless
   426				restless.pop(x)
   427			    else:
   428				if x.get('nick') == nick:
   429				    km.append(x)
   430		    return km
   431	
   432		def hascloak(self, nick):
   433		    x = self.get_cloak(nick)
   434		    if len(x) >= 1:
   435			return x[0].get('cloak')
   436		    return False
   437	
   438		def shred_cloak(self, nick):# im i a small posix program?
   439		    global restless
   440		    for x in restless.keys():
   441			if restless.get(x).get('nick') == nick:
   442			    restless.pop(x)
   443		    return True
   444	
   445		def get_cloakinbox(self, cloaken):
   446		    return restless[cloaken].get('inbox')
   447	
   448		def get_msgs(self, nick):
   449		    msgs = []
   450		    for x in self.inbox.keys():
   451			if self.checkexpiredate(self.inbox.get(x).get('expire')):
   452			    self.inbox.pop(x)
   453			if self.inbox.get(x).get('To') == nick:
   454			    msgs.append(inbox.get(x))
   455		    return msgs
   456	
   457		def addmsgs(self, to, fromo, subject, msg, cloak):
   458		    yiha = False
   459		    while not yiha:
   460			cloaken = self.prefix+base64.b64encode(os.urandom(36)).replace('=', '')
   461			if not self.inbox.keys().__contains__(cloaken):
   462			    yiha = True
   463		    self.inbox[cloaken] = {'Subject':subject, 'To':to, 'From':fromo,'message':msg, 'cloak':cloak, 'expire': str(datetime.datetime.now()+datetime.timedelta(days=7))[:19]}
   464	
   465		def remove_cloak(self, cloaken):
   466		    global restless
   467		    restless.pop(cloken)
   468		    return True
   469	
   470	
   471	
   472	#X-Content-Type-Options: nosniff
   473	#def nosniff(f):
   474	    #@wraps(f)
   475	    #@add_response_headers({'X-Content-Type-Options': 'nosniff'})
   476	    #def decorated_function(*args, **kwargs):
   477		#return f(*args, **kwargs)
   478	    #return decorated_function
   479	
   480	
   481	
   482	
   483	#@noindex
   484	@wl.before_request
   485	def csrf_protect():
   486	    if flask.request.method == 'POST':
   487	        token = flask.session.pop('_condom_token', None)
   488	        if not token or token != flask.request.form.get('_condom_token'):
   489	            return 'error with your request'
   490	#def make_anon():
   491	#    if 'role' or 'user' or 'admin' not in session:
   492	#        session['role'] = 'anonymous'
   493	#        session['nick'] = 'anonymous user'
   494	def before():
   495	    flask.session.permanent = True
   496	    wl.permanent_session_lifetime = timedelta(minutes=30)
   497	def gen_token():
   498	    if '_condom_token' not in flask.session:
   499	        flask.session['_condom_token'] = base64.b64encode(urandom(67)) # todo validate mey
   500	    return flask.session['_condom_token']
   501	    
   502	wl.jinja_env.globals['condom_token'] = gen_token
   503	wl.jinja_env.globals['isinstance'] = isinstance
   504	
   505	
   506	def thisyear():
   507	    s = datetime.date.today()
   508	    s = str(s)
   509	    return str(s[:4])
   510	wl.jinja_env.globals['thisyear'] = thisyear#()
   511	
   512	 #if SSLError     SSLError: [Errno bad handshake] (-1, 'Unexpected EOF')
   513	 #return 'some fucker is blocking our network access, please wait while we fix it'
   514	
   515	#@wl.before_request
   516	#@noindex
   517	
   518	
   519	#todo def this check
   520	def ua_check(ua):
   521	    shitua = ['sqlmap', 'Scanner', 'w3af', 'spider', 'wget', 'Bot', 'curl', 'EmailSiphon', 'EmailWolf', 'ExtractorPro', 'NEWT', 'Crescent', 'CherryPicker', '[Ww]eb[Bb]andit', 'WebEMailExtrac', 'NICErsPRO', 'Teleport', 'Zeus', 'Webster', 'Microsoft.URL', 'Wget', 'LinkWalker', 'sitecheck.internetseer.com', 'ia_archiver', 'DIIbot', 'psbot', 'EmailCollector', 'http://www.iaea.org', 'HTTrack', 'Downloader', 'Bot', 'Big Brother', 'Download', 'nikto', 'Spider', 'Crawler', 'python', 'perl', 'httplib', 'FlashGet', 'Python-urllib', 'HTTrack']   
   522	    a = 'a'
   523	    for line in shitua:
   524		if line in ua:
   525		    a = 'b'
   526		    #return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   527		else:
   528		    pass  
   529	    if a == 'b':
   530		return True
   531	    else:
   532		return False
   533	
   534	
   535	
   536	@wl.before_request
   537	#@noindex
   538	#@axss
   539	#@af
   540	#@adate
   541	def blockuseragentreq():
   542	    useragent = flask.request.headers['User-Agent']    
   543	    shitua = ['sqlmap', 'Scanner', 'w3af', 'spider', 'wget', 'Bot', 'curl', 'EmailSiphon', 'EmailWolf', 'ExtractorPro', 'NEWT', 'Crescent', 'CherryPicker', '[Ww]eb[Bb]andit', 'WebEMailExtrac', 'NICErsPRO', 'Teleport', 'Zeus', 'Webster', 'Microsoft.URL', 'Wget', 'LinkWalker', 'sitecheck.internetseer.com', 'ia_archiver', 'DIIbot', 'psbot', 'EmailCollector', 'http://www.iaea.org', 'HTTrack', 'Downloader', 'Bot', 'Big Brother', 'Download', 'nikto', 'Spider', 'Crawler', 'python', 'perl', 'httplib', 'FlashGet', 'Python-urllib', 'HTTrack']   
   544	    #shitua = ['sqlmap', 'Scanner', 'w3af', 'spider', 'wget', 'Bot', 'curl']
   545	    #for line in shitua:
   546	   ##sprint useragent
   547		#if line in useragent:
   548	    #if ua_check(useragent):
   549		#return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   550	    #shitua = ['sqlmap', 'Scanner', 'w3af', 'spider', 'wget', 'Bot', 'curl', 'EmailSiphon', 'EmailWolf', 'ExtractorPro', 'NEWT', 'Crescent', 'CherryPicker', '[Ww]eb[Bb]andit', 'WebEMailExtrac', 'NICErsPRO', 'Teleport', 'Zeus', 'Webster', 'Microsoft.URL', 'Wget', 'LinkWalker', 'sitecheck.internetseer.com', 'ia_archiver', 'DIIbot', 'psbot', 'EmailCollector', 'http://www.iaea.org', 'HTTrack', 'Downloader', 'Bot', 'Big Brother', 'Download', 'nikto', 'Spider', 'Crawler', 'python', 'perl', 'httplib', 'FlashGet', 'Python-urllib', 'HTTrack']
   551	    #if useragent in shitua:
   552		#return flask.redirect('/uarblocked', code=302)
   553	    #else:
   554		#pass
   555	    #pass
   556	    #change change to def function, if .contains
   557	    if 'SqqqQLMAP' in useragent.upper():
   558		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   559	    elif 'BEGIN' in useragent.upper():
   560		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   561	    
   562	    elif 'ruby'.upper() in useragent.upper():
   563		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   564	    elif 'shell'.upper() in useragent.upper():
   565		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   566	
   567	    elif 'MSOffice'.upper() in useragent.upper():
   568		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   569	    elif 'WWW' in useragent.upper():
   570		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   571	    elif 'SNOOPY' in useragent.upper():
   572		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   573	    elif 'SAMPLE' in useragent.upper():
   574		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   575	    elif 'PHP' in useragent.upper():
   576		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   577	    elif 'PYTHON' in useragent.upper():
   578		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   579	    elif 'PERL' in useragent.upper():
   580		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   581	    
   582	    elif 'nmap' in useragent.lower():
   583		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   584	    
   585	    
   586	    elif 'NULL' in useragent.upper():
   587		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   588	    elif 'Arachni'.upper() in useragent.upper() :#update
   589		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)	
   590	    elif 'NESSUS' in useragent.upper():
   591		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   592	    elif 'OPENVAS' in useragent.upper():
   593		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   594	        
   595	    elif 'WHERE' in useragent.upper():
   596		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   597	    elif 'AND' in useragent.upper():
   598		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   599		
   600	    elif 'SELECT' in useragent.upper():
   601		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)	
   602	    elif 'SCANNER' in useragent.upper():
   603		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   604	    elif 'W3dAF' in useragent.upper():#update
   605		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   606	    elif 'SPIDER' in useragent.upper():
   607		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)	
   608	    elif 'WGET' in useragent.upper():
   609		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
   610	    elif 'CURL' in useragent.upper():
   611		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   612	    elif 'BOT' in useragent.upper():
   613		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   614	    elif 'EMAIL' in useragent.upper():
   615		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   616	    elif 'NEWT' in useragent.upper():
   617		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   618	    elif 'ZEUS' in useragent.upper():
   619		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   620	    elif 'HTTRACK' in useragent.upper():
   621		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   622	    elif 'DOWNLOAD' in useragent.upper():
   623		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   624	    elif 'BRUTUS' in useragent.upper():
   625		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)    
   626	    elif 'CRAWLER' in useragent.upper():
   627		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   628	    elif 'JAVA' in useragent.upper():
   629		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   630	    elif 'INSPECT' in useragent.upper():
   631		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   632	    elif 'PAROS' in useragent.upper():
   633		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   634	    elif 'https://' in useragent.lower() or 'http://' in useragent.lower():
   635		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   636	    elif 'whatweb' in useragent.lower() or 'scrapy' in useragent.lower():
   637		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   638	    elif 'wappalyzer' in useragent.lower():
   639		return flask.redirect('http://meatspin.net/', code=302) 
   640	    
   641	    elif 'NIKTO' in useragent.upper():
   642		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   643	    elif 'GO-' in useragent.upper():
   644		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   645	    elif 'http-client'.upper() in useragent.upper():
   646		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   647	    elif 'client'.upper() in useragent.upper():
   648		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302) 
   649		    
   650	    
   651	    elif useragent in shitua:
   652		return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)	
   653	    else:
   654		pass
   655	    #else:
   656		#pass    
   657	
   658	
   659	
   660	 
   661	@wl.route('/')
   662	@noindex
   663	@axss
   664	@af
   665	@adate
   666	def index():
   667	    
   668	    #if flask.session.has_key('role') and flask.session:
   669	        #return flask.redirect(flask.url_for(str(flask.session['role'])))
   670	    
   671	    if flask.session.has_key('special') and flask.session:
   672		if not vertify_session(flask.session['special']):
   673		    return flask.redirect(flask.url_for('choice_mode'))
   674		return flask.redirect(flask.url_for(str(decode_session(flask.session['special'])[1])))
   675	    else:
   676		return flask.redirect(flask.url_for('choice_mode'))
   677	  
   678	    return '''
   679	    <html>
   680	<head>
   681	<title>Warezloader</title>
   682	</head>    
   683	    <center>
   684	    
   685	    <br>
   686	    <br>
   687	    <br>
   688	    <br>
   689	
   690	Warezloader version 2.0  
   691	<br>
   692	<a href='/signup'>signup</a>-----<a href='login'>login</a>
   693	<br>    <br>
   694	    <br>
   695	    <br>
   696	    <br>
   697	    <br><pre>
   698	from<br> '.00400000: 4D		dec	ebp' <br>and beyond   
   699	<br>    
   700	   <br>
   701	   The encrypted way to distribute for the local Pusher
   702	       <br>
   703	            <br>
   704	            <a href='/faq'>faq</a>
   705	    
   706	    </html>
   707	    '''
   708	
   709	@wl.route('/choice_mode')
   710	@noindex
   711	@axss
   712	@af
   713	@adate
   714	def choice_mode():
   715	    return flask.render_template('new/choice.html')
   716	
   717	
   718	
   719	@wl.route('/mixer')
   720	@noindex
   721	@axss
   722	@af
   723	@adate
   724	def bestmixer():
   725	    return '''
   726	<html>
   727	
   728	<head>
   729		<title>Best Mixer</title>
   730	</head>
   731	
   732	<body>
   733	<pre>
   734	
   735	We at Warezloader have been asked several times 
   736	about bestmixer.io, it reminds us of Sigaint's Bitcoin mixer.
   737	The recent bust with the State issued message "YOU ARE NOT ANONYMOUS"
   738	( CLEARNET CACHE: https://archive.fo/ICWsH ) is a Proof of Concept that
   739	Crypto Currency is a threat and a alternative to State issued fiat 
   740	currencies. We are living in an amazing age where we are headed towards
   741	non-governmental mathematically driven currencies 
   742	
   743	We does not have any plans right now to host a bitcoin mixer
   744	but if anyone want to run a Bitcoin mixer we highly recommend it.
   745	For anonymity we always recommend that you convert your bitcoin to Monero 
   746	and send it to several Monero addresses with a HIGH number as ring size
   747	the higher the ring size the better it works, but more expensive in transaction cost(24 is pretty good).
   748	And then bounce it around to receive a state-eye free and decentralized wallet.
   749	Good to know:
   750	A Monero deanonymization technique that is being used is that Third parties 
   751	targets mining pools in order to get out statics about certain addresses. 
   752	
   753	If anyone want to build a mixer and need hosting we might be interested in lending out some hardware, contact us using our support page.
   754	
   755	
   756	Read more about why ring signatures are so great:
   757	https://en.wikipedia.org/wiki/Ring_signature
   758	https://link.springer.com/chapter/10.1007%2F3-540-45682-1_32
   759	https://blockonomi.com/ring-signatures/
   760	https://www.getmonero.org/resources/user-guides/monero-wallet-cli.html
   761	https://lab.getmonero.org/
   762	https://www.getmonero.org/resources/moneropedia/ring-size.html
   763	
   764	
   765	
   766	Tu ne cede malis sed contra audentior ito
   767	
   768	Warezloader ~ The Marketplace
   769	
   770	</pre>
   771	</body>
   772	
   773	</html>
   774	'''
   775	
   776	@wl.route('/consulting')
   777	@noindex
   778	@axss
   779	@af
   780	@adate
   781	def consulting():
   782		return ''' 
   783	
   784	<html><body>
   785	<pre>
   786	Since we have gotten several requests for 
   787	offering professional .onion land consulting
   788	
   789	
   790	We are offering the following:
   791	0: Operation secrutiy courses
   792	1: Vendor shop creation and hosting with maintenance
   793	2: .onion website hosting for static .html and css files 
   794	
   795	for any of these services contact us using our /support page
   796	</pre>
   797	</body>
   798	</html>
   799	
   800	'''
   801	
   802	@wl.route('/freeola')
   803	@noindex
   804	@axss
   805	@af
   806	@adate
   807	def freeola():
   808	    return '''
   809	<html><body>
   810	<pre>
   811	Free ola bini!
   812	
   813	Another privacy minded programmer has been arrested based nothing more
   814	then false accusations.
   815	We are asking all members of Warezloader and everyone else to support
   816	the cause.
   817	
   818	Make your voices heard!
   819	its time to free him from Ecuador. 
   820	
   821	https://pastebin.com/raw/AcwBbQZJ here is the md5 hashes:
   822	
   823	vicadm = 6426b681e6c6374f7a7841591db87f7c
   824	secgen = 0c7fac3d1b6d78d203cccbda5d855313
   825	alvarito = e8d0679694635e8a41183498897ba447
   826	tumadre = 39d0489a475109e61bc72014726a6245
   827	pleon = 997867aff81edeef4ce79be12d87a0b8
   828	azul = 3b24fa7e14555a1912e5bc2198f8e075
   829	jdobem = 8aa5f0fbfbe18fcd39c0067d8318c05a
   830	bbriones = 5273ce22c84e6561a8d326087b253d83
   831	smorante = 1369c11026ee0078521cd7898ed92baf
   832	kgarces = 2f547d89bc8280f371a08d1e74dac035
   833	cecitos = ea4c425a6c1b2d9f779a5b0bc2d5320f
   834	ksolorz = 52fb8ea58bbbf6d73768c4929e0c5e0d
   835	nmanjarres = 769148e2dada1b112e23949119218c7e
   836	recitas = 8522c84a2e0196bda749a7fb62300f55
   837	DAGAMA = 5e2f493cab58aeccff3706fa81f54674
   838	2309197823 = 8c2a69173a0a79595406162a987e4313
   839	2905 = 314450613369e0ee72d0da7f6fee773c
   840	lucia = 3ba430337eb30f5fd7569451b5dfdf32
   841	pat1007 = 861f6026f69683ac2d8a1c31f5ee5471
   842	vanessa = 282bbbfb69da08d03ff4bcf34a94bc53
   843	profesor = 793741d54b00253006453742ad4ed534
   844	b171512 = 7f25a852fd2e59a01ab1611d1c815055
   845	glozanor = b41468002ca862a303bcc3f9c1dfd663
   846	
   847	
   848	
   849	We behind Warezloader support ola to 110%!
   850	
   851	We need your support:
   852	He is currently held at "El Inca Prison, Ecuador"
   853	DDOS the prison mailing system by sending mass amount of letters and other stuff.
   854	Complain, shutdown, make your voices heard
   855	site:.gob.ec
   856	site:.mil.ec
   857	https://www.swiftbic.com/banks-in-ECUADOR.html
   858	
   859	Read more:
   860	https://pastebin.com/raw/AcwBbQZJ
   861	https://freeolabini.org/en/statement/
   862	https://olabini.com/blog/
   863	</pre>
   864	</body>
   865	</html>
   866	'''
   867	
   868	
   869	
   870	@wl.route('/zeroseven')
   871	@noindex
   872	@axss
   873	@af
   874	@adate
   875	def zeroseven():
   876	    return '''
   877	<html>
   878	
   879	<head>
   880		<title>Zero Seven Release</title>
   881	</head>
   882	
   883	<pre>
   884	
   885	-----BEGIN PGP SIGNED MESSAGE-----
   886	Hash: SHA256
   887	
   888	Go online we did in late 2017
   889	Provide a strong solution for members, we did
   890	Innovate new solutions, we did
   891	
   892	
   893	We have been offline since late December, why?
   894	We decided to take WarezLoader offline because our members wanted new
   895	features, Mostly a new fancy user interface. 
   896	
   897	We are now back with several new features such as:
   898	A more stable platform, Never trust colocation in someone else data center.
   899	Improved encryption :) Due to this all passwords are different
   900	Since we don't know the members password, (We are not Hansa!) We
   901	decided to remove all members account. 
   902	
   903	
   904	Welcome to WarezLoader Version 0.7 a new user interface has been implemented and several other
   905	features.
   906	
   907	Enjoy the new Warezloader release
   908	If you have any suggestions on things you want changed and feature requests contact support.
   909	
   910	So now when we are live with a fancy new interface what is next?
   911	We are proud to announce that our friends are launching a new site!
   912	We will publish more information about this as soon as the site is 
   913	up and running. Stay tuned!
   914	
   915	
   916	ps. 
   917	We are looking for: 
   918	ezine authors 
   919	Drug advisories for self treatment
   920	People who can distribute and/or create Naloxone and/or Cabotegravir/gsk744
   921	How to guide('s) for Temporary Autonomous Zone's and Seasteading
   922	
   923	
   924	
   925	Sincerely
   926	The Legion of Warezloaders
   927	Serving the Stable, Anonymous and Secure platform for exchanging items on
   928	warezlrg54cefgmp.onion
   929	
   930	Back up/Mirrors:
   931	ljtfel43zja5an6d5zw6spujkhscgwcualqjxg2xkxabnq3ucrcusdyd.onion 
   932	qpeof4eiblqezgnonlc5nipdlelfnlghoj4erfkbtltr34dwdlp2jxqd.onion 
   933	
   934	-----BEGIN PGP SIGNATURE-----
   935	
   936	iQIzBAEBCAAdFiEEGO9nZghFyxI6ZRunWQ2M0I+udT0FAlyFT5IACgkQWQ2M0I+u
   937	dT1vERAAjkAsZYMRjd8ctR2BuB7/C6U5oLYOmKuAM1EZh5/ebjYj44jDXzUq27d9
   938	77p7PuFhrWTJyh5b4B78xa+HN3mszlisrME0Xq4nvSq9C9oIa8tH8/J09IqvF0Yz
   939	V76H1Ktq1TKcpUWSeRBV/iZ+zzQYC8ttP1GymdppVV8xXYWK121B8wS1W2BwCE8/
   940	d8R70glFFLkHDZyO0bBBPd2b2NoTr5c8MZo5ykH18cH5v60KoBVD32o8RpqaR7Tj
   941	Y7GabRrc+JXDktQMjNT2xDklygSRRSSx4cRE5zp8+h28LBLnQ8f2GwmrGCq5cwyZ
   942	PKRa52pmm4xgRLPCjn6QE0Dek10uDK+O5IXG/aotu/c+KgBJs4bjSfXc+JOqgYMa
   943	RJ4YGicW4gXis8yrmEf3fReOKr/XLy4yDTrV+3EFX2W+2ZzXmRmcwke0RFYeKXpP
   944	9y8DVsyKZVYqMlQ/RM6ET5xUD+EMkU+h8TFP80AdSRHY6UTZ1NlCg6azR7W+8LXq
   945	zHz1EyZ7fDutUIBHE8ZauoAX6UzVTp246mx1+cBaV14snrv9Fx4yqOOrY+p7GpYq
   946	OgynwDo7uERgvMqSt5P2nOmdgXQdZb8hrtaQRAqftmabGaddAAbI+x7pRS3qmZ0n
   947	HqWtoFIzb/3o+T4c319pvfB1MBAgKcVZkFsaQR3K3CGFisayLbA=
   948	=eqk7
   949	-----END PGP SIGNATURE-----
   950	
   951	
   952	
   953	
   954	</pre>
   955	
   956	
   957	</html>
   958	'''
   959	
   960	
   961	
   962	
   963	@wl.route('/dtest')
   964	@noindex
   965	@axss
   966	@af
   967	@adate
   968	def devtest():
   969	    if flask.session.has_key('special') and flask.session:
   970	        return flask.redirect(flask.url_for(str(decode_session(flask.session['special'])[1])))
   971	    
   972	    if not flask.session.has_key('special'):
   973		return flask.redirect(flask.url_for('choice_mode'))
   974	    
   975	
   976	    return 'what u expect?'
   977	
   978	
   979	
   980	@wl.route('/robots.txt')
   981	@noindex
   982	@axss
   983	@af
   984	@adate
   985	def robotstxt():
   986	    return """
   987	Nicetry: fgt
   988	User-agent: *
   989	Disallow: /
   990	    
   991	    """
   992	
   993	#@wl.route('/ttest')
   994	#@noindex
   995	#@adate
   996	#@axss
   997	#@af
   998	#def not_indexed():
   999	    ##if not decode_session(flask.session['special'])[0]:
  1000		##return 'no'
  1001	    ##else:
  1002		##return 'hello ' + str(decode_session(flask.session['special'])[0])
  1003	    #for line in flask.session:
  1004		#print line
  1005		#print flask.session[line]
  1006		
  1007	    #print 'here:'
  1008	    #print decode_session(flask.session['special'])#[1]
  1009	    ##print flask.session['special']
  1010	    ###if decode_session(flask.session['special'])[0] == None:
  1011	###	return flask.redirect(flask.url_for('choice_mode'))
  1012	    ##print '1'
  1013	    ##print decode_session(flask.session['special'])[0]
  1014	    ##print '2'
  1015	    ##print decode_session(flask.session['special'])[1]
  1016	    
  1017	    ##print s_db.getall()
  1018	   ### return 'hello ' + str(decode_session(flask.session['special'])[0])
  1019	    ##response = flask.make_response()
  1020	    ##response.headers['X-Parachutes'] = 'parachutes are cool'    
  1021	##    flask.Response.headers['X-Content-Type-Options'] = 'nosniff'
  1022	    #return "Check my headers!"
  1023	
  1024	
  1025	
  1026	
  1027	
  1028	
  1029	
  1030	
  1031	
  1032	
  1033	#msg search
  1034	@wl.route('/search.msg/mighty.search', methods=['GET', 'POST'])
  1035	@noindex
  1036	@axss
  1037	@af
  1038	@adate
  1039	def searchmsg():
  1040	    if not flask.session.has_key("nick"):
  1041		return flask.redirect(flask.url_for('choice_mode'))      
  1042	    if flask.session.has_key('special') and flask.session:
  1043		if not vertify_session(flask.session['special']):
  1044		    return flask.redirect(flask.url_for('choice_mode'))
  1045		pass
  1046	    else:
  1047		return flask.redirect(flask.url_for('choice_mode')) 
  1048	    error = False
  1049	    
  1050	    db = connectinbox()
  1051	    
  1052	    #new new here
  1053	    searchword = db.escape_string(flask.request.args.get('tag', ''))
  1054	    ll = db.cursor()
  1055	    ss = str(searchword)
  1056	    ls = ss
  1057	    ss = '%' + ss + '%'#todo clean input
  1058	    nick = decode_session(flask.session["special"])[0] 
  1059	    ll.execute('select msg, title, token, sender, hread from inbox where title or msg LIKE %s and send=%s or sender=%s', (ss, nick, nick))
  1060	    entries = [dict(msg=row[0], title=row[1], token=row[2], sender=row[3], read=row[4]) for row in ll.fetchall()]
  1061	    error = 'found messages with ' + ls + ':'
  1062	    if not entries:
  1063		error = 'No messages matching ' + str(ls)
  1064	    pricetable = searchingfor().getpt()#getpt()
  1065	    mess = getmsgs()
  1066	   # nick = decode_session(flask.session["special"])[0] 
  1067	    #ee = db.cursor()
  1068	    #ee.execute('select role from vens where nick=%s', (nick,))
  1069	    #role = ee.fetchone()
  1070	    #role = role[0]    
  1071	    db.close()
  1072	    db = connectvens()
  1073	    ee = db.cursor()
  1074	    ee.execute('select role from vens where nick=%s', (nick,))
  1075	    role = ee.fetchone()
  1076	    role = role[0]    
  1077	    db.close()    
  1078	    return flask.render_template('findmsg.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=mess, pricetable=pricetable, entries=entries, soo = searchingfor().latestbtcprice(), error=error)
  1079	
  1080	#search
  1081	@wl.route('/search.warezloader/mighty.search', methods=['GET', 'POST']) #?tag=<searchq>')
  1082	@noindex
  1083	@axss
  1084	@af
  1085	@adate
  1086	def searchbar():
  1087	    if not flask.session.has_key("nick"):
  1088		return flask.redirect(flask.url_for('choice_mode'))      
  1089	    if flask.session.has_key('special') and flask.session:
  1090		if not vertify_session(flask.session['special']):
  1091		    return flask.redirect(flask.url_for('choice_mode'))
  1092		pass
  1093	    else:
  1094		return flask.redirect(flask.url_for('choice_mode')) 
  1095	    #squery = searchq 
  1096	    #category = squery
  1097	    db = connectitems()
  1098	    db2 = connectvens()
  1099	    searchword = db.escape(flask.request.args.get('tag', ''))#todo clean input
  1100	    number = searchword
  1101	    nrrr = number
  1102	    number = '%' + number + '%'
  1103	    lb = db.cursor()
  1104	    pricetable = searchingfor().getpt()#getpt()
  1105	    mess = getmsgs()    
  1106	    nrrr = 'sorted by your search ' + nrrr 
  1107	    lb.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where item_category or item_des LIKE %s', (number, ))
  1108	    #entries = entries
  1109	    ee = db2.cursor()
  1110	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1111	    ee.execute('select role from vens where nick=%s', (nick,))
  1112	    role = ee.fetchone()
  1113	    role = role[0]    
  1114	    entries2 = wl_entries_cache().give_me_entries()
  1115	    db.close()
  1116	    db2.close()
  1117	    entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic=row[6]) for row in lb.fetchall()]
  1118	    return flask.render_template('search.html', newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, role=role, mess=mess, pricetable=pricetable, choice=nrrr, soo = searchingfor().latestbtcprice(), entries=entries)
  1119	
  1120	
  1121	
  1122	@wl.route('/search.warezloader/<cate>/')
  1123	@noindex
  1124	@axss
  1125	@af
  1126	@adate
  1127	def searchcatw(cate):
  1128	    if not flask.session.has_key("nick"):
  1129		return flask.redirect(flask.url_for('choice_mode'))      
  1130	    if flask.session.has_key('special') and flask.session:
  1131		if not vertify_session(flask.session['special']):
  1132		    return flask.redirect(flask.url_for('choice_mode'))
  1133		pass
  1134	    else:
  1135		return flask.redirect(flask.url_for('choice_mode')) 
  1136	    category = cate 
  1137	    #subcate = subcat
  1138	    pricetable = searchingfor().getpt()
  1139	    if not whitelisted_cats.__contains__(cate) or shit_cleaner(cate):
  1140	#sprint 'not a valid cate'
  1141	#sprint whitelisted_cats.__contains__(cate)
  1142		error = 'not a valid category'    
  1143		ch = cate
  1144		return flask.render_template('search.html', error=error, newsentries=wl_html_cache().get_news(), entries2=wl_entries_cache().give_me_entries(), soo = searchingfor().latestbtcprice(), mess=getmsgs(), pricetable=searchingfor().getpt(), choice=ch)
  1145	    
  1146	    ch = 'sorted by ' + category #+ ' ' + subcate
  1147	    db = connectitems()
  1148	    db2 = connectvens() 
  1149	    LL = db.cursor()
  1150	    find = '%' + category + '%'
  1151	    #find2 = '%' + subcate + '%'
  1152	#getpt()
  1153	    findall = find#subcate + '/' + category
  1154	    ee = db2.cursor()
  1155	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1156	    ee.execute('select role from vens where nick=%s', (nick,))
  1157	    role = ee.fetchone()
  1158	    
  1159	    role = role[0]    
  1160	    entries2 = wl_entries_cache().give_me_entries()
  1161	    
  1162	    LL.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where item_category LIKE %s', (findall,))
  1163	    entries = [dict(item_id=row[0], i_name=row[1], i_des=row[2], i_start=row[3], i_price=row[4], i_ven=row[5], i_pic=row[6]) for row in LL.fetchall()]
  1164	    db.close()
  1165	    db2.close()
  1166	    return flask.render_template('search.html', newsentries=wl_html_cache().get_news(), entries2=entries2, emnick=nick, soo = searchingfor().latestbtcprice(), mess=getmsgs() , role=role, pricetable=searchingfor().getpt(), choice=ch, entries=entries)
  1167	
  1168	
  1169	
  1170	
  1171	#cat search
  1172	@wl.route('/search.warezloader/<cate>/<subcat>')
  1173	@noindex
  1174	@axss
  1175	@af
  1176	@adate
  1177	def searchcat(cate, subcat):
  1178	    if not flask.session.has_key("nick"):
  1179		return flask.redirect(flask.url_for('choice_mode')) 
  1180	    if flask.session.has_key('special') and flask.session:
  1181		if not vertify_session(flask.session['special']):
  1182		    return flask.redirect(flask.url_for('choice_mode'))
  1183		pass
  1184	    else:
  1185		return flask.redirect(flask.url_for('choice_mode'))     
  1186	    category = cate 
  1187	    subcate = subcat
  1188	    
  1189	    if not whitelisted_cats.__contains__(cate) or shit_cleaner(cate):
  1190	#sprint 'not a valid cate'
  1191	#sprint whitelisted_cats.__contains__(cate)
  1192		error = 'not a valid category'    
  1193		ch = cate
  1194		return flask.render_template('search.html', error=error, newsentries=wl_html_cache().get_news(), entries2=wl_entries_cache().give_me_entries(), soo = searchingfor().latestbtcprice(), mess=getmsgs(), pricetable=searchingfor().getpt(), choice=ch)
  1195	    
  1196	    db = connectitems()
  1197	    db2 = connectvens()
  1198	    ch = 'sorted by ' + category + ' ' + subcate
  1199	    LL = db.cursor()
  1200	    find = '%' + category + '%'
  1201	    find2 = '%' + subcate + '%'
  1202	    pricetable = searchingfor().getpt()#getpt()
  1203	    mess = getmsgs()    
  1204	    findall = find2#subcate + '/' + category
  1205	    ee = db2.cursor()
  1206	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1207	    ee.execute('select role from vens where nick=%s', (nick,))
  1208	    role = ee.fetchone()
  1209	    
  1210	    role = role[0]    
  1211	    entries2 = wl_entries_cache().give_me_entries()
  1212	    
  1213	    LL.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where item_category LIKE %s', (findall,))
  1214	    entries = [dict(item_id=row[0], i_name=row[1], i_des=row[2], i_start=row[3], i_price=row[4], i_ven=row[5], i_pic=row[6]) for row in LL.fetchall()]
  1215	    db.close()
  1216	    db2.close()
  1217	    return flask.render_template('search.html', newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, soo = searchingfor().latestbtcprice(), mess=mess, role=role, pricetable=pricetable, choice=ch, entries=entries)
  1218	
  1219	
  1220	def btc_to_usd(btcamount):
  1221	    bprice = float(searchingfor().latestbtcprice())
  1222	    total = btcamount/bprice
  1223	    return total
  1224	
  1225	
  1226	def trade_amount(vendor):
  1227	    db = connecttrade()
  1228	    pwq = db.cursor()
  1229	    pwq.execute('select count(trade_id) from trade where accepted!=%s and trade_t0=%s or trade_fr0m=%s and accepted!=%s', ('finished',vendor,vendor,'finished'))
  1230	    amountoftrades = pwq.fetchone()
  1231	    db.close()
  1232	    abc = int(amountoftrades[0])
  1233	    return abc
  1234	
  1235	#admins coinz total amount
  1236	def amount_btc():
  1237	    db = connectcoinz()
  1238	    mm = db.cursor()
  1239	    mm.execute('select address from coinz')
  1240	    total = 0
  1241	    for line in mm.fetchall():
  1242	#sprint line[0]
  1243	#sprint len(line[0])
  1244		if len(line[0]) == 34:
  1245		    a = float(check_b3(line[0]))
  1246		   #sprint a
  1247		    total = total + a
  1248		else:
  1249		    pass
  1250	    return total
  1251	
  1252	
  1253	#@wl.route('/2admin24', methods=['POST', 'GET'])
  1254	#@noindex
  1255	#@axss
  1256	#@af
  1257	#@adate
  1258	#def mother_goose():
  1259	    #db = connectmycoinz()
  1260	    #ds = db.cursor()
  1261	    #ds.execute('select count(address) from mycoinz')
  1262	    #myc = ds.fetchone()[0]
  1263	    #db.close()    
  1264	    #if flask.request.method == 'POST':
  1265		#db = connectmycoinz()
  1266		#lo,sd = db.cursor(),db.cursor()
  1267		#lo.execute('select address, pbk, pk from mycoinz')
  1268		#if flask.request.form.get('yupp') == 'yes':
  1269		    #sd.execute('delete from mycoinz')
  1270		    #db.commit()
  1271		    #print 'coinz deleted'
  1272		#alls = lo.fetchall()
  1273		#db.close()
  1274		#return flask.render_template('mgoose.html', myc=myc, alls=alls)
  1275	    #print myc
  1276	    #return flask.render_template('mgoose.html', myc=myc)
  1277	
  1278	
  1279	
  1280	aaas = '/dfghjkl'#hash today
  1281	#@wl.route(aaas)
  1282	#@wl.route('/2admin2', methods=['POST', 'GET'])
  1283	#@noindex
  1284	#@axss
  1285	#@af
  1286	#@adate
  1287	#def adminui2():
  1288	    #error = False
  1289	    ##if not flask.session.has_key("root"):
  1290		##return flask.redirect(flask.url_for('choice_mode'))      
  1291	    #if flask.request.method == 'POST':
  1292		#balance = flask.request.form.get('balance')
  1293		#nrole = flask.request.form.get('newRole')
  1294		#nick = flask.request.form['mnick']
  1295		#news = flask.request.form['news']
  1296		#if nick:
  1297		    #if nick == "censorednick":
  1298			#error = 'you cant edit an administrators'
  1299		    #else:
  1300			#db = connectvens()
  1301			#ew = db.cursor()
  1302			#ew.execute('update vens set role=%s where nick=%s', (nrole, nick))
  1303			#db.commit()
  1304			#error = str(nick) + ' has been update and role is set to: ' + str(nrole)
  1305			#db.close()
  1306		#if not news:
  1307		    #pass
  1308		#else:
  1309		    #db = connectnews()
  1310		    #ioo = db.cursor()
  1311		    #today = datetime.date.today()
  1312		    #ioo.execute('insert into news(datu, news) value(%s, %s)', (today, news))
  1313		    #db.commit()
  1314		    #error = 'news sent'
  1315		    #db.close()
  1316		#if not balance:
  1317		    #check = False 
  1318		    #k = False
  1319		    #usd = False
  1320		    #pass
  1321		
  1322		#else:
  1323		    
  1324		    #balance = str(balance)
  1325		    #k = check_b3(balance)
  1326		    #check = verify_payment(balance)
  1327		    #usd = searchingfor().convert_btc_to_usd(float(k))#b.convert_btc_to_cur(float(k), 'USD')
  1328		    #pass
  1329		
  1330		    
  1331		##asrr = balance
  1332		#addr = flask.request.form.get('addr')
  1333		#if addr:
  1334		    #addr = int(addr)
  1335		    #orbgentest(addr)
  1336		    #pass
  1337		#else:
  1338		    #pass
  1339		##sdp = db.cursor()
  1340		##sdp.execute('insert into coinz (address, usr) values (%s, %s)', (asrr, 'test'))
  1341		##db.commit()	
  1342		##lsss = db.cursor()
  1343		##lsss.execute('select address from coinz where address=%s', (balance,))
  1344		##balance = lsss.fetchone()
  1345		##balance = balance[0]
  1346	
  1347		##btc = balance#'18rdKmjrg1EawxgiVT3ikLExj6GWS2MNCk'
  1348		##resp = urllib.urlopen("http://blockchain.info/multiaddr?active=" + balance)
  1349		##b0 = grep(resp.read(),"final_balance")
  1350		##arra = b0.split(":")
  1351		##pr = arra[31]
  1352		##pr = str(pr)
  1353		##k = ''.join(x for x in pr if x.isdigit())
  1354		##k = int(k)
  1355		##bp = flask.request.form.get('changerole')
  1356		##balance = check_balance2(balance)
  1357		##balance = int(balance)
  1358		#db = connectsupport()#()
  1359		#luo = db.cursor()
  1360		#luo.execute('select COUNT(msg) from support where readd=%s', ('no',))
  1361		#nu = luo.fetchone()
  1362		##k = Decimal(k)/100000000
  1363		##balance = float(balance)
  1364		##usd = b.convert_to_btc(balance, 'USD')
  1365		##k = balance
  1366		#allcoinz = amount_btc()
  1367		#db.close()
  1368		#db = connectcoinz()
  1369		#trw = db.cursor()
  1370		#trw.execute('select count(*) from coinz where usr=%s', ('bot',))
  1371		#amountaddr = trw.fetchone()
  1372		#amountaddr = amountaddr[0]	
  1373		#usdall = btc_to_usd(allcoinz)
  1374		#return flask.render_template('admin2.html', error=error, usdall=usdall, allcoinz=allcoinz, amountaddr=amountaddr, check=check, balance=k, nu=nu[0], usd=usd)
  1375	
  1376	    #db = connectcoinz()
  1377	    #trw = db.cursor()
  1378	    #trw.execute('select count(*) from coinz where usr=%s', ('bot',))
  1379	    #amountaddr = trw.fetchone()
  1380	    #amountaddr = amountaddr[0]
  1381	    #db.close()
  1382	    #db = connectmycoinz()
  1383	    #ds = db.cursor()
  1384	    #ds.execute('select count(address) from mycoinz')
  1385	    #myc = ds.fetchone()[0]
  1386	    #db.close()
  1387	    #db = connectsupport()
  1388	    #luo = db.cursor()    
  1389	    #luo.execute('select COUNT(msg) from support where readd=%s', ('no',))
  1390	    #nu = luo.fetchone()    
  1391	    #db.close()
  1392	    #db = connectvens()
  1393	    #e = db.cursor() 
  1394	    #aewr = db.cursor() 
  1395	    #s = db.cursor() 
  1396	    #d = db.cursor() 
  1397	    #r = db.cursor()
  1398	    #r.execute('select nick from vens order by joined desc limit 1')
  1399	    #lmember = r.fetchone()[0]
  1400	    #aewr.execute('select COUNT(nick) from vens where role=%s', ('vendor',))
  1401	    #nvendors = aewr.fetchone()[0]
  1402	    #s.execute('select count(nick) from vens where role=%s', ('user',))
  1403	    #nusers = s.fetchone()[0]
  1404	    #d.execute('select count(nick) from vens where role=%s', ('specialuser',))
  1405	    #nadministrators = d.fetchone()[0]
  1406	    #e.execute('select count(nick) from vens')
  1407	    #tusers = e.fetchone()[0]
  1408	    #db.close()
  1409	
  1410	    #db = connectitems()
  1411	    #e = db.cursor()
  1412	    #e.execute('select count(item_id) from items')
  1413	    #nitems = e.fetchone()[0]
  1414	    #db.close()
  1415	
  1416	    #db = connecttrade()
  1417	    #e = db.cursor()
  1418	    #e.execute('select count(trade_id) from trade')
  1419	    #ntrades = e.fetchone()[0]
  1420	    #db.close()
  1421	
  1422	    #db = connectauctions()
  1423	    #e = db.cursor()
  1424	    #e.execute('select count(item_id) from auctions')
  1425	    #nauctions = e.fetchone()[0]
  1426	    #db.close()    
  1427	    
  1428	    #warninglog = open('warning.log', 'r').read()
  1429	    #infolog = open('info.log', 'r').read()
  1430	    #criticallog = open('critical.log', 'r').read()
  1431	    #errorlog = open('error.log', 'r').read()
  1432	    #notsetlog = open('notset.log', 'r').read()
  1433	    #debuglog = open('debug.log', 'r').read()
  1434	    
  1435	    #return flask.render_template('admin2.html', myc=myc, debuglog=debuglog, warninglog=warninglog, infolog=infolog, criticallog=criticallog, errorlog=errorlog, notsetlog=notsetlog, lmember=lmember, ntrades=ntrades, nauctions=nauctions, nitems=nitems, tusers=tusers, nusers=nusers, nvendors=nvendors, nadministrators=nadministrators, amountaddr=amountaddr, nu=nu[0])
  1436	
  1437	#change url 4 admin
  1438	
  1439	@wl.route('/admin')
  1440	@noindex
  1441	@axss
  1442	@af
  1443	@adate
  1444	def adminfakrone():
  1445	    return 'what is love? i srsly dont know anymore'
  1446	
  1447	#@wl.route('/admin')
  1448	@wl.route('/admin<page>')
  1449	@noindex
  1450	@axss
  1451	@af
  1452	@adate
  1453	def adminfakr(page):
  1454	    return 'what is love? i srsly dont know anymore'
  1455	
  1456	
  1457	#admin ui - nope
  1458	#@wl.route('/3admin')
  1459	#@noindex
  1460	#@axss
  1461	#@af
  1462	#@adate
  1463	#def adminui():
  1464	    ##if not flask.session.has_key("root"):
  1465		##return flask.redirect(flask.url_for('choice_mode'))      
  1466	    ##if flask.request.method == 'POST':
  1467		##balance = flask.request.form.get('balance')
  1468		##balance = check_balance(balance)
  1469		##return flask.render_template('admin.html', balance=balance)
  1470	    
  1471	    #return flask.render_template('admin.html')
  1472	
  1473	@wl.route('/config.php')
  1474	@noindex
  1475	@axss
  1476	@af
  1477	@adate
  1478	def conff():
  1479	    return '''
  1480	database = wl
  1481	user = root
  1482	password = ur2skills.should/be/focused52on23894something234else
  1483	table = stillreading? //hacker
  1484	    '''
  1485	
  1486	
  1487	
  1488	
  1489	
  1490	
  1491	
  1492	'''
  1493	
  1494	#ezines
  1495	#wl publishing: a underground plubshing platform from the science to the radical
  1496	@wl.route('/wlpublishing')
  1497	@noindex
  1498	@axss
  1499	@af
  1500	@adate
  1501	def wlpublish():
  1502	    if flask.session.has_key('special') and flask.session:
  1503		if not vertify_session(flask.session['special']):
  1504		    return flask.redirect(flask.url_for('choice_mode'))
  1505		pass
  1506	    else:
  1507		return flask.redirect(flask.url_for('choice_mode')) 
  1508	    #add star for sending to lentil
  1509	    return flask.render_template('publishing.html')
  1510	'''
  1511	
  1512	
  1513	
  1514	
  1515	
  1516	
  1517	
  1518	#pages in shop, pagenation
  1519	def get_pagination(**kwargs):
  1520	    kwargs.setdefault('record_name', 'records')
  1521	    return flask_paginate.Pagination(css_framework=get_css_framework(),
  1522	                      link_size=get_link_size(),
  1523	                      show_single_page=show_single_page_or_not(),
  1524	                      **kwargs
  1525	                      )
  1526	
  1527	def get_css_framework():
  1528	    return flask.current_app.config.get('CSS_FRAMEWORK', 'bootstrap3')
  1529	
  1530	def get_link_size():
  1531	    return flask.current_app.config.get('LINK_SIZE', 'sm')
  1532	
  1533	def show_single_page_or_not():
  1534	    return flask.current_app.config.get('SHOW_SINGLE_PAGE', False)
  1535	
  1536	
  1537	def get_page_args():
  1538	    args = flask.request.args.copy()
  1539	    args.update(flask.request.view_args.copy())
  1540	    page_parameter = args.get('page_parameter', 'page')
  1541	    page = int(args.get(page_parameter, 1))
  1542	    per_page = args.get('per_page')
  1543	    if not per_page:
  1544		per_page = flask.current_app.config.get('PER_PAGE', 15)
  1545	    else:
  1546		per_page = int(per_page)
  1547	
  1548	    offset = (page - 1) * per_page
  1549	    return page, per_page, offset
  1550	
  1551	
  1552	
  1553	@wl.route('/shop', defaults={'page': 1})
  1554	@wl.route('/shop/page/', defaults={'page': 1})
  1555	@wl.route('/shop/page/<int:page>')
  1556	@wl.route('/shop/page/<int:page>/')
  1557	@noindex
  1558	@axss
  1559	@adate
  1560	@af
  1561	def shoppage(page):
  1562	    if not flask.session.has_key("nick"):
  1563		return flask.redirect(flask.url_for('choice_mode'))
  1564	    if flask.session.has_key('special') and flask.session:
  1565		if not vertify_session(flask.session['special']):
  1566		    return flask.redirect(flask.url_for('choice_mode'))
  1567		pass
  1568	    else:
  1569		return flask.redirect(flask.url_for('choice_mode'))     
  1570	    db = connectitems()
  1571	    tset = db.cursor()
  1572	    tet = db.cursor()
  1573	    tset.execute('select count(item_id) from items where auction=%s and item_price and item_id!=%s', ('','nope'))
  1574	    total = tset.fetchone()[0]
  1575	    page, per_page, offset = get_page_args()
  1576	    sql = 'select item_name from items where not auction and item_id!="{}" and item_price order by item_name limit {}, {}'\
  1577		.format("nope", offset, per_page)    #mustdo and not item_price, newnew, d
  1578	    tet.execute(sql)
  1579	    entries2 = wl_entries_cache().give_me_entries()
  1580	    #entries2 = wl_entries_cache().give_me_entries()
  1581	    items = tet.fetchall()
  1582	    curl = db.cursor()
  1583	    #sql = ('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s order by item_id limit {}, {}', ('',))
  1584	   #item_piclink is not null
  1585	    curl.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s and item_price!=%s and item_id!=%s and item_piclink is not null order by item_id limit {}, {}'.format(offset, per_page), ('','', 'nope'))
  1586	    entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in curl.fetchall()]
  1587	  
  1588	    pagination = get_pagination(page=page, per_page=per_page, total=total, record_name='items', format_total=True, format_number=True)    
  1589	    db.close()
  1590	    db = connectnews()
  1591	    ge = db.cursor()
  1592	    ge.execute('select datu, news from news')
  1593	    entries3 = [dict(datu=row[0], news=row[1]) for row in ge.fetchall()]   
  1594	    db.close()
  1595	    db = connectvens()
  1596	    ee = db.cursor()
  1597	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1598	    ee.execute('select role from vens where nick=%s', (nick,))
  1599	    role = ee.fetchone()
  1600	    role = role[0]
  1601	    db.close()
  1602	#   #sprint 'page:',pagination.links
  1603	    return flask.render_template('shoppage.html', newsentries=wl_html_cache().get_news(), entries3=entries3, role=role, soo=searchingfor().latestbtcprice(), pricetable=searchingfor().getpt(), mess=getmsgs(), entries2=entries2, items=items, page=page, per_page=per_page, pagination=pagination, active_url='items-page-url', entries=entries)
  1604	    #db = connectitems()
  1605	    #tset = db.cursor()
  1606	    #tet = db.cursor()
  1607	    #tset.execute('select count(item_id) from items')
  1608	    #total = tset.fetchone()[0]
  1609	    #page, per_page, offset = get_page_args()
  1610	    #sql = 'select item_name from items order by item_name limit {}, {}'\
  1611		#.format(offset, per_page)    
  1612	    #tet.execute(sql)
  1613	    #print 'offset'
  1614	    #print offset
  1615	    #print per_page
  1616	    #entries2 = wl_entries_cache().give_me_entries()
  1617	    ##entries2 = wl_entries_cache().give_me_entries()
  1618	    #items = tet.fetchall()
  1619	    #curl = db.cursor()
  1620	    ##sql = ('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s order by item_id limit {}, {}', ('',))
  1621	   ##item_piclink is not null
  1622	    #curl.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s and item_piclink is not null order by item_id limit {}, {}'.format(offset, per_page), ('',))
  1623	    ##curl.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where not auction and item_piclink is not null order by item_id limit {}, {}'.format(offset, per_page))
  1624	    #entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in curl.fetchall()]
  1625	  
  1626	    #pagination = get_pagination(page=page, per_page=per_page, total=total, record_name='items', format_total=True, format_number=True)    
  1627	    #db.close()
  1628	    #db = connectnews()
  1629	    #ge = db.cursor()
  1630	    #ge.execute('select datu, news from news')
  1631	    #entries3 = [dict(datu=row[0], news=row[1]) for row in ge.fetchall()]   
  1632	    #db.close()
  1633	    #db = connectvens()
  1634	    #ee = db.cursor()
  1635	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1636	    #ee.execute('select role from vens where nick=%s', (nick,))
  1637	    #role = ee.fetchone()
  1638	    #role = role[0]
  1639	    #db.close()
  1640	    #return flask.render_template('shoppage.html', newsentries=wl_html_cache().get_news(), entries3=entries3, role=role, soo=searchingfor().latestbtcprice(), pricetable=searchingfor().getpt(), mess=getmsgs(), entries2=entries2, items=items, page=page, per_page=per_page, pagination=pagination, active_url='users-page-url', entries=entries)
  1641	
  1642	#og shop
  1643	#@wl.route('/shop')
  1644	#@noindex
  1645	#@axss
  1646	#@adate
  1647	#@af
  1648	#def lashop():
  1649	    #if not flask.session.has_key('nick'):
  1650	        #return flask.redirect(flask.url_for('choice_mode'))
  1651	    
  1652	    
  1653	    #if flask.session.has_key('special') and flask.session:
  1654		#if not vertify_session(flask.session['special']):
  1655		    #return flask.redirect(flask.url_for('choice_mode'))
  1656		#pass
  1657	    #else:
  1658		#return flask.redirect(flask.url_for('choice_mode'))     
  1659	    ##price = session.get('https://coinbase.com/api/v1/prices/buy').json()['total']['amount']
  1660	    ##price = int(float(price))
  1661	    ##price = int(markup * price)
  1662	    #db = connectitems()
  1663	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1664	    #curl = db.cursor()
  1665	    ##luo = db.cursor()
  1666	    ##luo.execute('select COUNT(hread) from inbox where send=%s or sender=%s', (nick, nick))
  1667	  ###  mess = luo.fetchone()
  1668	  ##  mess = mess[0]
  1669	    #soo = searchingfor().latestbtcprice()#b.get_latest_price('USD')
  1670	    ##if not mess:
  1671		##mess = '0'	
  1672	    #entries2 = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto(), indica = getind(), sativa = getsat(), Hybrid = getHybrid(), Hash = getHash(), Cannabis = getthc(), Mdma = getmdma(), Benzos = getbenz(), Ecstasy = getext(), Cocaine = getcoce(), Meth = getmth(), amphetamine = getamp(), ritalin = getrtl(), Opiods = getopi(), Steroids = getstd(), Perscription = getpts(), Stimulations = getsdd(), Psychedelics = getphsy(), WeightLoss = getwel(), Others = getoth())]
  1673	    #mess = getmsgs()
  1674	    #curl.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s and item_piclink is not null order by item_id', ('',))
  1675	    #kl = db.cursor()
  1676	   ## kl.execute('')
  1677	    #entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in curl.fetchall()]
  1678	    #pricetable = searchingfor().getpt()#getpt()
  1679	    ##nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1680	    ##ee = db.cursor()
  1681	    ##ee.execute('select role from vens where nick=%s', (nick,))
  1682	    ##role = ee.fetchone()
  1683	    ##role = role[0]    
  1684	    #db.close()
  1685	
  1686	    #return flask.render_template('shop.html', newsentries=wl_html_cache().get_news(), entries2=entries2, pricetable=pricetable, soo=soo, entries=entries, mess=mess)
  1687	
  1688	
  1689	
  1690	@wl.route('/home')
  1691	@noindex
  1692	@axss
  1693	@adate
  1694	@af
  1695	def home():
  1696	    if not flask.session:
  1697		return flask.redirect(flask.url_for('choice_mode'))
  1698	    if not flask.session.has_key('special') and flask.session:    
  1699		return flask.redirect(flask.url_for('choice_mode'))
  1700	    
  1701	    if flask.session.has_key('special') and flask.session:
  1702		if not vertify_session(flask.session['special']):
  1703		    return flask.redirect(flask.url_for('choice_mode'))
  1704		pass
  1705	    else:
  1706		return flask.redirect(flask.url_for('choice_mode')) 
  1707	    if flask.session.has_key('special') and flask.session:    
  1708		return flask.redirect(flask.url_for(str(decode_session(flask.session['special'])[1])))
  1709	    
  1710	    #elif flask.session.has_key('role') and flask.session:
  1711	    
  1712		    #return flask.redirect(flask.url_for(str(flask.session['role'])))
  1713	
  1714	
  1715	#for url redir 
  1716	#http://anonymz.com/ - f that useing /redir/
  1717	
  1718	@wl.route('/faq')
  1719	@noindex
  1720	@axss
  1721	@adate
  1722	@af
  1723	def faq():
  1724	    if not flask.session:
  1725		return flask.redirect(flask.url_for('choice_mode'))
  1726	    
  1727	    
  1728	    if flask.session.has_key('special') and flask.session:
  1729		if not vertify_session(flask.session['special']):
  1730		    return flask.redirect(flask.url_for('choice_mode'))
  1731		pass
  1732	    else:
  1733		return flask.redirect(flask.url_for('choice_mode')) 
  1734	
  1735	
  1736	
  1737	    #db = connect()
  1738	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1739	    #ee = db.cursor()
  1740	    #ee.execute('select role from vens where nick=%s', (nick,))
  1741	    #role = ee.fetchone()
  1742	    #role = role[0]    
  1743	    #
  1744	    #if wl_html_cache().check_cache():
  1745		#mincache["t_faq"] = flask.render_template('faq.html')
  1746		#print 'updateing cache'
  1747	    #else:
  1748		#print 'cache is staying the same'
  1749		#pass
  1750	    ##print mincache["t_gateway"]
  1751	    #return mincache["t_faq"]    
  1752	    #return wl_html_cache().return_page('faq', role=role)
  1753	    #return flask.render_template('faq.html', role=role)
  1754	    meh = flask.render_template
  1755	    return wl_html_cache().return_page('faq', flask.render_template)#code golf
  1756	
  1757	#todo tod
  1758	#@wl.route('/stats')
  1759	#@noindex
  1760	#@axss
  1761	#@adate
  1762	#@af
  1763	#def stats():
  1764	    ##if flask.session.has_key('special') and flask.session:
  1765		##if not vertify_session(flask.session['special']):
  1766		    ##return flask.redirect(flask.url_for('choice_mode'))
  1767		##pass
  1768	    ##else:
  1769		##return flask.redirect(flask.url_for('choice_mode')) 
  1770	    #return '''
  1771	    
  1772	#number of donations to 
  1773	#number of users:    
  1774	    
  1775	    #'''
  1776	
  1777	
  1778	
  1779	#verify each input against a whitelist
  1780	
  1781	#protect
  1782	
  1783	
  1784	#@wl.route('/they_need_support', methods=['POST', 'GET'])
  1785	#@noindex
  1786	#@axss
  1787	#@adate
  1788	#@af
  1789	#def supportiscoming():
  1790	    #error = False
  1791	    #db = connectsupport()
  1792	    #luo = db.cursor()
  1793	    #luo.execute('select COUNT(msg) from support where readd=%s', ('no',))#
  1794	    ##amount unawnserd
  1795	    #nu = luo.fetchone()
  1796	    #lsd = db.cursor()#is it awnserd?
  1797	    #lsd.execute('select title, msg, respond, readd, token, awnserd, fr0m from support')
  1798	    #entries = [dict(title=row[0], msg=row[1], resp=row[2], read=row[3], token=row[4], awnserd=row[5], fr0m=row[6]) for row in lsd.fetchall()]
  1799	
  1800	    #if flask.request.method == 'POST':
  1801		#msg = flask.request.form.get('message')
  1802		#print len(msg)
  1803		#print msg
  1804		#xx = db.cursor()
  1805		#xx.execute('delete from support where token=%s', (msg,))
  1806		#db.commit()
  1807		#db.close()
  1808		#return flask.render_template('t_support.html', newsentries=wl_html_cache().get_news(), entries=entries, error='msg deleted')
  1809		
  1810	    #db.close()
  1811	    #return flask.render_template('t_support.html', newsentries=wl_html_cache().get_news(), entries=entries, nu=nu[0])
  1812	##
  1813	
  1814	'''
  1815	#lets - old func to redirect for low not used in production
  1816	@wl.route('/low_light')
  1817	@noindex
  1818	@axss
  1819	@adate
  1820	@af
  1821	def low_light():
  1822	    if flask.session.has_key('special') and flask.session:
  1823		if not vertify_session(flask.session['special']):
  1824		    return flask.redirect(flask.url_for('choice_mode'))
  1825		pass
  1826	    else:
  1827		return flask.redirect(flask.url_for('choice_mode'))     
  1828	    return flask.render_template('lowlight.html')
  1829	'''
  1830	
  1831	@wl.route('/user')
  1832	@noindex
  1833	@axss
  1834	@adate
  1835	@af
  1836	def user():
  1837	    if not flask.session.has_key("nick"):
  1838		return flask.redirect(flask.url_for('choice_mode')) 
  1839	    if flask.session.has_key('special') and flask.session:
  1840		if not vertify_session(flask.session['special']):
  1841		    return flask.redirect(flask.url_for('choice_mode'))
  1842		pass
  1843	    else:
  1844		return flask.redirect(flask.url_for('choice_mode')) 
  1845	    if flask.session.has_key('special'):
  1846		if not vertify_session(flask.session['special']):
  1847		    return flask.redirect(flask.url_for('choice_mode'))	
  1848		elif decode_session(flask.session['special'])[1] == 'vendor':
  1849		    return flask.redirect(flask.url_for('choice_mode'))
  1850		elif decode_session(flask.session['special'])[1] == 'user':
  1851		    entries2 = wl_entries_cache().give_me_entries()
  1852		    mess = getmsgs()
  1853		    db = connecttrade()
  1854		    #soo = b.get_latest_price('USD')
  1855		    #pricetable = getpt()
  1856		    
  1857		    pe = db.cursor() 
  1858		    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1859		    tradeam = trade_amount(nick)
  1860		    pe.execute('select count(trade_name) from trade where trade_t0=%s', (nick,))
  1861		    trade = pe.fetchone()[0]	
  1862		    db.close()
  1863		    db = connectnews()
  1864		    ge = db.cursor()
  1865		    ge.execute('select datu, news from news')
  1866		    entries3 = [dict(datu=row[0], news=row[1]) for row in ge.fetchall()]	
  1867		    db.close()
  1868		    return flask.render_template('userhome.html', moneroprice=searchingfor().latestmoneroprice(), tradeam=tradeam, newsentries=wl_html_cache().get_news(), trade=trade, entries3=entries3, mess=mess, entries2=entries2, emnick = decode_session(flask.session["special"])[0]) #flask.escape(flask.session['nick']),)
  1869		else:
  1870		    return flask.redirect(flask.url_for('choice_mode'))
  1871	    else:
  1872		pass
  1873	    
  1874	   # elif flask.session.has_key('role') and flask.session['role'] == 'user':
  1875	
  1876	    #if flask.session.has_key('special'):
  1877		#if decode_session(flask.session['special'])[1] == 'user':
  1878		    #entries2 = wl_entries_cache().give_me_entries()
  1879		    #mess = getmsgs()
  1880		    #db = connecttrade()
  1881		    ##soo = b.get_latest_price('USD')
  1882		    ##pricetable = getpt()
  1883		    
  1884		    #pe = db.cursor() 
  1885		    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1886		    
  1887		    #pe.execute('select count(trade_name) from trade where trade_t0=%s', (nick,))
  1888		    #trade = pe.fetchone()[0]	
  1889		    #db.close()
  1890		    #db = connectnews()
  1891		    #ge = db.cursor()
  1892		    #ge.execute('select datu, news from news')
  1893		    #entries3 = [dict(datu=row[0], news=row[1]) for row in ge.fetchall()]	
  1894		    #db.close()
  1895		    #return flask.render_template('userhome.html', newsentries=wl_html_cache().get_news(), trade=trade, entries3=entries3, mess=mess, entries2=entries2, emnick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick']),)
  1896	
  1897	##    else:
  1898	#if not decode_session(flask.session['special'])[1] == 'user':
  1899		    #return flask.redirect(flask.url_for('choice_mode'))
  1900	    #if user is banned == role = banned
  1901	
  1902	#stats add, successfully cleaned x amount of pictures of meta tags
  1903	
  1904	@wl.route('/banlist')
  1905	@noindex
  1906	@axss
  1907	@adate
  1908	@af
  1909	def banlist():# todo i guess - to implement-
  1910	    #db = connect()
  1911	    #curl = db.cursor()
  1912	    #curl.execute('select nick from vens where role=%s', ('banned',))
  1913	    ##ee = db.cursor()
  1914	    ##ee.execute('select role from vens where nick=%s', (nick,))
  1915	    ##role = ee.fetchone()
  1916	    #entries = 'curl.fetchone()[0]'   
  1917	    #if wl_html_cache().check_cache():
  1918		#mincache["t_banlist"] = flask.render_template('banlist.html', entries=entries)
  1919		#print 'updateing cache'
  1920	    #else:
  1921		#print 'cache is staying the same'
  1922		#pass
  1923	    ##print mincache["t_gateway"]
  1924	    meh = flask.render_template
  1925	    return flask.redirect('/', code=301)#wl_html_cache().return_page("banlist", meh)    #todo?
  1926	    #return flask.render_template('banlist.html', role=role, entries=entries)
  1927	
  1928	@wl.route('/member/<memnick>')
  1929	@noindex
  1930	@axss
  1931	@adate
  1932	@af
  1933	def members(memnick):
  1934	    if not flask.session.has_key("nick"):
  1935		return flask.redirect(flask.url_for('choice_mode'))  
  1936	    if flask.session.has_key('special') and flask.session:
  1937		if not vertify_session(flask.session['special']):
  1938		    return flask.redirect(flask.url_for('choice_mode'))
  1939		pass
  1940	    else:
  1941		return flask.redirect(flask.url_for('choice_mode')) 
  1942	    db = connectvens()
  1943	    curr = db.cursor()
  1944	    nick = memnick
  1945	    ee = db.cursor()
  1946	    cur,er  = ee,ee
  1947	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  1948	    er.execute('select role from vens where nick=%s', (nick,))
  1949	    if not er.fetchone():
  1950		db.close()
  1951		return flask.render_template('member.html', error='no member with that nickname')
  1952	    ee.execute('select role from vens where nick=%s', (nick,))
  1953	    role = ee.fetchone()
  1954	    role = role[0]   
  1955	    entries2 = wl_entries_cache().give_me_entries()
  1956	    
  1957	    curr.execute('select about_me, amountitemsbought, joined, role, nick from vens where nick=%s', (memnick,))#, 'vendor'))
  1958	    entries = [dict(des=row[0], amount=row[1], joined=str(row[2])[:7], role=row[3], nick=row[4]) for row in curr.fetchall()]
  1959	    cur.execute('select avatar_pic from vens where nick=%s', (memnick,))#, 'vendor'))
  1960	    avatar_pic = cur.fetchone()    
  1961	    if not avatar_pic:#len(avatar_pic) == 0:
  1962		avatar_pic = 'default.png'
  1963	    else:
  1964		if len(avatar_pic) == 0:
  1965		    avatar_pic = 'default.png'
  1966		else:
  1967		    avatar_pic = avatar_pic[0]    
  1968	    if len(avatar_pic) == 0:
  1969		avatar_pic = 'default.png'
  1970	   #sprint 'avatar pic is ' + str(len(avatar_pic))
  1971	    db.close()
  1972	    return flask.render_template('member.html', pgp=export_member_key(memnick), newsentries=wl_html_cache().get_news(), entries2=entries2, emnick=nick, mess=getmsgs(), avatar_pic=avatar_pic, role=role, entries=entries, nick=nick, pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice())# soo = b.get_latest_price('USD'))
  1973	
  1974	
  1975	@wl.route('/vendors/<vennick>/items/')
  1976	@noindex
  1977	@axss
  1978	@adate
  1979	@af
  1980	def vitem(vennick):
  1981	    if not flask.session.has_key("nick"):
  1982		return flask.redirect(flask.url_for('choice_mode')) 
  1983	    if flask.session.has_key('special') and flask.session:
  1984		if not vertify_session(flask.session['special']):
  1985		    return flask.redirect(flask.url_for('choice_mode'))
  1986		pass
  1987	    else:
  1988		return flask.redirect(flask.url_for('choice_mode'))    
  1989	 
  1990	 
  1991	    db = connectitems()
  1992	    db2 = connectvens()
  1993	    ccss = db.cursor()   
  1994	    nick = vennick
  1995	    pricetable = searchingfor().getpt()#getpt()
  1996	    mess = getmsgs()    
  1997	    entries2 = wl_entries_cache().give_me_entries()
  1998	    
  1999	    ee = db2.cursor()
  2000	    curr = ee
  2001	   # nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2002	    ee.execute('select role from vens where nick=%s', (vennick,))
  2003	    role = ee.fetchone()
  2004	    if not role:
  2005		error = 'no vendor with that name'
  2006		return flask.render_template('v_items.html', newsentries=wl_html_cache().get_news(), error=error,soo=searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, nick='No Vendor with that name so this is noone', entries2=entries2)
  2007	
  2008	    curr.execute('select avatar_pic from vens where nick=%s', (vennick,))#, 'vendor'))
  2009	    avatar_pic = curr.fetchone()#[0]
  2010	    if not avatar_pic:#len(avatar_pic) == 0:
  2011		avatar_pic = 'default.png'
  2012	    else:
  2013		avatar_pic = avatar_pic[0]    
  2014	    role = role[0]    
  2015	    soo = searchingfor().latestbtcprice()
  2016	    ccss.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_time, item_piclink from items where item_vendor=%s order by item_time', (vennick,))
  2017	    entries = [dict(iid=row[0], i_name=row[1], des=row[2], star=row[3], price=row[4], ven=row[5], time=row[6], i_piclink=row[7]) for row in ccss.fetchall()]
  2018	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2019	    db.close()
  2020	    db2.close()
  2021	    return flask.render_template('v_items.html', newsentries=wl_html_cache().get_news(), emnick=nick, soo=soo, role=role, mess=mess, pricetable=pricetable, avatar_pic=avatar_pic, entries=entries, pgp=export_member_key(nick), entries2=entries2, nick=vennick)
  2022	
  2023	#todo
  2024	#implement this when auction has finished, make it easy to use from vendor panel
  2025	#make ur own competion and use warezloaders escrow service for a secure money 
  2026	#escrow service
  2027	@wl.route('/escrow/services/<eid>')
  2028	@noindex
  2029	@axss
  2030	@adate
  2031	@af
  2032	def escrowservice():
  2033	    if not flask.session.has_key("nick"):
  2034		return flask.redirect(flask.url_for('choice_mode')) 
  2035	    if flask.session.has_key('special') and flask.session:
  2036		if not vertify_session(flask.session['special']):
  2037		    return flask.redirect(flask.url_for('choice_mode'))
  2038		pass
  2039	    else:
  2040		return flask.redirect(flask.url_for('choice_mode'))     
  2041	    db = connectitems()
  2042	    ee = db.cursor()
  2043	    ee.execute('select role from vens where nick=%s', (nick,))
  2044	    role = ee.fetchone()
  2045	    role = role[0] 
  2046	    db.close()
  2047	    return flask.render_template('es.html', newsentries=wl_html_cache().get_news(), role=role)
  2048	
  2049	
  2050	@wl.route('/static/vendors_pics/')
  2051	@noindex
  2052	@axss
  2053	@adate
  2054	@af
  2055	def bogusmap():
  2056	    if flask.session.has_key('special') and flask.session:
  2057		if not vertify_session(flask.session['special']):
  2058		    return flask.redirect(flask.url_for('choice_mode'))
  2059		pass
  2060	    else:
  2061		return flask.redirect(flask.url_for('choice_mode'))     
  2062	    return '''
  2063	index.php page, we need to change this //
  2064	    '''
  2065	
  2066	
  2067	#rateing joined items
  2068	@wl.route('/vendors/<vennick>')
  2069	@noindex
  2070	@axss
  2071	@adate
  2072	@af
  2073	def vendors(vennick):
  2074	    if not flask.session.has_key("nick"):
  2075		return flask.redirect(flask.url_for('choice_mode'))    
  2076	    if flask.session.has_key('special') and flask.session:
  2077		if not vertify_session(flask.session['special']):
  2078		    return flask.redirect(flask.url_for('choice_mode'))
  2079		pass
  2080	    else:
  2081		return flask.redirect(flask.url_for('choice_mode'))     
  2082	#add cleanshit    
  2083	    monero = False
  2084	    db = connectvens()
  2085	    curl = db.cursor()
  2086	    pricetable = searchingfor().getpt()#getpt()
  2087	    mess = getmsgs()    
  2088	    #nick = vennick
  2089	    ee = db.cursor()
  2090	    curr = db.cursor()
  2091	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2092	    ee.execute('select role from vens where nick=%s', (nick,))
  2093	    role = ee.fetchone()
  2094	    role = role[0]    
  2095	    cusr = db.cursor()
  2096	    entries2 = wl_entries_cache().give_me_entries()
  2097	
  2098	    cusr.execute('select role from vens where nick=%s and role=%s', (vennick, 'vendor'))#, 'vendor'))
  2099	    if not cusr.fetchone():
  2100		error = 'No vendor with that Name'
  2101		return flask.render_template('vendors.html', monero=monero, newsentries=wl_html_cache().get_news(), error=error, soo=searchingfor().latestbtcprice(), role=role, mess=mess, pricetable=pricetable, entries2=entries2, nick=vennick)
  2102		
  2103		#return 'no'
  2104	    curr.execute('select avatar_pic from vens where nick=%s and role=%s', (vennick, 'vendor'))#, 'vendor'))
  2105	    avatar_pic = curr.fetchone() 
  2106	    if does_vendor_accept_monero(vennick):
  2107		monero = True
  2108	    if not avatar_pic:#len(avatar_pic) == 0:
  2109		avatar_pic = 'default.png'
  2110	    else:
  2111		if len(avatar_pic[0]) == 0:
  2112		    avatar_pic = 'default.png'
  2113		avatar_pic = avatar_pic#[0]
  2114		if len(avatar_pic) == 0:
  2115		    avatar_pic = 'default.png'	
  2116	    logging.debug('avatar pic is')
  2117	    logging.debug(str(avatar_pic))
  2118	    if len(avatar_pic) == 1:
  2119		avatar_pic = avatar_pic[0]
  2120	    # 
  2121	    #get regular shit
  2122	    entries2 = wl_entries_cache().give_me_entries()
  2123	    curl.execute('select about_me, amountitems, joined from vens where nick=%s and role=%s', (vennick, 'vendor'))
  2124	    entries = [dict(des=row[0], amount=row[1], joined=str(row[2])[:7]) for row in curl.fetchall()]
  2125	    db.close()
  2126	    return flask.render_template('vendors.html', amsold=get_am_sold(vennick), monero=monero, newsentries=wl_html_cache().get_news(), avatar_pic=avatar_pic, emnick=nick, soo=searchingfor().latestbtcprice(), role=role, mess=mess, pricetable=pricetable, entries=entries, entries2=entries2, nick=vennick, pgp=export_member_key(vennick))
  2127	
  2128	#convert from usd to btc
  2129	#b.convert_to_btc(400, 'USD')
  2130	#amount, 'USD' then save that in mysql db in column 
  2131	
  2132	
  2133	@wl.route('/order/<order_id>', methods=['GET', 'POST'])
  2134	@noindex
  2135	@axss
  2136	@adate
  2137	@af
  2138	def order(order_id):
  2139	    if flask.session.has_key('special') and flask.session:
  2140		if not vertify_session(flask.session['special']):
  2141		    return flask.redirect(flask.url_for('choice_mode'))
  2142		pass
  2143	    else:
  2144		return flask.redirect(flask.url_for('choice_mode'))     
  2145	    error = False
  2146	    #add condom    
  2147	    #verify that order_id is legit in both get n post
  2148	    if flask.request.method == 'POST':
  2149		if flask.session.has_key('special') and flask.session:
  2150		    if not vertify_session(flask.session['special']):
  2151			return flask.redirect(flask.url_for('choice_mode'))
  2152		    pass
  2153		else:
  2154			return flask.redirect(flask.url_for('choice_mode'))	
  2155		db = connectorders()	
  2156		ss = db.cursor()
  2157		sa = db.cursor()	
  2158		aa = db.cursor()	
  2159		fso,throne = db.cursor(),db.cursor()
  2160		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2161		#if order is finished ask usr to review it
  2162		if flask.request.form.get('received') == 'yes':
  2163		    fso.execute('update orders set recieved=%s where order_name=%s and order_buyer=%s', ('yes', order_id, nick))
  2164		    db.commit()
  2165		    error = 'Order Recieved!'
  2166		if flask.request.form.get('received') == 'no':
  2167		    fso.execute('update orders set recieved=%s where order_name=%s and order_buyer=%s', ('no', order_id, nick))
  2168		    db.commit()
  2169		    error = 'Order not Recieved!'
  2170		if flask.request.form.get('message'):
  2171		    msg = flask.request.form.get('message')
  2172		    saw = db.cursor()
  2173		    saw.execute('select vendor from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2174		    vendor = saw.fetchone()[0]
  2175		    title = 'Message Regarding order from: ' + nick
  2176		    senduser2(vendor, nick, msg, title)
  2177		    error += ' message sent!'
  2178		if flask.request.form.get('ship'):
  2179		    shipto = flask.request.form.get('ship')
  2180		    dsa = db.cursor()
  2181		    dsa.execute('update orders set shippingdetails=%s where order_name=%s and order_buyer=%s', (shipto, order_id, nick))
  2182		    db.commit()
  2183		    error += ' Shipping Details updated!'
  2184		if flask.request.form.get('finished') == 'yes':
  2185		    ss.execute('select vendor from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2186		    sa.execute('select order_amount from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2187		    aa.execute('select item_id from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2188		    ab,cd,ef = ss.fetchone(),sa.fetchone(),aa.fetchone()
  2189		    insom = db.cursor()
  2190		    insom.execute('select cointype from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2191		    cointype = insom.fetchone()
  2192		    if not cointype or len(cointype) == 0:
  2193			cointype = 'bitcoin'
  2194		    else:
  2195			cointype = cointype[0]
  2196		    #print 'abc saga'
  2197		    #print(ab,cd,ef)
  2198		    machine = 'an order have just been finished by buyer: {} the item was: /itemz/{}'.format(nick ,ef[0])
  2199		    if not check_free(ab[0]):
  2200			senduser2(ab[0], 'warezloaders-bot', machine, 'New Payment')
  2201		  
  2202		    mcode = finishorder(ab[0], nick, cd[0], ef[0], order_id, cointype)
  2203		    link = mcode
  2204		    db.close()
  2205		    return flask.redirect(mcode, code=302)
  2206		    #return ''''
  2207		    #<html>
  2208		    
  2209		    #<h1>Herro link is {}</h1>
  2210		    
  2211		    #</html>
  2212		    
  2213		    #'''.format(str(link))
  2214	
  2215		db = connectorders()
  2216		db2 = connectitems()
  2217		tre = db2.cursor()
  2218		tree = db.cursor()
  2219	
  2220		pw = db.cursor()
  2221		pw.execute('select item_id from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2222		itemid = pw.fetchone()[0]	
  2223		tre.execute('select item_des, item_price, item_piclink, item_vendor, amount_in_stock, item_name from items where item_id=%s', (itemid,))
  2224		
  2225		entries3 = [dict(des=row[0], price=row[1], piclink=row[2], vendor=row[3], amount=row[4], title=row[5]) for row in tre.fetchall()]
  2226		tree.execute('select recieved from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2227		rec = tree.fetchone()[0]
  2228		rew = db.cursor()
  2229		rew.execute('select order_amount, order_name, order_buyer, order_payed, vendor, title, status, btcprice, order_shipped, shippingdetails from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2230		entries = [dict(amount=row[0], name=row[1], buyer=row[2], payed=row[3], vendor=row[4], title=row[4], status=row[5], btcprice=row[6], shipped=row[7], shipdet=row[8]) for row in rew.fetchall()]
  2231		
  2232		db.close()
  2233		db2.close()	
  2234		entries2 = wl_entries_cache().give_me_entries()
  2235		
  2236		return flask.render_template('order.html', newsentries=wl_html_cache().get_news(), entries=entries, rec=rec, error=error, entries2=entries2, entries3=entries3, pricetable=searchingfor().getpt(), mess=getmsgs(), soo=searchingfor().latestbtcprice())
  2237	    #money is put in escrow
  2238	    
  2239	    #bogus -> index.html
  2240	    
  2241	    #remove coinorder when order is finished and mark order as done
  2242	    
  2243	    #add vendor has sold +1
  2244	    db = connectorders()
  2245	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
  2246	    tre = db.cursor()
  2247	    ims = tre
  2248	    pw = tre
  2249	    ims.execute('select order_amount from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2250	    if not ims.fetchone():
  2251		return flask.redirect('/shop')
  2252	    else:
  2253		pass
  2254	    rew = db.cursor()
  2255	    rew.execute('select order_amount, order_name, order_buyer, order_payed, vendor, title, status, btcprice, order_shipped, shippingdetails from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2256	    entries = [dict(amount=row[0], name=row[1], buyer=row[2], payed=row[3], vendor=row[4], title=row[4], status=row[5], btcprice=row[6], shipped=row[7], shipdet=row[8]) for row in rew.fetchall()]
  2257	    rewa = tre
  2258	    rewas = db.cursor()
  2259	    rewa.execute('select order_shipped from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2260	    ordship = rewa.fetchone()[0]
  2261	    rewas.execute('select shippingdetails from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2262	    orddet = rewas.fetchone()[0]
  2263	    if len(str(orddet)) > 2:
  2264		sd = 'yes'
  2265	    else:
  2266		sd = 'no'
  2267	    pw.execute('select item_id from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2268	    itemid = pw.fetchone()[0]
  2269	    tre = connectitems().cursor()
  2270	    tre.execute('select item_des, item_price, item_piclink, item_vendor, amount_in_stock, item_name from items where item_id=%s', (itemid,))
  2271	    entries3 = [dict(des=row[0], price=row[1], piclink=row[2], vendor=row[3], amount=row[4], title=row[5]) for row in tre.fetchall()]
  2272	    
  2273	    #tre.execute('select amountitems from vens where vendor=%s', ('vendor',))# change
  2274	    am = tre.fetchone()
  2275	    if not am:
  2276		am = 0
  2277	    else:
  2278		pass
  2279	    amountitems = int(am) + 1
  2280	    tree = db.cursor()
  2281	    entries2 = wl_entries_cache().give_me_entries()
  2282		    
  2283	    tree.execute('select recieved from orders where order_name=%s and order_buyer=%s', (order_id, nick))
  2284	    rec = tree.fetchone()[0]    
  2285	    #tre.execute('insert into value()')
  2286	    db.close()
  2287	    return flask.render_template('order.html', newsentries=wl_html_cache().get_news(), sd=sd, orddet=orddet, ordship=ordship, rec=rec, entries=entries, entries3=entries3, mess=getmsgs(), pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice(), entries2=entries2)
  2288	#item_btcaddr
  2289	
  2290	#check the input data
  2291	def shit_cleaner(token):
  2292	    token = str(token)
  2293	    unvalid_commands = ['and', 'or', 'while', '%', 'or 1=1', 'sleep']
  2294	    #unvalid_commands = ['%', 'or 1=1']
  2295	    for line in unvalid_commands:
  2296		if line.upper() in token.upper():
  2297		    return True
  2298	    #if 'or 1=1' in token:
  2299		#return True
  2300	    #elif ' or' in token:
  2301		#return True
  2302	    #else:
  2303		#return False
  2304	
  2305	#cache flask return stuff
  2306	
  2307	@wl.route('/rateitem/<ratetoken>', methods=['GET', 'POST'])
  2308	@noindex
  2309	@axss
  2310	@adate
  2311	@af
  2312	def rateitem(ratetoken):
  2313	    error = False
  2314	    #unvalid_commands = ['or ']    #todo
  2315	    #for line in unvalid_commands:
  2316		#if line.upper() in token.upper():
  2317		    #return flask.redirect('/', code=302)
  2318	
  2319	    if flask.session.has_key('special') and flask.session:
  2320		if not vertify_session(flask.session['special']):
  2321		    return flask.redirect(flask.url_for('choice_mode'))
  2322		pass
  2323	    else:
  2324		return flask.redirect(flask.url_for('choice_mode'))     
  2325	
  2326	   #sprint 'rateitem called!'
  2327	
  2328	    if flask.request.method == 'POST':
  2329		if flask.session.has_key('special') and flask.session:
  2330		    if not vertify_session(flask.session['special']):
  2331			return flask.redirect(flask.url_for('choice_mode'))
  2332		    pass
  2333		else:
  2334			return flask.redirect(flask.url_for('choice_mode'))	
  2335	
  2336		#if shit_cleaner(ratetoken):#clean the token
  2337		    #return flask.redirect('/', code=302)
  2338		    
  2339		if flask.session.has_key('special') and flask.session:
  2340		    if not vertify_session(flask.session['special']):
  2341			return flask.redirect(flask.url_for('choice_mode'))
  2342		    pass
  2343		else:
  2344		    return flask.redirect(flask.url_for('choice_mode'))     
  2345		
  2346		db = connectorders()
  2347		db2 = connectitems()
  2348		db3 = connectvens()
  2349		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2350		ewsw = db.cursor()
  2351		ewwws = db2.cursor()
  2352		ewsw.execute('select rate_token from orders where rate_token=%s and order_buyer=%s', (ratetoken, nick)) 
  2353		s = ewsw.fetchone()
  2354		if not s:#[0]:	
  2355		    return flask.redirect('/', code=302)	
  2356		else:
  2357		    if ratetoken == s[0]:
  2358			pass
  2359		    else:
  2360			return flask.redirect('/', code=302)	
  2361		error = ''
  2362		ew = db.cursor()    
  2363		entries2 = wl_entries_cache().give_me_entries()
  2364		ewsw = db.cursor()  
  2365		ewss = db2.cursor()    
  2366		ewsw.execute('select item_id from orders where rate_token=%s and order_buyer=%s', (ratetoken, nick))  
  2367		#ewss.execute('select item_vendor where item_id=%s')
  2368		vendor = ewsw.fetchone()[0]#hack	
  2369		irate = flask.request.form.get('itemrate')
  2370		ewwws.execute('insert into items(item_nick, item_star) values(%s, %s)', (vendor, irate))
  2371		vrate = flask.request.form.get('Vendorrate')
  2372		#db2 = connectitems()
  2373		wqr = db3.cursor()
  2374		wqr.execute('insert into vens(ven_nick, ven_rate) values(%s, %s)', (vendor, vrate))	
  2375		db2.commit()
  2376		db.commit()
  2377		error = 'item rated!'
  2378		ew.execute('select rate_token from orders where rate_token=%s and order_buyer=%s', (ratetoken, nick))
  2379		w = ew.fetchone()
  2380		if not w:
  2381		    db.close()
  2382		    db2.close()
  2383		    db3.close()
  2384		    return flask.redirect('/', code=302)	
  2385		
  2386		else:
  2387		    eww = db.cursor()
  2388		    itemid = w[0]
  2389		    eww.execute('delete from orders where rate_token=%s and order_buyer=%s', (ratetoken, nick))
  2390		    db.commit()
  2391		    db.close()
  2392		    db2.close()
  2393		    db3.close()
  2394		    error = 'item rated!'
  2395		    return flask.render_template('shop.html', newsentries=wl_html_cache().get_news(), entries2=entries2, mess=getmsgs(), error=error, soo = searchingfor().latestbtcprice(), pricetable=searchingfor().getpt())
  2396	    
  2397	    
  2398	    #verify that member has 
  2399	    db = connectorders()
  2400	    ews = db.cursor()
  2401	    ewss = db.cursor()
  2402	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2403	    ews.execute('select rate_token from orders where rate_token=%s and order_buyer=%s', (ratetoken, nick)) 
  2404	    s = ews.fetchone()
  2405	   #sprint 'checking token'
  2406	    if not s:#[0]:	
  2407	#sprint 'not valid!'
  2408		return flask.redirect('/', code=302)	
  2409	    else:
  2410	#sprint 'token check2'
  2411		if ratetoken == s[0]:
  2412		   #sprint 'valid token!'
  2413		    pass
  2414		else:
  2415		   #sprint 'not a valid token :('
  2416		    return flask.redirect('/', code=302)
  2417	    ewss.execute('select vendor from orders where rate_token=%s and order_buyer=%s', (ratetoken, nick))  
  2418	    vendor = ewss.fetchone()[0]
  2419	
  2420	    s = False
  2421	    entries2 = wl_entries_cache().give_me_entries()
  2422	  
  2423	    #ew.execute('select rate_token from orders where buyer=%s and ')
  2424	    
  2425	    db.close()
  2426	    return flask.render_template('rate_item.html', newsentries=wl_html_cache().get_news(), entries2=entries2, mess=getmsgs(), error=error, soo = searchingfor().latestbtcprice(), pricetable=searchingfor().getpt())
  2427	
  2428	
  2429	
  2430	
  2431	
  2432	#sess
  2433	#signed mac?
  2434	#create table magci(
  2435	#mac text not null, 
  2436	#nick text not null, 
  2437	#iv text not null);
  2438	
  2439	
  2440	def genextra():
  2441	    g = b64encode(urandom(2)).replace('=', '')	#len() =  3
  2442	    return g
  2443	
  2444	def de_nick(session):
  2445	    return sess
  2446	
  2447	
  2448	def genmac(nick):#todo
  2449	    user = nick
  2450	    #insert into macs(nick, datuu, code) values(user, today, mi)
  2451	    mi = blake2b(data=data, digest_size=64, key=key, salt=key2).hexdigest()
  2452	    #db.close()
  2453	    return mi
  2454	
  2455	#get magic temporary code assoiated with nickname
  2456	
  2457	#def verifyhmac(mi):
  2458	    #db = connect()
  2459	    #fr = db.cursor()
  2460	    #fr.execute('select nick from macs where magic=%s', (mi,))	#mysql verify hmac
  2461	    #mi = fr.fetchone()
  2462	    #if mi:
  2463		#mi = mi[0]
  2464	    #else:
  2465		#mi = False
  2466	
  2467	    #return mi
  2468	
  2469	def a_de(key1, iv, data):
  2470	    decryptor = AES.new(key1, AES.MODE_CTR, counter=lambda: iv)
  2471	    decrypted = decryptor.decrypt(data)    
  2472	    return decrypted
  2473	
  2474	def a_cr(key, iv, data):
  2475	    acr = AES.new(key1, AES.MODE_CTR, counter=lambda: iv).encrypt(data)
  2476	    return acr
  2477	
  2478	
  2479	def s_en(nick):#sort shit n get it right ya know
  2480	    mac = genmac(nick)
  2481	    k = meh 
  2482	    a_cr()
  2483	    sess = b64encode(sess).replace('=', str(genextra())) #sess
  2484	    return sess
  2485	
  2486	
  2487	#to do fix this Trade
  2488	#we have private bitcoin nodes, we are readdy to support your bitcoin needs
  2489	#trade section of wl , trade source code etc..
  2490	@wl.route('/trade')
  2491	@noindex
  2492	@adate
  2493	@axss
  2494	@af
  2495	def trade():
  2496	    if not flask.session.has_key("nick"):
  2497		return flask.redirect(flask.url_for('choice_mode')) 
  2498	    if flask.session.has_key('special') and flask.session:
  2499		if not vertify_session(flask.session['special']):
  2500		    return flask.redirect(flask.url_for('choice_mode'))
  2501		pass
  2502	    else:
  2503		return flask.redirect(flask.url_for('choice_mode'))     
  2504	    db = connectvens()
  2505	    pricetable = searchingfor().getpt()
  2506	    mess = getmsgs()
  2507	    #soo = soo    
  2508	    ee = db.cursor()
  2509	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2510	    ee.execute('select role from vens where nick=%s', (nick,))
  2511	    role = ee.fetchone()
  2512	    role = role[0]
  2513	    db.close()
  2514	    entries2 = wl_entries_cache().give_me_entries()
  2515	    return flask.render_template('trade.html', newsentries=wl_html_cache().get_news(), role=role)
  2516	
  2517	@wl.route('/meh/meh') # beta
  2518	@noindex
  2519	@adate
  2520	@axss
  2521	@af
  2522	def mmm():
  2523	    if flask.session.has_key('special') and flask.session:
  2524		if not vertify_session(flask.session['special']):
  2525		    return flask.redirect(flask.url_for('choice_mode'))
  2526		pass
  2527	    else:
  2528		return flask.redirect(flask.url_for('choice_mode'))     
  2529	
  2530	
  2531	    meh = flask.render_template
  2532	    return wl_html_cache().return_page('gateway' ,meh)
  2533	
  2534	
  2535	#@wl.route('/sdaasdaaaaaa/<page>')
  2536	def get_page(page, funktion):
  2537	    typelist = {"gateway": "gateway.html",'newinfo':'new/info.html', 'newnews':'new/news.html',"signup": "signup.html", "toplist": "toplist.html", "info":"info.html", "get_started": "get_started.html", "additem": "additem.html", "vendor_info": "vendor_info.html", "addauctions": "addauctions.html", 'tgol': 'tgol.html', 'rss': 'rss.xml', 'news': 'news.html', "member": "member.html", "paste": "pastev.html", "support": "support.html", "about": "about.html", "tos": "tos.html", "awall": "awall.html", "banlist": "banlist.html", "faq": "faq.html", "invite": "invite.html", "settings": "settings.html", "item": "item.html", "inbox": "inbox.html", "inboxread": "inboxread.html", "writemsg": "writemsg.html", "create_trade": "create_trade.html"}
  2538	    if typelist.__contains__(page):
  2539		entries2 = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto(), indica = getind(), sativa = getsat(), Hybrid = getHybrid(), Hash = getHash(), Cannabis = getthc(), Mdma = getmdma(), Benzos = getbenz(), Ecstasy = getext(), Cocaine = getcoce(), Meth = getmth(), amphetamine = getamp(), ritalin = getrtl(), Opiods = getopi(), Steroids = getstd(), Perscription = getpts(), Stimulations = getsdd(), Psychedelics = getphsy(), WeightLoss = getwel(), Others = getoth())]  
  2540		
  2541		if page == 'banlist':
  2542		    db = connectvens()
  2543		    curl = db.cursor()
  2544		    curl.execute('select nick from vens where role=%s', ('banned',))
  2545		    entries = curl.fetchall()   
  2546		    db.close()
  2547		    return funktion(typelist[page])#, entries=entries)
  2548		
  2549		elif page == "create_trade":
  2550		    return funktion(typelist[page], newsentries=wl_html_cache().get_news())#, entries2=entries2)
  2551	
  2552		elif page == "invite":
  2553		    return funktion(typelist[page], newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=wl_entries_cache().give_me_entries())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())
  2554	
  2555		elif page == "info":
  2556		    return funktion(typelist[page], entries2=wl_entries_cache().give_me_entries(), newsentries=wl_html_cache().get_news())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2557	
  2558		elif page == "news" or page == "newnews":
  2559		    db = connectnews()
  2560		    dd = db.cursor()
  2561		    dd.execute('select datu, news from news order by news_id desc limit 2')
  2562		    entries = dd.fetchall()
  2563		    db.close()	    
  2564		    def modit(inmed):#newnew
  2565			inmed = inmed[:200]
  2566			return '\n'.join(inmed[i:i+80] for i in xrange(0,len(inmed), 80))	    
  2567		    return funktion(typelist[page], entries=entries, modit=modit)#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2568		
  2569		elif page == "rss":
  2570		    
  2571		    return funktion(typelist[page], mimetype='application/rss+xml', newsentries=wl_html_cache().get_news())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2572	
  2573		elif page == "get_started":
  2574		    return funktion(typelist[page], newsentries=wl_html_cache().get_news())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2575	
  2576		elif page == "additem":
  2577		    return funktion(typelist[page], newsentries=wl_html_cache().get_news())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2578	
  2579		elif page == "vendor_info":
  2580		    return funktion(typelist[page], newsentries=wl_html_cache().get_news())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2581		
  2582		elif page == "addauctions":
  2583		    return funktion(typelist[page], newsentries=wl_html_cache().get_news())#, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
  2584		
  2585		else:
  2586		    return funktion(typelist[page])
  2587	    else:
  2588		return 'invalid page'
  2589	
  2590	
  2591	s_db.set('time', '190')
  2592	ss_db.set('time', '190')
  2593	
  2594	
  2595	class wl_entries_cache(object):
  2596	    def __init__(self):
  2597		self.logger = logging.getLogger('wl_html_cache')
  2598		self.db = ss_db
  2599		self.db2 = time_db
  2600		self.categories = ['indica', 'sativa', 'Hybrid', 'Hash', 'Mdma', 'Cannabis', 'Benzos', 'Ecstasy', 'Cocaine', 'Meth', 'amphetamine', 'ritalin', 'Opiods', 'Steroids', 'Perscription', 'Stimulations', 'Psychedelics', 'Weight Loss', 'Others', 'typeofcat', 'Carding/Fraud', 'Activism', 'Carded Items', 'Clothes/Jewellery', 'Services', 'Weapons', 'Guides/E-books Tutorials', 'Hosting/servers', 'Art', 'Collectibles', 'Computer equipment', 'Various hacking/phreaking items', 'Software/scripts/source-codes', 'Custom Orders', 'Lab supplies', 'Malware', 'Home and Garden', 'Music', 'Others']
  2601		#self.cats = {'Malware':'Malware', 'Malware/Botnets/exploit kits':'Malware/Botnets/exploit kits', 'Malware/Botnets webui':'Malware/Botnets webui', 'Malware/Botnet irc':'Malware/Botnet irc', 'Malware/Exploit-kit':'Malware/Exploit-kit', 'Malware/Exploits/0days':'Malware/Exploits/0days', 'Malware/0days':'Malware/0days', 'Malware/private-exploits':'Malware/private-exploits', 'Malware/exploits':'Malware/exploits', 'Malware/Phishing':'Malware/Phishing', 'Malware/Phishing Templates':'Malware/Phishing Templates', 'Malware/Phishing email-spammers/smtp-relative':'Malware/Phishing email-spammers/smtp-relative', 'Malware/Phishing Guides':'Malware/Phishing Guides', 'Malware/mass-scanners/exploit scanners':'Malware/mass-scanners/exploit scanners', 'Malware/exploits scanner':'Malware/exploits scanner', 'Malware/mass exploiter':'Malware/mass exploiter', 'Malware/worms':'Malware/worms', 'Malware/Ransomeware':'Malware/Ransomeware', 'Malware/root-kits':'Malware/root-kits', 'Malware/root-kits Reverse tcp':'Malware/root-kits Reverse tcp', 'Malware/root-kits Encrypted':'Malware/root-kits Encrypted', 'Malware/root-kits irc':'Malware/root-kits irc', 'Malware/root-kits Sniffers':'Malware/root-kits Sniffers', 'Malware/Ransomware':'Malware/Ransomware', 'Malware/Reverse tcp':'Malware/Reverse tcp', 'Malware/Encrypted':'Malware/Encrypted', 'Malware/Others':'Malware/Others',"Lab_&_Scientific_Products": "Lab & Scientific Products/Lab_supplies", "Glassware": "Glassware & Labware/Lab_supplies", "Lab_Chemicals": "Lab Chemicals/Lab_supplies", "Lab_Furniture": "Lab Furniture/Lab_supplies", "Lab_Instruments_&_Equipment": "Lab Instruments & Equipment/Lab_supplies", "Lab_Supplies_&_Consumables": "Lab Supplies & Consumables/Lab_supplies", "cfGuidess": "Guidess/Carding/Fraud", "CVV_n_Cards": "CVV & Cards/Carding/Fraud", "Accounts_Bank_Drops": "Accounts & Bank Drops/Carding/Fraud", "cfOthers": "Others/Carding/Fraud", "exploits/hacking/phreaking": "exploits/hacking/phreaking", "0days/hacking/phreaking": "0days/hacking/phreaking", "private-exploits/hacking/phreaking": "private-exploits/hacking/phreaking", "scanners-exploits scanner/hacking/phreaking": "scanners-exploits scanner/hacking/phreaking", "scanners-mass exploiter/hacking/phreaking": "scanners-mass exploiter/hacking/phreaking", "scanners-worms/hacking/phreaking": "scanners-worms/hacking/phreaking", "root-kits-Reverse tcp/hacking/phreaking": "root-kits-Reverse tcp/hacking/phreaking", "root-kits-udp/hacking/phreaking": "root-kits-udp/hacking/phreaking", "root-kits-Encrypted/hacking/phreaking": "root-kits-Encrypted/hacking/phreaking", "root-kits-bind/hacking/phreaking": "root-kits-bind/hacking/phreaking", "root-kits-irc/hacking/phreaking": "root-kits-irc/hacking/phreaking", "spammers/hacking/phreaking": "spammers/hacking/phreaking", "ebooks/hacking/phreaking": "ebooks/hacking/phreaking", "Guides/ebooks/hacking/phreaking": "Guides/ebooks/hacking/phreaking", "Technology/ebooks/hacking/phreaking": "Technology/ebooks/hacking/phreaking", "Phising/hacking/phreaking": "Phising/hacking/phreaking", "Templates/hacking/phreaking": "Templates/hacking/phreaking", "Botnets webui/hacking/phreaking": "Botnets webui/hacking/phreaking", "Exploit-kit/hacking/phreaking": "Exploit-kit/hacking/phreaking", "Simcards/Computer equipment":"Simcards/Computer equipment", "Devices/Computer equipment":"Devices/Computer equipment", "Burners/Computer equipment":"Burners/Computer equipment", 'weapons': 'Weapons', "services/Carding/money":"Carding/money/Services", "services/Hacking":"Hacking/Services", "services/IDs_Passports":"IDs &Passports/Services", "services/Freelance":"Freelance/Services", "services/s_Others":"Others/Services", "Software_scripts_source_codes":"Software/scripts/source/codes", "various_source_codes":"various_source_codes/Software/scripts/source_codes", "street/Activism":"street/Activism", "Drugs":"Drugs", "Collectibles":"Collectibles", "o_Collectibles":"Others/Collectibles", "Rare_objects_Collectibles":"Rare/objects/Collectibles", "Trading_cards_Collectibles":"Trading_cards/Collectibles", "Culture_Collectibles":"Culture/Collectibles", "Sculptures Carvings/Art":"Sculptures Carvings/Art", "Hosting_servers":"Hosting/servers", "Hosting_servers_socks":"Hosting_servers_socks", "Carding/Fraud":"Carding/Fraud", "Activism":"Activism", 'Clothes/Activism': 'Clothes/Activism', 'Flags/Activism': 'Flags/Activism', 'Stickers/Activism': 'a_Stickers', 'Books/Activism': 'a_Books', 'Others/Activism': 'a_other', 'Services': 'Services', 'Carding/money': 'Services/Carding/money', 'Hacking': 'Services/Hacking', 'IDs &Passports': 'Services/IDs &Passports', 'Others': 'Services/Others', 'Carded Items': 'Carded Items', 'Carded Items/Clothes/Jewellery': 'Clothes/Jewellery/Carded Items', 'Carded Items/Electronics': 'Electronics/Carded Items', 'Software_scripts_source-codes': 'Software/scripts/source-codes', 'Closed Source software/Software/scripts/source-codes': 'Closed Source software/Software/scripts/source-codes', 'C/Software/scripts/source-codes': 'C/Software/scripts/source-codes', 'C++/Software/scripts/source-codes': 'C++/Software/scripts/source-codes', 'Python/Software/scripts/source-codes': 'Python/Software/scripts/source-codes', 'Perl/Software/scripts/source-codes': 'Perl/Software/scripts/source-codes', 'C-sharp/Software/scripts/source-codes': 'C-sharp/Software/scripts/source-codes', 'shift/Software/scripts/source-codes': 'shift/Software/scripts/source-codes', 'Mysql/Software/scripts/source-codes': 'Mysql/Software/scripts/source-codes', 'Bash/Software/scripts/source-codes': 'Bash/Software/scripts/source-codes', 'lisp/Software/scripts/source-codes': 'lisp/Software/scripts/source-codes', 'assembly/Software/scripts/source-codes': 'assembly/Software/scripts/source-codes', 'Software/scripts/source-codes': 'various source codes/Software/scripts/source-codes', 'Crypto/Software/scripts/source-codes': 'Crypto/Software/scripts/source-codes', 'Software/scripts/source-codes': 'Others/Software/scripts/source-codes', 'Clothes/Jewellery': 'Clothes/Jewellery', 'Computer equipment': 'Computer equipment', 'Computers/Computer equipment': 'Computers/Computer equipment', 'Ram/Computer equipment': 'Ram/Computer equipment', 'Harddrives/Computer equipment': 'Harddrives/Computer equipment', 'Moderboards/Computer equipment': 'Moderboards/Computer equipment', 'Graphic-cards/Computer equipment': 'Graphic-cards/Computer equipment', 'power-supply/Computer equipment': 'power-supply/Computer equipment', 'Chassi/Computer equipment': 'Chassi/Computer equipment', 'Others/Computer equipment': 'Others/Computer equipment', 'Hardware parts/Computer equipment':'Hardware parts/Computer equipment', 'hacking/phreaking': 'hacking/phreaking','hacking/phreaking items': 'hacking/phreaking items', 'Tools/hacking/phreaking': 'Tools/hacking/phreaking', 'Scripts/hacking/phreaking': 'Scripts/hacking/phreaking', 'Scanners/hacking/phreaking': 'Scanners/hacking/phreaking', 'exploits/hacking/phreaking': 'exploits/hacking/phreaking', 'rootkits/hacking/phreaking': 'rootkits/hacking/phreaking', 'ebooks/hacking/phreaking': 'ebooks/hacking/phreaking', 'Tutorials/hacking/phreaking': 'Tutorials/hacking/phreaking', 'pdf/hacking/phreaking': 'pdf/hacking/phreaking', 'scanners/hacking/phreaking': 'scanners/hacking/phreaking', 'wardialers/hacking/phreaking': 'wardialers/hacking/phreaking', 'Spoofing/hacking/phreaking': 'Spoofing/hacking/phreaking', 'accounts/hacking/phreaking': 'accounts/hacking/phreaking', 'Paypal/hacking/phreaking': 'Paypal/hacking/phreaking', 'db-dumps/hacking/phreaking': 'Database-dumps/hacking/phreaking', 'emaillists/hacking/phreaking': 'emaillists/hacking/phreaking', 'db-dumps/hacking/phreaking': 'db dumps/hacking/phreaking', 'leaked documents/hacking/phreaking': 'leaked documents/hacking/phreaking', 'Databases/hacking/phreaking': 'Databases/hacking/phreaking', 'Goverment/nation information/hacking/phreaking': 'Goverment/nation information/hacking/phreaking', 'Company/industrial information/hacking/phreaking': 'Company/industrial information/hacking/phreaking', 'hacked/rooted stuff/hacking/phreaking': 'hacked/rooted stuff/hacking/phreaking', 'hacked sites/hacking/phreaking': 'hacked sites/hacking/phreaking', 'backdoors/hacking/phreaking': 'backdoors/hacking/phreaking', 'hacked vps/hacking/phreaking': 'hacked vps/hacking/phreaking', 'bots/slaves/hacking/phreaking': 'bots/slaves/hacking/phreaking', 'bots/hacking/phreaking': 'bots/hacking/phreaking', 'irc/hacking/phreaking': 'irc/hacking/phreaking', 'reverse-tcp/hacking/phreaking': 'reverse-tcp/hacking/phreaking', 'Others/hacking/phreaking': 'Others/hacking/phreaking', 'various-lists/hacking/phreaking': 'various-lists/hacking/phreaking', 'emails/hacking/phreaking': 'emails/hacking/phreaking', 'phonenumbers/hacking/phreaking': 'phonenumbers/hacking/phreaking', 'Others/hacking/phreaking': 'Others/hacking/phreaking', 'Art': 'Art', 'Artwork/Art': 'Artwork/Art', 'Paintings/Art': 'Paintings/Art', 'Paint/spraycans/Art': 'Paint/spraycans/Art', 'Prints/Art': 'Prints/Art', 'Drawings/Art': 'Drawings/Art', 'Photos/Art': 'Photos/Art', 'Sculptures & Carvings/Art': 'Sculptures & Carvings/Art', 'Community Art/Art': 'Community Art/Art', 'Others/Art': 'Others/Art', 'Handguns/Weapons': 'Handguns/Weapons', 'Pistols/Weapons': 'Pistols/Weapons', 'Others/Weapons': 'Others/handguns Weapons ', 'explosives/Weapons': 'explosives/Weapons', 'nuclear/Weapons': 'nuclear/Weapons', 'Chemicals/Weapons': 'Chemicals/Weapons', 'rifles/Weapons': 'rifles/Weapons', 'snipers/Weapons': 'snipers/Weapons', 'winston/Weapons': 'winston/Weapons', 'Others/Weapons': 'Others/Weapons', 'knifes/Weapons': 'knifes/Weapons', 'machete/Weapons': 'machete/Weapons', 'Ammunition/Weapons': 'Ammunition/Weapons', 'others/Weapons': 'others/Weapons', 'armor/self/Weapons': 'armor/self/Weapons', 'Body armor/Weapons': 'Body armor/Weapons', 'Collectibles': 'Collectibles', 'Decorative/Collectibles': 'Decorative/Collectibles', 'Decorative/Collectibles': 'Decorative/Collectibles', 'Rare objects/Collectibles': 'Rare objects/Collectibles', 'Culture/Collectibles': 'Culture/Collectibles', 'Trading cards/Collectibles': 'Trading cards/Collectibles', 'Others/Collectibles': 'Others/Collectibles', 'Music': 'Music', 'Discography/Music': 'Discography/Music', 'Genre/Music': 'Genre/Music',  'Country/Music': 'Country/Music', 'Folk/Music': 'Folk/Music', 'electronic/Music': 'electronic/Music', 'jazz/Music': 'jazz/Music', 'reggae/Music': 'reggae/Music', 'Rock/Music': 'Rock/Music', 'latin/Music': 'latin/Music', 'rap/Music': 'rap/Music', 'R&B/Music': 'R&B/Music', 'religious/Music': 'religious/Music', 'vocals/Music': 'vocals/Music', 'New age/Music': 'New age/Music', 'Blues/Music': 'Blues/Music', 'Pop/Music': 'Pop/Music', 'Others/Music': 'Others/Music', 'Lab supplies': "Lab_supplies", 'Rare objects/Lab_supplies': 'Rare objects/Lab_supplies', 'Culture/Lab_supplies': "Culture/Lab_supplies", "Trading cards/Lab_supplies": "Trading cards/Lab_supplies", "olab": "Others/Lab_supplies", 'Home and Garden': 'Home and Garden', 'Home and Garden': 'Home and Garden', 'Household': 'Household Supplies & Cleaning/Home and Garden', 'Kitchen_Dining_Bar/Home_and_Garden': 'Kitchen, Dining & Bar/Home and Garden', 'Pet Supplies/Home and Garden': 'Pet Supplies/Home and Garden', 'Home Improvement/Home and Garden': 'Home Improvement/Home and Garden', 'Others/Home and Garden': 'Others/Home and Garden', 'XXX/Others': 'XXX/Others','Others/Others': 'Others/Others', 'Guides/E-books': 'Guides/E-books Tutorials/Guides/E-books', 'Tutorials/howto/Guides/E-books': 'Tutorials/howto/Guides/E-books', 'Ebooks/Guides/E-books': 'Ebooks/Guides/E-books', 'phreaking/Guides/E-books': 'phreaking/Guides/E-books', 'Archives/Guides/E-books': ' Archives/Guides/E-books', 'Hacking/Guides/E-books': 'Hacking/Guides', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Carding/Guides/E-books': 'Carding/Guides/E-books', 'Mirrors/Guides/E-books': 'Mirrors/Guides/E-books', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Security/Guides/E-books': 'Security/Guides/E-books', 'Mirrors/Guides/E-books': 'Mirrors/Guides/E-books', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Anarchism/Guides/E-books': 'Anarchism/Guides/E-books', 'Mirrors/Guides/E-books': 'Mirrors/Guides/E-books', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Custom Orders': 'Custom Orders', 'carding/Custom Orders': 'carding/Custom Orders', 'stuff/Custom Orders': 'stuff/Custom Orders', 'Others/Custom Orders': 'Others/Custom Orders', 'Hosting/servers': 'Hosting/servers', 'Seedboxes/Hosting/servers': 'Seedboxes/Hosting/servers', 'Shared hosting/Hosting/servers': 'Shared hosting/Hosting/servers', 'cpan_Hosting_servers': 'cpan/Hosting/servers', 'Others/Hosting/servers': 'Others/Hosting/servers', 'Vps/virtual private servers/Hosting/servers': 'Vps/virtual private servers/Hosting/servers',  'Full root/Hosting/servers': 'Full root/Hosting/servers', 'Offshore/Hosting/servers': 'Offshore/Hosting/servers',  'Others/Hosting/servers': 'Others/Hosting/servers', 'Proxies and vpns and shells/Hosting/servers': 'Proxies and vpns and shells/Hosting/servers', 'Proxy/Hosting/servers': 'Proxy/Hosting/servers', 'virtual private server/Hosting/servers': 'virtual private server/Hosting/servers', 'Shells/Hosting/servers': 'Shells/Hosting/servers', 'Others/Hosting/servers': 'Others/Hosting/servers', 'indica':"indica/Drugs", 'sativa':"sativa/Drugs", 'Hybrid':"Hybrid/Drugs", 'Hash':'Hash/Drugs', 'Mdma': 'Mdma/Drugs', 'Cannabis':'Cannabis/Drugs', 'Benzos': "Benzos/Drugs", 'Ecstasy': "Ecstasy/Drugs", 'Cocaine':"Cocain/Drugs", 'Meth': "Meth/Drugs", 'amphetamine': "amphetamin/Drugs", 'ritalin': "ritalin/Drugs", 'Opiods':"Opiods/Drugs", 'Steroids':"Steriods/Drugs", 'Perscription': "Perscription/Drugs", 'Stimulations': "Stimulations/Drugs", 'Psychedelics':"Psychedelics/Drugs", 'Weight Loss':"Weight Loss/Drugs", 'OthersD': 'Others/Drugs'}
  2602		self.cats = {'Malware':'Malware', 'Malware/Botnets/exploit_kits':'Malware/Botnets/exploit_kits', 'Malware/Botnets_webui':'Malware/Botnets_webui', 'Malware/Botnet_irc':'Malware/Botnet_irc', 'Malware/Exploit-kit':'Malware/Exploit-kit', 'Malware/Exploits/0days':'Malware/Exploits/0days', 'Malware/0days':'Malware/0days', 'Malware/private-exploits':'Malware/private-exploits', 'Malware/exploits':'Malware/exploits', 'Malware/Phishing':'Malware/Phishing', 'Malware/Phishing_Templates':'Malware/Phishing_Templates', 'Malware/Phishing_email-spammers/smtp-relative':'Malware/Phishing_email-spammers/smtp-relative', 'Malware/Phishing_Guides':'Malware/Phishing_Guides', 'Malware/mass-scanners/exploit_scanners':'Malware/mass-scanners/exploit_scanners', 'Malware/exploits_scanner':'Malware/exploits_scanner', 'Malware/mass_exploiter':'Malware/mass_exploiter', 'Malware/worms':'Malware/worms', 'Malware/Ransomeware':'Malware/Ransomeware', 'Malware/root-kits':'Malware/root-kits', 'Malware/root-kits_Reverse_tcp':'Malware/root-kits_Reverse_tcp', 'Malware/root-kits_Encrypted':'Malware/root-kits_Encrypted', 'Malware/root-kits_irc':'Malware/root-kits_irc', 'Malware/root-kits_Sniffers':'Malware/root-kits_Sniffers', 'Malware/Ransomware':'Malware/Ransomware', 'Malware/Reverse_tcp':'Malware/Reverse_tcp', 'Malware/Encrypted':'Malware/Encrypted', 'Malware/Others':'Malware/Others',"Lab_&_Scientific_Products": "Lab_&_Scientific_Products/Lab_supplies", "Glassware": "Glassware_&_Labware/Lab_supplies", "Lab_Chemicals": "Lab_Chemicals/Lab_supplies", "Lab_Furniture": "Lab_Furniture/Lab_supplies", "Lab_Instruments_&_Equipment": "Lab_Instruments_&_Equipment/Lab_supplies", "Lab_Supplies_&_Consumables": "Lab_Supplies_&_Consumables/Lab_supplies", "cfGuidess": "Guidess/Carding/Fraud", "CVV_n_Cards": "CVV_&_Cards/Carding/Fraud", "Accounts_Bank_Drops": "Accounts_&_Bank_Drops/Carding/Fraud", "cfOthers": "Others/Carding/Fraud", "exploits/hacking/phreaking": "exploits/hacking/phreaking", "0days/hacking/phreaking": "0days/hacking/phreaking", "private-exploits/hacking/phreaking": "private-exploits/hacking/phreaking", "scanners-exploits_scanner/hacking/phreaking": "scanners-exploits_scanner/hacking/phreaking", "scanners-mass_exploiter/hacking/phreaking": "scanners-mass_exploiter/hacking/phreaking", "scanners-worms/hacking/phreaking": "scanners-worms/hacking/phreaking", "root-kits-Reverse_tcp/hacking/phreaking": "root-kits-Reverse_tcp/hacking/phreaking", "root-kits-udp/hacking/phreaking": "root-kits-udp/hacking/phreaking", "root-kits-Encrypted/hacking/phreaking": "root-kits-Encrypted/hacking/phreaking", "root-kits-bind/hacking/phreaking": "root-kits-bind/hacking/phreaking", "root-kits-irc/hacking/phreaking": "root-kits-irc/hacking/phreaking", "spammers/hacking/phreaking": "spammers/hacking/phreaking", "ebooks/hacking/phreaking": "ebooks/hacking/phreaking", "Guides/ebooks/hacking/phreaking": "Guides/ebooks/hacking/phreaking", "Technology/ebooks/hacking/phreaking": "Technology/ebooks/hacking/phreaking", "Phising/hacking/phreaking": "Phising/hacking/phreaking", "Templates/hacking/phreaking": "Templates/hacking/phreaking", "Botnets_webui/hacking/phreaking": "Botnets_webui/hacking/phreaking", "Exploit-kit/hacking/phreaking": "Exploit-kit/hacking/phreaking", "Simcards/Computer_equipment":"Simcards/Computer_equipment", "Devices/Computer_equipment":"Devices/Computer_equipment", "Burners/Computer_equipment":"Burners/Computer_equipment", 'weapons': 'Weapons', "services/Carding/money":"Carding/money/Services", "services/Hacking":"Hacking/Services", "services/IDs_Passports":"IDs_&Passports/Services", "services/Freelance":"Freelance/Services", "services/s_Others":"Others/Services", "Software_scripts_source_codes":"Software/scripts/source/codes", "various_source_codes":"various_source_codes/Software/scripts/source_codes", "street/Activism":"street/Activism", "Drugs":"Drugs", "Collectibles":"Collectibles", "o_Collectibles":"Others/Collectibles", "Rare_objects_Collectibles":"Rare/objects/Collectibles", "Trading_cards_Collectibles":"Trading_cards/Collectibles", "Culture_Collectibles":"Culture/Collectibles", "Sculptures_Carvings/Art":"Sculptures_Carvings/Art", "Hosting_servers":"Hosting/servers", "Hosting_servers_socks":"Hosting_servers_socks", "Carding/Fraud":"Carding/Fraud", "Activism":"Activism", 'Clothes/Activism': 'Clothes/Activism', 'Flags/Activism': 'Flags/Activism', 'Stickers/Activism': 'a_Stickers', 'Books/Activism': 'a_Books', 'Others/Activism': 'a_other', 'Services': 'Services', 'Carding/money': 'Services/Carding/money', 'Hacking': 'Services/Hacking', 'IDs_&Passports': 'Services/IDs_&Passports', 'Others': 'Services/Others', 'Carded_Items': 'Carded_Items', 'Carded_Items/Clothes/Jewellery': 'Clothes/Jewellery/Carded_Items', 'Carded_Items/Electronics': 'Electronics/Carded_Items', 'Software_scripts_source-codes': 'Software/scripts/source-codes', 'Closed_Source_software/Software/scripts/source-codes': 'Closed_Source_software/Software/scripts/source-codes', 'C/Software/scripts/source-codes': 'C/Software/scripts/source-codes', 'C++/Software/scripts/source-codes': 'C++/Software/scripts/source-codes', 'Python/Software/scripts/source-codes': 'Python/Software/scripts/source-codes', 'Perl/Software/scripts/source-codes': 'Perl/Software/scripts/source-codes', 'C-sharp/Software/scripts/source-codes': 'C-sharp/Software/scripts/source-codes', 'shift/Software/scripts/source-codes': 'shift/Software/scripts/source-codes', 'Mysql/Software/scripts/source-codes': 'Mysql/Software/scripts/source-codes', 'Bash/Software/scripts/source-codes': 'Bash/Software/scripts/source-codes', 'lisp/Software/scripts/source-codes': 'lisp/Software/scripts/source-codes', 'assembly/Software/scripts/source-codes': 'assembly/Software/scripts/source-codes', 'Software/scripts/source-codes': 'various_source_codes/Software/scripts/source-codes', 'Crypto/Software/scripts/source-codes': 'Crypto/Software/scripts/source-codes', 'Software/scripts/source-codes': 'Others/Software/scripts/source-codes', 'Clothes/Jewellery': 'Clothes/Jewellery', 'Computer_equipment': 'Computer_equipment', 'Computers/Computer_equipment': 'Computers/Computer_equipment', 'Ram/Computer_equipment': 'Ram/Computer_equipment', 'Harddrives/Computer_equipment': 'Harddrives/Computer_equipment', 'Moderboards/Computer_equipment': 'Moderboards/Computer_equipment', 'Graphic-cards/Computer_equipment': 'Graphic-cards/Computer_equipment', 'power-supply/Computer_equipment': 'power-supply/Computer_equipment', 'Chassi/Computer_equipment': 'Chassi/Computer_equipment', 'Others/Computer_equipment': 'Others/Computer_equipment', 'Hardware_parts/Computer_equipment':'Hardware_parts/Computer_equipment', 'hacking/phreaking': 'hacking/phreaking','hacking/phreaking_items': 'hacking/phreaking_items', 'Tools/hacking/phreaking': 'Tools/hacking/phreaking', 'Scripts/hacking/phreaking': 'Scripts/hacking/phreaking', 'Scanners/hacking/phreaking': 'Scanners/hacking/phreaking', 'exploits/hacking/phreaking': 'exploits/hacking/phreaking', 'rootkits/hacking/phreaking': 'rootkits/hacking/phreaking', 'ebooks/hacking/phreaking': 'ebooks/hacking/phreaking', 'Tutorials/hacking/phreaking': 'Tutorials/hacking/phreaking', 'pdf/hacking/phreaking': 'pdf/hacking/phreaking', 'scanners/hacking/phreaking': 'scanners/hacking/phreaking', 'wardialers/hacking/phreaking': 'wardialers/hacking/phreaking', 'Spoofing/hacking/phreaking': 'Spoofing/hacking/phreaking', 'accounts/hacking/phreaking': 'accounts/hacking/phreaking', 'Paypal/hacking/phreaking': 'Paypal/hacking/phreaking', 'db-dumps/hacking/phreaking': 'Database-dumps/hacking/phreaking', 'emaillists/hacking/phreaking': 'emaillists/hacking/phreaking', 'db-dumps/hacking/phreaking': 'db_dumps/hacking/phreaking', 'leaked_documents/hacking/phreaking': 'leaked_documents/hacking/phreaking', 'Databases/hacking/phreaking': 'Databases/hacking/phreaking', 'Goverment/nation_information/hacking/phreaking': 'Goverment/nation_information/hacking/phreaking', 'Company/industrial_information/hacking/phreaking': 'Company/industrial_information/hacking/phreaking', 'hacked/rooted_stuff/hacking/phreaking': 'hacked/rooted_stuff/hacking/phreaking', 'hacked_sites/hacking/phreaking': 'hacked_sites/hacking/phreaking', 'backdoors/hacking/phreaking': 'backdoors/hacking/phreaking', 'hacked_vps/hacking/phreaking': 'hacked_vps/hacking/phreaking', 'bots/slaves/hacking/phreaking': 'bots/slaves/hacking/phreaking', 'bots/hacking/phreaking': 'bots/hacking/phreaking', 'irc/hacking/phreaking': 'irc/hacking/phreaking', 'reverse-tcp/hacking/phreaking': 'reverse-tcp/hacking/phreaking', 'Others/hacking/phreaking': 'Others/hacking/phreaking', 'various-lists/hacking/phreaking': 'various-lists/hacking/phreaking', 'emails/hacking/phreaking': 'emails/hacking/phreaking', 'phonenumbers/hacking/phreaking': 'phonenumbers/hacking/phreaking', 'Others/hacking/phreaking': 'Others/hacking/phreaking', 'Art': 'Art', 'Artwork/Art': 'Artwork/Art', 'Paintings/Art': 'Paintings/Art', 'Paint/spraycans/Art': 'Paint/spraycans/Art', 'Prints/Art': 'Prints/Art', 'Drawings/Art': 'Drawings/Art', 'Photos/Art': 'Photos/Art', 'Sculptures_&_Carvings/Art': 'Sculptures_&_Carvings/Art', 'Community_Art/Art': 'Community_Art/Art', 'Others/Art': 'Others/Art', 'Handguns/Weapons': 'Handguns/Weapons', 'Pistols/Weapons': 'Pistols/Weapons', 'Others/Weapons': 'Others/handguns_Weapons_', 'explosives/Weapons': 'explosives/Weapons', 'nuclear/Weapons': 'nuclear/Weapons', 'Chemicals/Weapons': 'Chemicals/Weapons', 'rifles/Weapons': 'rifles/Weapons', 'snipers/Weapons': 'snipers/Weapons', 'winston/Weapons': 'winston/Weapons', 'Others/Weapons': 'Others/Weapons', 'knifes/Weapons': 'knifes/Weapons', 'machete/Weapons': 'machete/Weapons', 'Ammunition/Weapons': 'Ammunition/Weapons', 'others/Weapons': 'others/Weapons', 'armor/self/Weapons': 'armor/self/Weapons', 'Body_armor/Weapons': 'Body_armor/Weapons', 'Collectibles': 'Collectibles', 'Decorative/Collectibles': 'Decorative/Collectibles', 'Decorative/Collectibles': 'Decorative/Collectibles', 'Rare_objects/Collectibles': 'Rare_objects/Collectibles', 'Culture/Collectibles': 'Culture/Collectibles', 'Trading_cards/Collectibles': 'Trading_cards/Collectibles', 'Others/Collectibles': 'Others/Collectibles', 'Music': 'Music', 'Discography/Music': 'Discography/Music', 'Genre/Music': 'Genre/Music', 'Country/Music': 'Country/Music', 'Folk/Music': 'Folk/Music', 'electronic/Music': 'electronic/Music', 'jazz/Music': 'jazz/Music', 'reggae/Music': 'reggae/Music', 'Rock/Music': 'Rock/Music', 'latin/Music': 'latin/Music', 'rap/Music': 'rap/Music', 'R&B/Music': 'R&B/Music', 'religious/Music': 'religious/Music', 'vocals/Music': 'vocals/Music', 'New_age/Music': 'New_age/Music', 'Blues/Music': 'Blues/Music', 'Pop/Music': 'Pop/Music', 'Others/Music': 'Others/Music', 'Lab_supplies': "Lab_supplies", 'Rare_objects/Lab_supplies': 'Rare_objects/Lab_supplies', 'Culture/Lab_supplies': "Culture/Lab_supplies", "Trading_cards/Lab_supplies": "Trading_cards/Lab_supplies", "olab": "Others/Lab_supplies", 'Home_and_Garden': 'Home_and_Garden', 'Home_and_Garden': 'Home_and_Garden', 'Household': 'Household_Supplies_&_Cleaning/Home_and_Garden', 'Kitchen_Dining_Bar/Home_and_Garden': 'Kitchen,_Dining_&_Bar/Home_and_Garden', 'Pet_Supplies/Home_and_Garden': 'Pet_Supplies/Home_and_Garden', 'Home_Improvement/Home_and_Garden': 'Home_Improvement/Home_and_Garden', 'Others/Home_and_Garden': 'Others/Home_and_Garden', 'XXX/Others': 'XXX/Others','Others/Others': 'Others/Others', 'Guides/E-books': 'Guides/E-books_Tutorials/Guides/E-books', 'Tutorials/howto/Guides/E-books': 'Tutorials/howto/Guides/E-books', 'Ebooks/Guides/E-books': 'Ebooks/Guides/E-books', 'phreaking/Guides/E-books': 'phreaking/Guides/E-books', 'Archives/Guides/E-books': '_Archives/Guides/E-books', 'Hacking/Guides/E-books': 'Hacking/Guides', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Carding/Guides/E-books': 'Carding/Guides/E-books', 'Mirrors/Guides/E-books': 'Mirrors/Guides/E-books', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Security/Guides/E-books': 'Security/Guides/E-books', 'Mirrors/Guides/E-books': 'Mirrors/Guides/E-books', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Anarchism/Guides/E-books': 'Anarchism/Guides/E-books', 'Mirrors/Guides/E-books': 'Mirrors/Guides/E-books', 'Others/Guides/E-books': 'Others/Guides/E-books', 'Custom_Orders': 'Custom_Orders', 'carding/Custom_Orders': 'carding/Custom_Orders', 'stuff/Custom_Orders': 'stuff/Custom_Orders', 'Others/Custom_Orders': 'Others/Custom_Orders', 'Hosting/servers': 'Hosting/servers', 'Seedboxes/Hosting/servers': 'Seedboxes/Hosting/servers', 'Shared_hosting/Hosting/servers': 'Shared_hosting/Hosting/servers', 'cpan_Hosting_servers': 'cpan/Hosting/servers', 'Others/Hosting/servers': 'Others/Hosting/servers', 'Vps/virtual_private_servers/Hosting/servers': 'Vps/virtual_private_servers/Hosting/servers', 'Full_root/Hosting/servers': 'Full_root/Hosting/servers', 'Offshore/Hosting/servers': 'Offshore/Hosting/servers', 'Others/Hosting/servers': 'Others/Hosting/servers', 'Proxies_and_vpns_and_shells/Hosting/servers': 'Proxies_and_vpns_and_shells/Hosting/servers', 'Proxy/Hosting/servers': 'Proxy/Hosting/servers', 'virtual_private_server/Hosting/servers': 'virtual_private_server/Hosting/servers', 'Shells/Hosting/servers': 'Shells/Hosting/servers', 'Others/Hosting/servers': 'Others/Hosting/servers', 'indica':"indica/Drugs", 'sativa':"sativa/Drugs", 'Hybrid':"Hybrid/Drugs", 'Hash':'Hash/Drugs', 'Mdma': 'Mdma/Drugs', 'Cannabis':'Cannabis/Drugs', 'Benzos': "Benzos/Drugs", 'Ecstasy': "Ecstasy/Drugs", 'Cocaine':"Cocain/Drugs", 'Meth': "Meth/Drugs", 'amphetamine': "amphetamin/Drugs", 'ritalin': "ritalin/Drugs", 'Opiods':"Opiods/Drugs", 'Steroids':"Steriods/Drugs", 'Perscription': "Perscription/Drugs", 'Stimulations': "Stimulations/Drugs", 'Psychedelics':"Psychedelics/Drugs", 'Weight_Loss':"Weight_Loss/Drugs", 'OthersD': 'Others/Drugs'}
  2603	
  2604	    def dictcats(self, inblob):
  2605	        found = []
  2606	        for x in self.cats.keys():
  2607	            opse = self.cats.get(x)
  2608	            if opse in inblob:
  2609	                found.append(self.cats.get(x))
  2610	                inblob = inblob.replace(opse, '')
  2611	        return found
  2612	#todo fix
  2613	    def verify_shop_hash(self, thehash):
  2614		#print 'verify shop hash called'
  2615		a = self.db2.get('shop_hash')
  2616		b = self.get_shop_hash()
  2617		if a == b:
  2618		    #print 'pass 0'
  2619		    pass
  2620		#if b.__contains__(thehash):
  2621		    #print 'pass 1 something is wrong'
  2622		    #pass
  2623		else:
  2624		    #print thehash
  2625		    self.notify_hash(thehash)
  2626	    #pm support    
  2627	
  2628	    def shop_hash(self):
  2629		self.verify_shop_hash(self.get_shop_hash())
  2630	
  2631	    def get_shop_hash(self):
  2632		flile = open('2.py').read()
  2633		h = blake2b(key='4e', digest_size=64)
  2634		h.update(flile)
  2635		c = h.hexdigest()
  2636		e = len(flile)
  2637		return c#{c:e}#(e, c)
  2638		
  2639	    def notify_hash(self, hashvalue):#dump on disk
  2640		#print 'dumping to disk'
  2641	    #send to codeing update flow zone
  2642	        if not self.db2.get('shop_hash'):
  2643		    #pass
  2644		#else:
  2645		    
  2646		   #sprint 'error error no shop_hash in time.db file'
  2647		   #sprint 'create one'
  2648		   print '''
  2649		    echo '{"shop_hash":["sd"]}' > time
  2650		    '''
  2651		else:
  2652		   ##sprint self.db2.get('shop_hash')
  2653		    hashval = {str(datetime.date.today()): hashvalue}
  2654		    if self.db2.get('shop_hash').__contains__(hashval):
  2655			pass
  2656			#print 'not in, shophash'
  2657		    else:
  2658			#print 'adding it 2 shophash'
  2659			self.db2.ladd('shop_hash', hashval)
  2660			self.db2._dumpdb(forced=True)		
  2661		
  2662	    def conti(self, inu):
  2663		db = connectitems()
  2664		dsa = db.cursor()
  2665		inu = str(inu)
  2666		thing = '%' + inu + '%'
  2667		thing = str(thing)
  2668		dsa.execute('select COUNT(item_id) from items where item_category LIKE %s',(thing,)) 
  2669		th = dsa.fetchone()
  2670		if not th:
  2671		    th = 0	
  2672		if len(str(th)) == 0:
  2673		    th = 0	
  2674		if not th:
  2675		    th = 0
  2676		else:
  2677		    th = th[0]
  2678		    if not th:
  2679			th = 0
  2680		    if len(str(th)) == 0:
  2681			th = 0		
  2682		    
  2683	
  2684		db.close()
  2685		return th
  2686	    
  2687	    def get_s5(self):
  2688		return self.db.get('s5')
  2689	    
  2690	    def update_cache(self):
  2691		self.shop_hash()
  2692		#print 'update called'
  2693		#print self.db.get('time')
  2694	#sprint 'checking cache'
  2695		coinztx().update()
  2696		if not self.db.get('s5'):
  2697		    s5 = 'iMtBjpB' + str(datetime.date.today())
  2698		    self.db.set('s5', s5)
  2699		if not self.db.get("time"):	    
  2700		   #sprint 'updateing'
  2701		    self.db.set(time, str(datetime.datetime.time(datetime.datetime.now()))[:-10][2:][:2][1:])
  2702		    for line in self.cats:#egories:
  2703			#print 'added ' + str(line)
  2704			self.db.set(line, self.conti(line))	    
  2705		SECRET_KEY5 = 'iMtBjpo1' + str(datetime.date.today())	
  2706		if not self.db.get('s5') == SECRET_KEY5:
  2707		    self.db.set('s5', SECRET_KEY5)
  2708		if str(datetime.datetime.time(datetime.datetime.now()))[:-10][2:][:2][1:] == self.db.get("time"):
  2709		    pass#cache is okey/up to date
  2710		else:
  2711		    d = str(datetime.datetime.time(datetime.datetime.now()))[:-10][2:][:2][1:]
  2712		    if self.db.get('time') == d:
  2713		        print 'not updateing we are all set'
  2714		    else:
  2715		#sprint 'updateing'
  2716			self.db.set('time', d)
  2717			for line in self.cats:#egories:
  2718			    #print 'added ' + str(line)
  2719			    self.db.set(line, self.conti(line))
  2720		#sprint 'cache updated , cache date is set to ' + d
  2721	    
  2722	    def give_me_entries(self):
  2723		self.update_cache()
  2724	#sprint 'cache is ok'
  2725		#entries3 = [dict(Malware=self.db.get('Malware'), Malware_Botnets_exploit_kits=self.db.get('Malware/Botnets/exploit kits'), Malware_Botnets_webui=self.db.get('Malware/Botnets webui'), Malware_Botnet_irc=self.db.get('Malware/Botnet irc'), Malware_Exploit_kit=self.db.get('Malware/Exploit-kit'), Malware_Exploits_0days=self.db.get('Malware/Exploits/0days'), Malware_0days=self.db.get('Malware/0days'), Malware_private_exploits=self.db.get('Malware/private-exploits'), Malware_exploits=self.db.get('Malware/exploits'), Malware_Phishing=self.db.get('Malware/Phishing'), Malware_Phishing_Templates=self.db.get('Malware/Phishing Templates'), Malware_Phishing_email_spammers_smtp_relative=self.db.get('Malware/Phishing email-spammers/smtp-relative'), Malware_Phishing_Guides=self.db.get('Malware/Phishing Guides'), Malware_mass_scanners_exploit_scanners=self.db.get('Malware/mass-scanners/exploit scanners'), Malware_exploits_scanner=self.db.get('Malware/exploits scanner'), Malware_mass_exploiter=self.db.get('Malware/mass exploiter'), Malware_worms=self.db.get('Malware/worms'), Malware_Ransomeware=self.db.get('Malware/Ransomeware'), Malware_root_kits=self.db.get('Malware/root-kits'), Malware_root_kits_Reverse_tcp=self.db.get('Malware/root-kits Reverse tcp'), Malware_root_kits_Encrypted=self.db.get('Malware/root-kits Encrypted'), Malware_root_kits_irc=self.db.get('Malware/root-kits irc'), Malware_root_kits_Sniffers=self.db.get('Malware/root-kits Sniffers'), Malware_Ransomware=self.db.get('Malware/Ransomware'), Malware_Reverse_tcp=self.db.get('Malware/Reverse tcp'), Malware_Encrypted=self.db.get('Malware/Encrypted'), Malware_Others=self.db.get('Malware/Others'), Lab_n_Scientific_Products=self.db.get("Lab_&_Scientific_Products"), Glassware_n_Labware=self.db.get("Glassware"), Lab_Chemicals=self.db.get("Lab_Chemicals"), Lab_Furniture=self.db.get("Lab_Furniture"), Lab_Instruments_n_Equipment=self.db.get("Lab_Instruments_&_Equipment"), Lab_Supplies_n_Consumables=self.db.get("Lab_Supplies_&_Consumables"), cfGuidess=self.db.get("cfGuidess"), CVV_n_Cards=self.db.get("CVV_n_Cards"), Accounts_Bank_Drops=self.db.get("Accounts_Bank_Drops"), cfOthers=self.db.get("cfOthers"), odays_hacking_phreaking=self.db.get("0days/hacking/phreaking"), private_exploits_hacking_phreaking=self.db.get("private-exploits/hacking/phreaking"), scanners_exploits_scanner_hacking_phreaking=self.db.get("scanners-exploits scanner/hacking/phreaking"), scanners_mass_exploiter_hacking_phreaking=self.db.get("scanners-mass exploiter/hacking/phreaking"), scanners_worms_hacking_phreaking=self.db.get("scanners-worms/hacking/phreaking"), root_kits_Reverse_tcp_hacking_phreaking=self.db.get("root-kits-Reverse tcp/hacking/phreaking"), root_kits_udp_hacking_phreaking=self.db.get("root-kits-udp/hacking/phreaking"), root_kits_Encrypted_hacking_phreaking=self.db.get("root-kits-Encrypted/hacking/phreaking"), root_kits_bind_hacking_phreaking=self.db.get("root-kits-bind/hacking/phreaking"), root_kits_irc_hacking_phreaking=self.db.get("root-kits-irc/hacking/phreaking"), spammers_hacking_phreaking=self.db.get("spammers/hacking/phreaking"), Guides_ebooks_hacking_phreaking=self.db.get("Guides/ebooks/hacking/phreaking"), Technology_ebooks_hacking_phreaking=self.db.get("Technology/ebooks/hacking/phreaking"), Phising_hacking_phreaking=self.db.get("Phising/hacking/phreaking"), Templates_hacking_phreaking=self.db.get("Templates/hacking/phreaking"), Botnets_webui_hacking_phreaking=self.db.get("Botnets webui/hacking/phreaking"), Exploit_kit_hacking_phreaking=self.db.get("Exploit-kit/hacking/phreaking"), Burners=self.db.get("Burners/Computer equipment"), Devices=self.db.get("Devices/Computer equipment"), Simcards=self.db.get("Simcards/Computer equipment"), weapons=self.db.get("weapons"), services_Carding_money=self.db.get("services/Carding/money"), service_Hacking=self.db.get("services/Hacking"), s_IDs_Passports=self.db.get("services/IDs_Passports"), s_Freelance=self.db.get("services/Freelance"), s_Others=self.db.get("services/s_Others"), various_source_codes=self.db.get("various_source_codes"), street_Activism=self.db.get("street/Activism"), Drugs=self.db.get("Drugs"), o_Collectibles=self.db.get("o_Collectibles"), Hosting_servers_socks=self.db.get("Hosting_servers_socks"), Cardin_Fraud=self.db.get("Carding/Fraud"), Activism=self.db.get("Activism"), Tutorials_howto_Guides_Ebooks=self.db.get("Tutorials/howto/Guides/E-books"), C_sharp_Software_scripts_source_codes=self.db.get("C-sharp/Software/scripts/source-codes"), Kitchen_Dining__Bar_Home_and_Garden=self.db.get("Kitchen_Dining_Bar/Home_and_Garden"), Hacking=self.db.get("Hacking"), sativa=self.db.get("sativa"), db_dumps_hacking_phreaking=self.db.get("db-dumps/hacking/phreaking"), armor_self_Weapons=self.db.get("armor/self/Weapons"), Spoofing_hacking_phreaking=self.db.get("Spoofing/hacking/phreaking"), Tools_hacking_phreaking=self.db.get("Tools/hacking/phreaking"), Services=self.db.get("Services"), C_Software_scripts_source_codes=self.db.get("C/Software/scripts/source-codes"), hacked_rooted_stuff_hacking_phreaking=self.db.get("hacked/rooted stuff/hacking/phreaking"), Culture_Lab_supplies=self.db.get("Culture/Lab_supplies"), Others_hacking_phreaking=self.db.get("Others/hacking/phreaking"), Mysql_Software_scripts_source_codes=self.db.get("Mysql/Software/scripts/source-codes"), olab=self.db.get("olab"), Archives_Guides_Ebooks=self.db.get("Archives/Guides/E-books"), winston_Weapons=self.db.get("winston/Weapons"), phreaking_Guides_Ebooks=self.db.get("phreaking/Guides/E-books"), Hardware_parts_Computer_equipment=self.db.get("Hardware parts/Computer equipment"), Seedboxes_Hosting_servers=self.db.get("Seedboxes/Hosting/servers"), Paint_spraycans_Art=self.db.get("Paint/spraycans/Art"), explosives_Weapons=self.db.get("explosives/Weapons"), Guides_Ebooks=self.db.get("Guides/E-books"), New_age_Music=self.db.get("New age/Music"), Offshore_Hosting_servers=self.db.get("Offshore/Hosting/servers"), power_supply_Computer_equipment=self.db.get("power-supply/Computer equipment"), lisp_Software_scripts_source_codes=self.db.get("lisp/Software/scripts/source-codes"), Hacking_Guides_Ebooks=self.db.get("Hacking/Guides/E-books"), XXX_Others=self.db.get("XXX/Others"), Harddrives_Computer_equipment=self.db.get("Harddrives/Computer equipment"), leaked_documents_hacking_phreaking=self.db.get("leaked documents/hacking/phreaking"), Trading_cards_Lab_supplies=self.db.get("Trading cards/Lab_supplies"), Others_Guides_Ebooks=self.db.get("Others/Guides/E-books"), Pop_Music=self.db.get("Pop/Music"), Sculptures_Carvings_Art=self.db.get("Sculptures Carvings/Art"), Paintings_Art=self.db.get("Paintings/Art"), others_Weapons=self.db.get("others/Weapons"), Security_Guides_Ebooks=self.db.get("Security/Guides/E-books"), Chassi_Computer_equipment=self.db.get("Chassi/Computer equipment"), machete_Weapons=self.db.get("machete/Weapons"), Meth=self.db.get("Meth"), indica=self.db.get("indica"), Full_root_Hosting_servers=self.db.get("Full root/Hosting/servers"), Closed_Source_software_Software_scripts_source_codes=self.db.get("Closed Source software/Software/scripts/source-codes"), Psychedelics=self.db.get("Psychedelics"), Others_Hosting_servers=self.db.get("Others/Hosting/servers"), shift_Software_scripts_source_codes=self.db.get("shift/Software/scripts/source-codes"), Carded_Items_Electronics=self.db.get("Carded Items/Electronics"), cpan_Hosting_servers=self.db.get("cpan_Hosting_servers"), ebooks_hacking_phreaking=self.db.get("ebooks/hacking/phreaking"), Drawings_Art=self.db.get("Drawings/Art"), Body_armor_Weapons=self.db.get("Body armor/Weapons"), reverse_tcp_hacking_phreaking=self.db.get("reverse-tcp/hacking/phreaking"), Others_Computer_equipment=self.db.get("Others/Computer equipment"), Proxy_Hosting_servers=self.db.get("Proxy/Hosting/servers"), Others_Home_and_Garden=self.db.get("Others/Home and Garden"), Carded_Items=self.db.get("Carded Items"), knifes_Weapons=self.db.get("knifes/Weapons"), Steroids=self.db.get("Steroids"), Others_Activism=self.db.get("Others/Activism"), Country_Music=self.db.get("Country/Music"), Lab_supplies=self.db.get("Lab supplies"), Mirrors_Guides_Ebooks=self.db.get("Mirrors/Guides/E-books"), Collectibles=self.db.get("Collectibles"), phonenumbers_hacking_phreaking=self.db.get("phonenumbers/hacking/phreaking"), virtual_private_server_Hosting_servers=self.db.get("virtual private server/Hosting/servers"), ritalin=self.db.get("ritalin"), Databases_hacking_phreaking=self.db.get("Databases/hacking/phreaking"), bots_hacking_phreaking=self.db.get("bots/hacking/phreaking"), various_lists_hacking_phreaking=self.db.get("various-lists/hacking/phreaking"), wardialers_hacking_phreaking=self.db.get("wardialers/hacking/phreaking"), electronic_Music=self.db.get("electronic/Music"), Carded_Items_Clothes_Jewellery=self.db.get("Carded Items/Clothes/Jewellery"), Opiods=self.db.get("Opiods"), Software_scripts_source_codes=self.db.get("Software_scripts_source_codes"), Weight_Loss=self.db.get("Weight Loss"), Scanners_hacking_phreaking=self.db.get("Scanners/hacking/phreaking"), stuff_Custom_Orders=self.db.get("stuff/Custom Orders"), Art=self.db.get("Art"), Trading_cards_Collectibles=self.db.get("Trading cards/Collectibles"), reggae_Music=self.db.get("reggae/Music"), Perscription=self.db.get("Perscription"), Cocaine=self.db.get("Cocaine"), Pet_Supplies_Home_and_Garden=self.db.get("Pet Supplies/Home and Garden"), Computers_Computer_equipment=self.db.get("Computers/Computer equipment"), scanners_hacking_phreaking=self.db.get("scanners/hacking/phreaking"), rap_Music=self.db.get("rap/Music"), Cannabis=self.db.get("Cannabis"), Stickers_Activism=self.db.get("Stickers/Activism"), Rock_Music=self.db.get("Rock/Music"), Carding_money=self.db.get("Carding/money"), Hash=self.db.get("Hash"), Decorative_Collectibles=self.db.get("Decorative/Collectibles"), Custom_Orders=self.db.get("Custom Orders"), Cplusplus_Software_scripts_source_codes=self.db.get("C++/Software/scripts/source-codes"), Shells_Hosting_servers=self.db.get("Shells/Hosting/servers"), Ram_Computer_equipment=self.db.get("Ram/Computer equipment"), rifles_Weapons=self.db.get("rifles/Weapons"), vocals_Music=self.db.get("vocals/Music"), Clothes_Activism=self.db.get("Clothes/Activism"), Moderboards_Computer_equipment=self.db.get("Moderboards/Computer equipment"), Paypal_hacking_phreaking=self.db.get("Paypal/hacking/phreaking"), Discography_Music=self.db.get("Discography/Music"), Benzos=self.db.get("Benzos"), Goverment_nation_information_hacking_phreaking=self.db.get("Goverment/nation information/hacking/phreaking"), Folk_Music=self.db.get("Folk/Music"), Others_Custom_Orders=self.db.get("Others/Custom Orders"), Rare_objects_Collectibles=self.db.get("Rare objects/Collectibles"), carding_Custom_Orders=self.db.get("carding/Custom Orders"), Graphic_cards_Computer_equipment=self.db.get("Graphic-cards/Computer equipment"), Music=self.db.get("Music"), Shared_hosting_Hosting_servers=self.db.get("Shared hosting/Hosting/servers"), Ammunition_Weapons=self.db.get("Ammunition/Weapons"), religious_Music=self.db.get("religious/Music"), bots_slaves_hacking_phreaking=self.db.get("bots/slaves/hacking/phreaking"), Stimulations=self.db.get("Stimulations"), hacking_phreaking_items=self.db.get("hacking/phreaking items"), emails_hacking_phreaking=self.db.get("emails/hacking/phreaking"), Home_and_Garden=self.db.get("Home and Garden"), Culture_Collectibles=self.db.get("Culture/Collectibles"), hacking_phreaking=self.db.get("hacking/phreaking"), irc_hacking_phreaking=self.db.get("irc/hacking/phreaking"), accounts_hacking_phreaking=self.db.get("accounts/hacking/phreaking"), industrial_information=self.db.get("Company/industrial information/hacking/phreaking"), pdf_hacking_phreaking=self.db.get("pdf/hacking/phreaking"), Others_Others=self.db.get("Others/Others"), Scripts_hacking_phreaking=self.db.get("Scripts/hacking/phreaking"), assembly_Software_scripts_source_codes=self.db.get("assembly/Software/scripts/source-codes"), Hybrid=self.db.get("Hybrid"), Crypto_Software_scripts_source_codes=self.db.get("Crypto/Software/scripts/source-codes"), Others_Music=self.db.get("Others/Music"), Anarchism_Guides_Ebooks=self.db.get("Anarchism/Guides/E-books"), Tutorials_hacking_phreaking=self.db.get("Tutorials/hacking/phreaking"), Artwork_Art=self.db.get("Artwork/Art"), emaillists_hacking_phreaking=self.db.get("emaillists/hacking/phreaking"), Carding_Guides_Ebooks=self.db.get("Carding/Guides/E-books"), Bash_Software_scripts_source_codes=self.db.get("Bash/Software/scripts/source-codes"), Rare_objects_Lab_supplies=self.db.get("Rare objects/Lab_supplies"), Hosting_servers=self.db.get("Hosting/servers"), Clothes_Jewellery=self.db.get("Clothes/Jewellery"), Prints_Art=self.db.get("Prints/Art"), Others_Collectibles=self.db.get("Others/Collectibles"), IDs_Passports=self.db.get("IDs Passports"), Blues_Music=self.db.get("Blues/Music"), Python_Software_scripts_source_codes=self.db.get("Python/Software/scripts/source-codes"), OthersD=self.db.get("OthersD"), Household_Supplies__Cleaning_Home_and_Garden=self.db.get("Household"), Ecstasy=self.db.get("Ecstasy"), Community_Art_Art=self.db.get("Community Art/Art"), Pistols_Weapons=self.db.get("Pistols/Weapons"), Vps_virtual_private_servers_Hosting_servers=self.db.get("Vps/virtual private servers/Hosting/servers"), Chemicals_Weapons=self.db.get("Chemicals/Weapons"), Home_Improvement_Home_and_Garden=self.db.get("Home Improvement/Home and Garden"), Books_Activism=self.db.get("Books/Activism"), rootkits_hacking_phreaking=self.db.get("rootkits/hacking/phreaking"), backdoors_hacking_phreaking=self.db.get("backdoors/hacking/phreaking"), hacked_sites_hacking_phreaking=self.db.get("hacked sites/hacking/phreaking"), Mdma=self.db.get("Mdma"), Others_Art=self.db.get("Others/Art"), hacked_vps_hacking_phreaking=self.db.get("hacked vps/hacking/phreaking"), latin_Music=self.db.get("latin/Music"), Flags_Activism=self.db.get("Flags/Activism"), Proxies_and_vpns_and_shells_Hosting_servers=self.db.get("Proxies and vpns and shells/Hosting/servers"), amphetamine=self.db.get("amphetamine"), snipers_Weapons=self.db.get("snipers/Weapons"), nuclear_Weapons=self.db.get("nuclear/Weapons"), jazz_Music=self.db.get("jazz/Music"), Ebooks_Guides_Ebooks=self.db.get("Ebooks/Guides/E-books"), Perl_Software_scripts_source_codes=self.db.get("Perl/Software/scripts/source-codes"), Computer_equipment=self.db.get("Computer equipment"), exploits_hacking_phreaking=self.db.get("exploits/hacking/phreaking"), Photos_Art=self.db.get("Photos/Art"), Others_Weapons=self.db.get("Others/Weapons"), Handguns_Weapons=self.db.get("Handguns/Weapons"), R_B_Music=self.db.get("R&B/Music"))]	
  2726		#entries3 = [dict(Malware=self.db.get('Malware'), Malware_Botnets_exploit_kits=self.db.get('Malware/Botnets/exploit_kits'), Malware_Botnets_webui=self.db.get('Malware/Botnets_webui'), Malware_Botnet_irc=self.db.get('Malware/Botnet_irc'), Malware_Exploit_kit=self.db.get('Malware/Exploit-kit'), Malware_Exploits_0days=self.db.get('Malware/Exploits/0days'), Malware_0days=self.db.get('Malware/0days'), Malware_private_exploits=self.db.get('Malware/private-exploits'), Malware_exploits=self.db.get('Malware/exploits'), Malware_Phishing=self.db.get('Malware/Phishing'), Malware_Phishing_Templates=self.db.get('Malware/Phishing_Templates'), Malware_Phishing_email_spammers_smtp_relative=self.db.get('Malware/Phishing_email-spammers/smtp-relative'), Malware_Phishing_Guides=self.db.get('Malware/Phishing_Guides'), Malware_mass_scanners_exploit_scanners=self.db.get('Malware/mass-scanners/exploit_scanners'), Malware_exploits_scanner=self.db.get('Malware/exploits_scanner'), Malware_mass_exploiter=self.db.get('Malware/mass_exploiter'), Malware_worms=self.db.get('Malware/worms'), Malware_Ransomeware=self.db.get('Malware/Ransomeware'), Malware_root_kits=self.db.get('Malware/root-kits'), Malware_root_kits_Reverse_tcp=self.db.get('Malware/root-kits_Reverse_tcp'), Malware_root_kits_Encrypted=self.db.get('Malware/root-kits_Encrypted'), Malware_root_kits_irc=self.db.get('Malware/root-kits_irc'), Malware_root_kits_Sniffers=self.db.get('Malware/root-kits_Sniffers'), Malware_Ransomware=self.db.get('Malware/Ransomware'), Malware_Reverse_tcp=self.db.get('Malware/Reverse_tcp'), Malware_Encrypted=self.db.get('Malware/Encrypted'), Malware_Others=self.db.get('Malware/Others'), Lab_n_Scientific_Products=self.db.get("Lab_&_Scientific_Products"), Glassware_n_Labware=self.db.get("Glassware"), Lab_Chemicals=self.db.get("Lab_Chemicals"), Lab_Furniture=self.db.get("Lab_Furniture"), Lab_Instruments_n_Equipment=self.db.get("Lab_Instruments_&_Equipment"), Lab_Supplies_n_Consumables=self.db.get("Lab_Supplies_&_Consumables"), cfGuidess=self.db.get("cfGuidess"), CVV_n_Cards=self.db.get("CVV_n_Cards"), Accounts_Bank_Drops=self.db.get("Accounts_Bank_Drops"), cfOthers=self.db.get("cfOthers"), odays_hacking_phreaking=self.db.get("0days/hacking/phreaking"), private_exploits_hacking_phreaking=self.db.get("private-exploits/hacking/phreaking"), scanners_exploits_scanner_hacking_phreaking=self.db.get("scanners-exploits_scanner/hacking/phreaking"), scanners_mass_exploiter_hacking_phreaking=self.db.get("scanners-mass_exploiter/hacking/phreaking"), scanners_worms_hacking_phreaking=self.db.get("scanners-worms/hacking/phreaking"), root_kits_Reverse_tcp_hacking_phreaking=self.db.get("root-kits-Reverse_tcp/hacking/phreaking"), root_kits_udp_hacking_phreaking=self.db.get("root-kits-udp/hacking/phreaking"), root_kits_Encrypted_hacking_phreaking=self.db.get("root-kits-Encrypted/hacking/phreaking"), root_kits_bind_hacking_phreaking=self.db.get("root-kits-bind/hacking/phreaking"), root_kits_irc_hacking_phreaking=self.db.get("root-kits-irc/hacking/phreaking"), spammers_hacking_phreaking=self.db.get("spammers/hacking/phreaking"), Guides_ebooks_hacking_phreaking=self.db.get("Guides/ebooks/hacking/phreaking"), Technology_ebooks_hacking_phreaking=self.db.get("Technology/ebooks/hacking/phreaking"), Phising_hacking_phreaking=self.db.get("Phising/hacking/phreaking"), Templates_hacking_phreaking=self.db.get("Templates/hacking/phreaking"), Botnets_webui_hacking_phreaking=self.db.get("Botnets_webui/hacking/phreaking"), Exploit_kit_hacking_phreaking=self.db.get("Exploit-kit/hacking/phreaking"), Burners=self.db.get("Burners/Computer_equipment"), Devices=self.db.get("Devices/Computer equipment"), Simcards=self.db.get("Simcards/Computer_equipment"), weapons=self.db.get("weapons"), services_Carding_money=self.db.get("services/Carding/money"), service_Hacking=self.db.get("services/Hacking"), s_IDs_Passports=self.db.get("services/IDs_Passports"), s_Freelance=self.db.get("services/Freelance"), s_Others=self.db.get("services/s_Others"), various_source_codes=self.db.get("various_source_codes"), street_Activism=self.db.get("street/Activism"), Drugs=self.db.get("Drugs"), o_Collectibles=self.db.get("o_Collectibles"), Hosting_servers_socks=self.db.get("Hosting_servers_socks"), Cardin_Fraud=self.db.get("Carding/Fraud"), Activism=self.db.get("Activism"), Tutorials_howto_Guides_Ebooks=self.db.get("Tutorials/howto/Guides/E-books"), C_sharp_Software_scripts_source_codes=self.db.get("C-sharp/Software/scripts/source-codes"), Kitchen_Dining__Bar_Home_and_Garden=self.db.get("Kitchen_Dining_Bar/Home_and_Garden"), Hacking=self.db.get("Hacking"), sativa=self.db.get("sativa"), db_dumps_hacking_phreaking=self.db.get("db-dumps/hacking/phreaking"), armor_self_Weapons=self.db.get("armor/self/Weapons"), Spoofing_hacking_phreaking=self.db.get("Spoofing/hacking/phreaking"), Tools_hacking_phreaking=self.db.get("Tools/hacking/phreaking"), Services=self.db.get("Services"), C_Software_scripts_source_codes=self.db.get("C/Software/scripts/source-codes"), hacked_rooted_stuff_hacking_phreaking=self.db.get("hacked/rooted_stuff/hacking/phreaking"), Culture_Lab_supplies=self.db.get("Culture/Lab_supplies"), Others_hacking_phreaking=self.db.get("Others/hacking/phreaking"), Mysql_Software_scripts_source_codes=self.db.get("Mysql/Software/scripts/source-codes"), olab=self.db.get("olab"), Archives_Guides_Ebooks=self.db.get("Archives/Guides/E-books"), winston_Weapons=self.db.get("winston/Weapons"), phreaking_Guides_Ebooks=self.db.get("phreaking/Guides/E-books"), Hardware_parts_Computer_equipment=self.db.get("Hardware_parts/Computer equipment"), Seedboxes_Hosting_servers=self.db.get("Seedboxes/Hosting/servers"), Paint_spraycans_Art=self.db.get("Paint/spraycans/Art"), explosives_Weapons=self.db.get("explosives/Weapons"), Guides_Ebooks=self.db.get("Guides/E-books"), New_age_Music=self.db.get("New_age/Music"), Offshore_Hosting_servers=self.db.get("Offshore/Hosting/servers"), power_supply_Computer_equipment=self.db.get("power-supply/Computer_equipment"), lisp_Software_scripts_source_codes=self.db.get("lisp/Software/scripts/source-codes"), Hacking_Guides_Ebooks=self.db.get("Hacking/Guides/E-books"), XXX_Others=self.db.get("XXX/Others"), Harddrives_Computer_equipment=self.db.get("Harddrives/Computer_equipment"), leaked_documents_hacking_phreaking=self.db.get("leaked_documents/hacking/phreaking"), Trading_cards_Lab_supplies=self.db.get("Trading_cards/Lab_supplies"), Others_Guides_Ebooks=self.db.get("Others/Guides/E-books"), Pop_Music=self.db.get("Pop/Music"), Sculptures_Carvings_Art=self.db.get("Sculptures_Carvings/Art"), Paintings_Art=self.db.get("Paintings/Art"), others_Weapons=self.db.get("others/Weapons"), Security_Guides_Ebooks=self.db.get("Security/Guides/E-books"), Chassi_Computer_equipment=self.db.get("Chassi/Computer equipment"), machete_Weapons=self.db.get("machete/Weapons"), Meth=self.db.get("Meth"), indica=self.db.get("indica"), Full_root_Hosting_servers=self.db.get("Full_root/Hosting/servers"), Closed_Source_software_Software_scripts_source_codes=self.db.get("Closed_Source_software/Software/scripts/source-codes"), Psychedelics=self.db.get("Psychedelics"), Others_Hosting_servers=self.db.get("Others/Hosting/servers"), shift_Software_scripts_source_codes=self.db.get("shift/Software/scripts/source-codes"), Carded_Items_Electronics=self.db.get("Carded_Items/Electronics"), cpan_Hosting_servers=self.db.get("cpan_Hosting_servers"), ebooks_hacking_phreaking=self.db.get("ebooks/hacking/phreaking"), Drawings_Art=self.db.get("Drawings/Art"), Body_armor_Weapons=self.db.get("Body_armor/Weapons"), reverse_tcp_hacking_phreaking=self.db.get("reverse-tcp/hacking/phreaking"), Others_Computer_equipment=self.db.get("Others/Computer_equipment"), Proxy_Hosting_servers=self.db.get("Proxy/Hosting/servers"), Others_Home_and_Garden=self.db.get("Others/Home and_Garden"), Carded_Items=self.db.get("Carded_Items"), knifes_Weapons=self.db.get("knifes/Weapons"), Steroids=self.db.get("Steroids"), Others_Activism=self.db.get("Others/Activism"), Country_Music=self.db.get("Country/Music"), Lab_supplies=self.db.get("Lab_supplies"), Mirrors_Guides_Ebooks=self.db.get("Mirrors/Guides/E-books"), Collectibles=self.db.get("Collectibles"), phonenumbers_hacking_phreaking=self.db.get("phonenumbers/hacking/phreaking"), virtual_private_server_Hosting_servers=self.db.get("virtual_private_server/Hosting/servers"), ritalin=self.db.get("ritalin"), Databases_hacking_phreaking=self.db.get("Databases/hacking/phreaking"), bots_hacking_phreaking=self.db.get("bots/hacking/phreaking"), various_lists_hacking_phreaking=self.db.get("various-lists/hacking/phreaking"), wardialers_hacking_phreaking=self.db.get("wardialers/hacking/phreaking"), electronic_Music=self.db.get("electronic/Music"), Carded_Items_Clothes_Jewellery=self.db.get("Carded_Items/Clothes/Jewellery"), Opiods=self.db.get("Opiods"), Software_scripts_source_codes=self.db.get("Software_scripts_source_codes"), Weight_Loss=self.db.get("Weight_Loss"), Scanners_hacking_phreaking=self.db.get("Scanners/hacking/phreaking"), stuff_Custom_Orders=self.db.get("stuff/Custom_Orders"), Art=self.db.get("Art"), Trading_cards_Collectibles=self.db.get("Trading_cards/Collectibles"), reggae_Music=self.db.get("reggae/Music"), Perscription=self.db.get("Perscription"), Cocaine=self.db.get("Cocaine"), Pet_Supplies_Home_and_Garden=self.db.get("Pet_Supplies/Home_and_Garden"), Computers_Computer_equipment=self.db.get("Computers/Computer_equipment"), scanners_hacking_phreaking=self.db.get("scanners/hacking/phreaking"), rap_Music=self.db.get("rap/Music"), Cannabis=self.db.get("Cannabis"), Stickers_Activism=self.db.get("Stickers/Activism"), Rock_Music=self.db.get("Rock/Music"), Carding_money=self.db.get("Carding/money"), Hash=self.db.get("Hash"), Decorative_Collectibles=self.db.get("Decorative/Collectibles"), Custom_Orders=self.db.get("Custom_Orders"), Cplusplus_Software_scripts_source_codes=self.db.get("C++/Software/scripts/source-codes"), Shells_Hosting_servers=self.db.get("Shells/Hosting/servers"), Ram_Computer_equipment=self.db.get("Ram/Computer_equipment"), rifles_Weapons=self.db.get("rifles/Weapons"), vocals_Music=self.db.get("vocals/Music"), Clothes_Activism=self.db.get("Clothes/Activism"), Moderboards_Computer_equipment=self.db.get("Moderboards/Computer_equipment"), Paypal_hacking_phreaking=self.db.get("Paypal/hacking/phreaking"), Discography_Music=self.db.get("Discography/Music"), Benzos=self.db.get("Benzos"), Goverment_nation_information_hacking_phreaking=self.db.get("Goverment/nation_information/hacking/phreaking"), Folk_Music=self.db.get("Folk/Music"), Others_Custom_Orders=self.db.get("Others/Custom_Orders"), Rare_objects_Collectibles=self.db.get("Rare_objects/Collectibles"), carding_Custom_Orders=self.db.get("carding/Custom_Orders"), Graphic_cards_Computer_equipment=self.db.get("Graphic-cards/Computer_equipment"), Music=self.db.get("Music"), Shared_hosting_Hosting_servers=self.db.get("Shared_hosting/Hosting/servers"), Ammunition_Weapons=self.db.get("Ammunition/Weapons"), religious_Music=self.db.get("religious/Music"), bots_slaves_hacking_phreaking=self.db.get("bots/slaves/hacking/phreaking"), Stimulations=self.db.get("Stimulations"), hacking_phreaking_items=self.db.get("hacking/phreaking items"), emails_hacking_phreaking=self.db.get("emails/hacking/phreaking"), Home_and_Garden=self.db.get("Home_and_Garden"), Culture_Collectibles=self.db.get("Culture/Collectibles"), hacking_phreaking=self.db.get("hacking/phreaking"), irc_hacking_phreaking=self.db.get("irc/hacking/phreaking"), accounts_hacking_phreaking=self.db.get("accounts/hacking/phreaking"), industrial_information=self.db.get("Company/industrial information/hacking/phreaking"), pdf_hacking_phreaking=self.db.get("pdf/hacking/phreaking"), Others_Others=self.db.get("Others/Others"), Scripts_hacking_phreaking=self.db.get("Scripts/hacking/phreaking"), assembly_Software_scripts_source_codes=self.db.get("assembly/Software/scripts/source-codes"), Hybrid=self.db.get("Hybrid"), Crypto_Software_scripts_source_codes=self.db.get("Crypto/Software/scripts/source-codes"), Others_Music=self.db.get("Others/Music"), Anarchism_Guides_Ebooks=self.db.get("Anarchism/Guides/E-books"), Tutorials_hacking_phreaking=self.db.get("Tutorials/hacking/phreaking"), Artwork_Art=self.db.get("Artwork/Art"), emaillists_hacking_phreaking=self.db.get("emaillists/hacking/phreaking"), Carding_Guides_Ebooks=self.db.get("Carding/Guides/E-books"), Bash_Software_scripts_source_codes=self.db.get("Bash/Software/scripts/source-codes"), Rare_objects_Lab_supplies=self.db.get("Rare_objects/Lab_supplies"), Hosting_servers=self.db.get("Hosting/servers"), Clothes_Jewellery=self.db.get("Clothes/Jewellery"), Prints_Art=self.db.get("Prints/Art"), Others_Collectibles=self.db.get("Others/Collectibles"), IDs_Passports=self.db.get("IDs_Passports"), Blues_Music=self.db.get("Blues/Music"), Python_Software_scripts_source_codes=self.db.get("Python/Software/scripts/source-codes"), OthersD=self.db.get("OthersD"), Household_Supplies_&_Cleaning_Home_and_Garden=self.db.get("Household"), Ecstasy=self.db.get("Ecstasy"), Community_Art_Art=self.db.get("Community_Art/Art"), Pistols_Weapons=self.db.get("Pistols/Weapons"), Vps_virtual_private_servers_Hosting_servers=self.db.get("Vps/virtual private_servers/Hosting/servers"), Chemicals_Weapons=self.db.get("Chemicals/Weapons"), Home_Improvement_Home_and_Garden=self.db.get("Home_Improvement/Home_and_Garden"), Books_Activism=self.db.get("Books/Activism"), rootkits_hacking_phreaking=self.db.get("rootkits/hacking/phreaking"), backdoors_hacking_phreaking=self.db.get("backdoors/hacking/phreaking"), hacked_sites_hacking_phreaking=self.db.get("hacked_sites/hacking/phreaking"), Mdma=self.db.get("Mdma"), Others_Art=self.db.get("Others/Art"), hacked_vps_hacking_phreaking=self.db.get("hacked_vps/hacking/phreaking"), latin_Music=self.db.get("latin/Music"), Flags_Activism=self.db.get("Flags/Activism"), Proxies_and_vpns_and_shells_Hosting_servers=self.db.get("Proxies_and_vpns_and_shells/Hosting/servers"), amphetamine=self.db.get("amphetamine"), snipers_Weapons=self.db.get("snipers/Weapons"), nuclear_Weapons=self.db.get("nuclear/Weapons"), jazz_Music=self.db.get("jazz/Music"), Ebooks_Guides_Ebooks=self.db.get("Ebooks/Guides/E-books"), Perl_Software_scripts_source_codes=self.db.get("Perl/Software/scripts/source-codes"), Computer_equipment=self.db.get("Computer_equipment"), exploits_hacking_phreaking=self.db.get("exploits/hacking/phreaking"), Photos_Art=self.db.get("Photos/Art"), Others_Weapons=self.db.get("Others/Weapons"), Handguns_Weapons=self.db.get("Handguns/Weapons"), R_B_Music=self.db.get("R&B/Music"))]
  2727		entries3 = [dict(Malware=self.db.get('Malware'), Malware_Botnets_exploit_kits=self.db.get('Malware/Botnets/exploit_kits'), Malware_Botnets_webui=self.db.get('Malware/Botnets_webui'), Malware_Botnet_irc=self.db.get('Malware/Botnet_irc'), Malware_Exploit_kit=self.db.get('Malware/Exploit-kit'), Malware_Exploits_0days=self.db.get('Malware/Exploits/0days'), Malware_0days=self.db.get('Malware/0days'), Malware_private_exploits=self.db.get('Malware/private-exploits'), Malware_exploits=self.db.get('Malware/exploits'), Malware_Phishing=self.db.get('Malware/Phishing'), Malware_Phishing_Templates=self.db.get('Malware/Phishing_Templates'), Malware_Phishing_email_spammers_smtp_relative=self.db.get('Malware/Phishing_email-spammers/smtp-relative'), Malware_Phishing_Guides=self.db.get('Malware/Phishing_Guides'), Malware_mass_scanners_exploit_scanners=self.db.get('Malware/mass-scanners/exploit_scanners'),  Malware_exploits_scanner=self.db.get('Malware/exploits_scanner'), Malware_mass_exploiter=self.db.get('Malware/mass_exploiter'), Malware_worms=self.db.get('Malware/worms'), Malware_Ransomeware=self.db.get('Malware/Ransomeware'), Malware_root_kits=self.db.get('Malware/root-kits'), Malware_root_kits_Reverse_tcp=self.db.get('Malware/root-kits_Reverse_tcp'), Malware_root_kits_Encrypted=self.db.get('Malware/root-kits_Encrypted'), Malware_root_kits_irc=self.db.get('Malware/root-kits_irc'), Malware_root_kits_Sniffers=self.db.get('Malware/root-kits_Sniffers'), Malware_Ransomware=self.db.get('Malware/Ransomware'), Malware_Reverse_tcp=self.db.get('Malware/Reverse_tcp'), Malware_Encrypted=self.db.get('Malware/Encrypted'), Malware_Others=self.db.get('Malware/Others'), Lab_n_Scientific_Products=self.db.get("Lab_&_Scientific_Products"), Glassware_n_Labware=self.db.get("Glassware"), Lab_Chemicals=self.db.get("Lab_Chemicals"), Lab_Furniture=self.db.get("Lab_Furniture"), Lab_Instruments_n_Equipment=self.db.get("Lab_Instruments_&_Equipment"), Lab_Supplies_n_Consumables=self.db.get("Lab_Supplies_&_Consumables"), cfGuidess=self.db.get("cfGuidess"), CVV_n_Cards=self.db.get("CVV_n_Cards"), Accounts_Bank_Drops=self.db.get("Accounts_Bank_Drops"), cfOthers=self.db.get("cfOthers"), odays_hacking_phreaking=self.db.get("0days/hacking/phreaking"), private_exploits_hacking_phreaking=self.db.get("private-exploits/hacking/phreaking"), scanners_exploits_scanner_hacking_phreaking=self.db.get("scanners-exploits_scanner/hacking/phreaking"), scanners_mass_exploiter_hacking_phreaking=self.db.get("scanners-mass_exploiter/hacking/phreaking"), scanners_worms_hacking_phreaking=self.db.get("scanners-worms/hacking/phreaking"), root_kits_Reverse_tcp_hacking_phreaking=self.db.get("root-kits-Reverse_tcp/hacking/phreaking"), root_kits_udp_hacking_phreaking=self.db.get("root-kits-udp/hacking/phreaking"), root_kits_Encrypted_hacking_phreaking=self.db.get("root-kits-Encrypted/hacking/phreaking"), root_kits_bind_hacking_phreaking=self.db.get("root-kits-bind/hacking/phreaking"), root_kits_irc_hacking_phreaking=self.db.get("root-kits-irc/hacking/phreaking"), spammers_hacking_phreaking=self.db.get("spammers/hacking/phreaking"), Guides_ebooks_hacking_phreaking=self.db.get("Guides/ebooks/hacking/phreaking"), Technology_ebooks_hacking_phreaking=self.db.get("Technology/ebooks/hacking/phreaking"), Phising_hacking_phreaking=self.db.get("Phising/hacking/phreaking"), Templates_hacking_phreaking=self.db.get("Templates/hacking/phreaking"), Botnets_webui_hacking_phreaking=self.db.get("Botnets_webui/hacking/phreaking"), Exploit_kit_hacking_phreaking=self.db.get("Exploit-kit/hacking/phreaking"), Burners=self.db.get("Burners/Computer_equipment"), Devices=self.db.get("Devices/Computer equipment"), Simcards=self.db.get("Simcards/Computer_equipment"), weapons=self.db.get("weapons"), services_Carding_money=self.db.get("services/Carding/money"), service_Hacking=self.db.get("services/Hacking"), s_IDs_Passports=self.db.get("services/IDs_Passports"), s_Freelance=self.db.get("services/Freelance"), s_Others=self.db.get("services/s_Others"), various_source_codes=self.db.get("various_source_codes"), street_Activism=self.db.get("street/Activism"), Drugs=self.db.get("Drugs"), o_Collectibles=self.db.get("o_Collectibles"), Hosting_servers_socks=self.db.get("Hosting_servers_socks"), Cardin_Fraud=self.db.get("Carding/Fraud"), Activism=self.db.get("Activism"), Tutorials_howto_Guides_Ebooks=self.db.get("Tutorials/howto/Guides/E-books"), C_sharp_Software_scripts_source_codes=self.db.get("C-sharp/Software/scripts/source-codes"), Kitchen_Dining__Bar_Home_and_Garden=self.db.get("Kitchen_Dining_Bar/Home_and_Garden"), Hacking=self.db.get("Hacking"), sativa=self.db.get("sativa"), db_dumps_hacking_phreaking=self.db.get("db-dumps/hacking/phreaking"), armor_self_Weapons=self.db.get("armor/self/Weapons"), Spoofing_hacking_phreaking=self.db.get("Spoofing/hacking/phreaking"), Tools_hacking_phreaking=self.db.get("Tools/hacking/phreaking"), Services=self.db.get("Services"), C_Software_scripts_source_codes=self.db.get("C/Software/scripts/source-codes"), hacked_rooted_stuff_hacking_phreaking=self.db.get("hacked/rooted_stuff/hacking/phreaking"), Culture_Lab_supplies=self.db.get("Culture/Lab_supplies"), Others_hacking_phreaking=self.db.get("Others/hacking/phreaking"), Mysql_Software_scripts_source_codes=self.db.get("Mysql/Software/scripts/source-codes"), olab=self.db.get("olab"), Archives_Guides_Ebooks=self.db.get("Archives/Guides/E-books"), winston_Weapons=self.db.get("winston/Weapons"), phreaking_Guides_Ebooks=self.db.get("phreaking/Guides/E-books"), Hardware_parts_Computer_equipment=self.db.get("Hardware_parts/Computer equipment"), Seedboxes_Hosting_servers=self.db.get("Seedboxes/Hosting/servers"), Paint_spraycans_Art=self.db.get("Paint/spraycans/Art"), explosives_Weapons=self.db.get("explosives/Weapons"), Guides_Ebooks=self.db.get("Guides/E-books"), New_age_Music=self.db.get("New_age/Music"), Offshore_Hosting_servers=self.db.get("Offshore/Hosting/servers"), power_supply_Computer_equipment=self.db.get("power-supply/Computer_equipment"), lisp_Software_scripts_source_codes=self.db.get("lisp/Software/scripts/source-codes"), Hacking_Guides_Ebooks=self.db.get("Hacking/Guides/E-books"), XXX_Others=self.db.get("XXX/Others"), Harddrives_Computer_equipment=self.db.get("Harddrives/Computer_equipment"), leaked_documents_hacking_phreaking=self.db.get("leaked_documents/hacking/phreaking"), Trading_cards_Lab_supplies=self.db.get("Trading_cards/Lab_supplies"), Others_Guides_Ebooks=self.db.get("Others/Guides/E-books"), Pop_Music=self.db.get("Pop/Music"), Sculptures_Carvings_Art=self.db.get("Sculptures_Carvings/Art"), Paintings_Art=self.db.get("Paintings/Art"), others_Weapons=self.db.get("others/Weapons"), Security_Guides_Ebooks=self.db.get("Security/Guides/E-books"), Chassi_Computer_equipment=self.db.get("Chassi/Computer equipment"), machete_Weapons=self.db.get("machete/Weapons"), Meth=self.db.get("Meth"), indica=self.db.get("indica"), Full_root_Hosting_servers=self.db.get("Full_root/Hosting/servers"), Closed_Source_software_Software_scripts_source_codes=self.db.get("Closed_Source_software/Software/scripts/source-codes"), Psychedelics=self.db.get("Psychedelics"), Others_Hosting_servers=self.db.get("Others/Hosting/servers"), shift_Software_scripts_source_codes=self.db.get("shift/Software/scripts/source-codes"), Carded_Items_Electronics=self.db.get("Carded_Items/Electronics"), cpan_Hosting_servers=self.db.get("cpan_Hosting_servers"), ebooks_hacking_phreaking=self.db.get("ebooks/hacking/phreaking"), Drawings_Art=self.db.get("Drawings/Art"), Body_armor_Weapons=self.db.get("Body_armor/Weapons"), reverse_tcp_hacking_phreaking=self.db.get("reverse-tcp/hacking/phreaking"), Others_Computer_equipment=self.db.get("Others/Computer_equipment"), Proxy_Hosting_servers=self.db.get("Proxy/Hosting/servers"), Others_Home_and_Garden=self.db.get("Others/Home and_Garden"), Carded_Items=self.db.get("Carded_Items"), knifes_Weapons=self.db.get("knifes/Weapons"), Steroids=self.db.get("Steroids"), Others_Activism=self.db.get("Others/Activism"), Country_Music=self.db.get("Country/Music"), Lab_supplies=self.db.get("Lab_supplies"), Mirrors_Guides_Ebooks=self.db.get("Mirrors/Guides/E-books"), Collectibles=self.db.get("Collectibles"), phonenumbers_hacking_phreaking=self.db.get("phonenumbers/hacking/phreaking"), virtual_private_server_Hosting_servers=self.db.get("virtual_private_server/Hosting/servers"), ritalin=self.db.get("ritalin"), Databases_hacking_phreaking=self.db.get("Databases/hacking/phreaking"), bots_hacking_phreaking=self.db.get("bots/hacking/phreaking"), various_lists_hacking_phreaking=self.db.get("various-lists/hacking/phreaking"), wardialers_hacking_phreaking=self.db.get("wardialers/hacking/phreaking"), electronic_Music=self.db.get("electronic/Music"), Carded_Items_Clothes_Jewellery=self.db.get("Carded_Items/Clothes/Jewellery"), Opiods=self.db.get("Opiods"), Software_scripts_source_codes=self.db.get("Software_scripts_source_codes"), Weight_Loss=self.db.get("Weight_Loss"), Scanners_hacking_phreaking=self.db.get("Scanners/hacking/phreaking"), stuff_Custom_Orders=self.db.get("stuff/Custom_Orders"), Art=self.db.get("Art"), Trading_cards_Collectibles=self.db.get("Trading_cards/Collectibles"), reggae_Music=self.db.get("reggae/Music"), Perscription=self.db.get("Perscription"), Cocaine=self.db.get("Cocaine"), Pet_Supplies_Home_and_Garden=self.db.get("Pet_Supplies/Home_and_Garden"), Computers_Computer_equipment=self.db.get("Computers/Computer_equipment"), scanners_hacking_phreaking=self.db.get("scanners/hacking/phreaking"), rap_Music=self.db.get("rap/Music"), Cannabis=self.db.get("Cannabis"), Stickers_Activism=self.db.get("Stickers/Activism"), Rock_Music=self.db.get("Rock/Music"), Carding_money=self.db.get("Carding/money"), Hash=self.db.get("Hash"), Decorative_Collectibles=self.db.get("Decorative/Collectibles"), Custom_Orders=self.db.get("Custom_Orders"), Cplusplus_Software_scripts_source_codes=self.db.get("C++/Software/scripts/source-codes"), Shells_Hosting_servers=self.db.get("Shells/Hosting/servers"), Ram_Computer_equipment=self.db.get("Ram/Computer_equipment"), rifles_Weapons=self.db.get("rifles/Weapons"), vocals_Music=self.db.get("vocals/Music"), Clothes_Activism=self.db.get("Clothes/Activism"), Moderboards_Computer_equipment=self.db.get("Moderboards/Computer_equipment"), Paypal_hacking_phreaking=self.db.get("Paypal/hacking/phreaking"), Discography_Music=self.db.get("Discography/Music"), Benzos=self.db.get("Benzos"), Goverment_nation_information_hacking_phreaking=self.db.get("Goverment/nation_information/hacking/phreaking"), Folk_Music=self.db.get("Folk/Music"), Others_Custom_Orders=self.db.get("Others/Custom_Orders"), Rare_objects_Collectibles=self.db.get("Rare_objects/Collectibles"), carding_Custom_Orders=self.db.get("carding/Custom_Orders"), Graphic_cards_Computer_equipment=self.db.get("Graphic-cards/Computer_equipment"), Music=self.db.get("Music"), Shared_hosting_Hosting_servers=self.db.get("Shared_hosting/Hosting/servers"), Ammunition_Weapons=self.db.get("Ammunition/Weapons"), religious_Music=self.db.get("religious/Music"), bots_slaves_hacking_phreaking=self.db.get("bots/slaves/hacking/phreaking"), Stimulations=self.db.get("Stimulations"), hacking_phreaking_items=self.db.get("hacking/phreaking items"), emails_hacking_phreaking=self.db.get("emails/hacking/phreaking"), Home_and_Garden=self.db.get("Home_and_Garden"), Culture_Collectibles=self.db.get("Culture/Collectibles"), hacking_phreaking=self.db.get("hacking/phreaking"), irc_hacking_phreaking=self.db.get("irc/hacking/phreaking"), accounts_hacking_phreaking=self.db.get("accounts/hacking/phreaking"), industrial_information=self.db.get("Company/industrial information/hacking/phreaking"), pdf_hacking_phreaking=self.db.get("pdf/hacking/phreaking"), Others_Others=self.db.get("Others/Others"), Scripts_hacking_phreaking=self.db.get("Scripts/hacking/phreaking"), assembly_Software_scripts_source_codes=self.db.get("assembly/Software/scripts/source-codes"), Hybrid=self.db.get("Hybrid"), Crypto_Software_scripts_source_codes=self.db.get("Crypto/Software/scripts/source-codes"), Others_Music=self.db.get("Others/Music"), Anarchism_Guides_Ebooks=self.db.get("Anarchism/Guides/E-books"), Tutorials_hacking_phreaking=self.db.get("Tutorials/hacking/phreaking"), Artwork_Art=self.db.get("Artwork/Art"), emaillists_hacking_phreaking=self.db.get("emaillists/hacking/phreaking"), Carding_Guides_Ebooks=self.db.get("Carding/Guides/E-books"), Bash_Software_scripts_source_codes=self.db.get("Bash/Software/scripts/source-codes"), Rare_objects_Lab_supplies=self.db.get("Rare_objects/Lab_supplies"), Hosting_servers=self.db.get("Hosting/servers"), Clothes_Jewellery=self.db.get("Clothes/Jewellery"), Prints_Art=self.db.get("Prints/Art"), Others_Collectibles=self.db.get("Others/Collectibles"), IDs_Passports=self.db.get("IDs_Passports"), Blues_Music=self.db.get("Blues/Music"), Python_Software_scripts_source_codes=self.db.get("Python/Software/scripts/source-codes"), OthersD=self.db.get("OthersD"), Household_Supplies__Cleaning_Home_and_Garden=self.db.get("Household"), Ecstasy=self.db.get("Ecstasy"), Community_Art_Art=self.db.get("Community_Art/Art"), Pistols_Weapons=self.db.get("Pistols/Weapons"), Vps_virtual_private_servers_Hosting_servers=self.db.get("Vps/virtual private_servers/Hosting/servers"), Chemicals_Weapons=self.db.get("Chemicals/Weapons"), Home_Improvement_Home_and_Garden=self.db.get("Home_Improvement/Home_and_Garden"), Books_Activism=self.db.get("Books/Activism"), rootkits_hacking_phreaking=self.db.get("rootkits/hacking/phreaking"), backdoors_hacking_phreaking=self.db.get("backdoors/hacking/phreaking"), hacked_sites_hacking_phreaking=self.db.get("hacked_sites/hacking/phreaking"), Mdma=self.db.get("Mdma"), Others_Art=self.db.get("Others/Art"), hacked_vps_hacking_phreaking=self.db.get("hacked_vps/hacking/phreaking"), latin_Music=self.db.get("latin/Music"), Flags_Activism=self.db.get("Flags/Activism"), Proxies_and_vpns_and_shells_Hosting_servers=self.db.get("Proxies_and_vpns_and_shells/Hosting/servers"), amphetamine=self.db.get("amphetamine"), snipers_Weapons=self.db.get("snipers/Weapons"), nuclear_Weapons=self.db.get("nuclear/Weapons"), jazz_Music=self.db.get("jazz/Music"), Ebooks_Guides_Ebooks=self.db.get("Ebooks/Guides/E-books"), Perl_Software_scripts_source_codes=self.db.get("Perl/Software/scripts/source-codes"), Computer_equipment=self.db.get("Computer_equipment"), exploits_hacking_phreaking=self.db.get("exploits/hacking/phreaking"), Photos_Art=self.db.get("Photos/Art"), Others_Weapons=self.db.get("Others/Weapons"), Handguns_Weapons=self.db.get("Handguns/Weapons"), R_B_Music=self.db.get("R&B/Music"))]
  2728		return entries3
  2729	
  2730	
  2731	
  2732	def export_member_key(nick):
  2733	    blah = 'Member does not have a pgp key'
  2734	    db = connectvens()
  2735	    qeadzc = db.cursor()
  2736	    qeadzc.execute('select pgp from vens where nick=%s', (nick,))
  2737	    qweasd = qeadzc.fetchone()
  2738	    db.close()
  2739	    if qweasd:
  2740		if len(qweasd[0]) > 4:
  2741		    blah = gpg.export_keys(qweasd[0])
  2742		else:
  2743		    pass
  2744	    return blah
  2745	
  2746	
  2747	
  2748	#html
  2749	class wl_html_cache(object):
  2750	    def __init__(self):
  2751		"""caches all static sites"""
  2752		self.cache = mincache
  2753		#self.page = page
  2754		self.logger = logging.getLogger('wl_html_cache')
  2755	        self.typelist = {"gateway": "gateway.html",'newinfo':'new/info.html',  'newnews':'new/news.html', "signup": "signup.html", "toplist": "toplist.html", "info":"info.html", "get_started": "get_started.html", "additem": "additem.html", "vendor_info": "vendor_info.html", "addauctions": "addauctions.html", "member": "member.html", "paste": "paste.html", "support": "support.html", "about": "about.html", "tos": "tos.html", "awall": "awall.html", "banlist": "banlist.html", "faq": "faq.html", "invite": "invite.html", "settings": "settings.html", "item": "item.html", "inbox": "inbox.html", "inboxread": "inboxread.html", "writemsg": "writemsg.html", "create_trade": "create_trade.html", 'tgol': 'tgol.html', 'rss': 'rss.xml', 'news': 'news.html'}
  2756		#self.cachedate = mincache['html_time']
  2757		#self.returntemplate = flask.render_template
  2758		
  2759	
  2760	    def get_news(self):
  2761		return self.cache['news']
  2762		
  2763	    def get_page2(self, page, funktion):
  2764		return get_page(page, funktion)
  2765		#if self.typelist.__contains__(page):
  2766		    #print self.typelist[page]
  2767		    #return flask.render_template(self.typelist[page])
  2768		#else:
  2769		    #return 'invalid page'
  2770	#def (self, funktion, page)
  2771	#pass with function flask.render_template()	
  2772		
  2773	    def return_page(self, page, funktion):
  2774		""" main func"""
  2775		self.check_cache(funktion)
  2776		page = 't_' + page
  2777		return mincache[page]
  2778	   
  2779	    def return_wlk(self):
  2780		return mincache['wlk']
  2781	
  2782	#mental note - generate ur key before importing anything else
  2783	    def gimmewlkya(self):
  2784		kya = gpg.export_keys(gpg.list_keys()[0]['fingerprint']).replace('-----BEGIN PGP PUBLIC KEY BLOCK-----\n', '-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: WarezLoader\n') #export the first pgp key 
  2785		bler = '''
  2786		<html>
  2787		<title>Warezloader PGP Key</title>
  2788		<center>
  2789		<t>this is our offical key make sure all u get that is encrypted with pgp from wl is signed with this key else something is wrong</t><br><br>
  2790		<h1>Warezloaders offical pgp key</h1>
  2791		<br><br><br>
  2792		<pre><code>
  2793		''' + kya + '''
  2794			       </html>    
  2795		
  2796		    '''	
  2797		return bler
  2798		
  2799	    def update_cache(self, funktion):
  2800		#self.returntemplate(self.typelist[page])
  2801		db = connectnews()
  2802		dd = db.cursor()
  2803		dd.execute('select datu, news from news order by news_id desc limit 4')
  2804		entries = dd.fetchall()
  2805		db.close()	
  2806		self.cache['news'] = entries
  2807		self.cache['wlk'] = self.gimmewlkya()
  2808		self.cache["t_gateway"] = self.get_page2("gateway", funktion)
  2809		self.cache["t_member"] = self.get_page2("member", funktion)
  2810		self.cache["t_paste"] = self.get_page2("paste", funktion)
  2811		self.cache["t_support"] = self.get_page2("support", funktion)
  2812		self.cache["t_about"] = self.get_page2("about", funktion)
  2813		self.cache["t_tos"] = self.get_page2("tos", funktion)
  2814	        self.cache['t_newinfo'] = self.get_page2('newinfo', funktion)
  2815	        self.cache['t_newnews'] = self.get_page2('newnews', funktion)
  2816		self.cache["t_awall"] = self.get_page2("awall", funktion)
  2817		self.cache["t_banlist"] = self.get_page2("banlist", funktion)
  2818		self.cache["t_faq"] = self.get_page2("faq", funktion)
  2819		self.cache["t_invite"] = self.get_page2("invite", funktion)
  2820		self.cache["t_settings"] = self.get_page2("settings", funktion)
  2821		self.cache["t_item"] = self.get_page2("item", funktion)
  2822		self.cache["t_inbox"] = self.get_page2("inbox", funktion)
  2823		self.cache["t_inboxread"] = self.get_page2("inboxread", funktion)
  2824		self.cache["t_writemsg"] = self.get_page2("writemsg", funktion)
  2825		self.cache["t_create_trade"] = self.get_page2("create_trade", funktion)	
  2826		self.cache["t_toplist"] = self.get_page2("toplist", funktion)
  2827		self.cache["t_tgol"] = self.get_page2("tgol", funktion)
  2828		self.cache["t_news"] = self.get_page2("news", funktion)
  2829		self.cache["t_rss"] = self.get_page2("rss", funktion)
  2830		self.cache["t_info"] = self.get_page2("info", funktion)
  2831		self.cache["t_additem"] = self.get_page2("additem", funktion)
  2832		self.cache["t_addauctions"] = self.get_page2("addauctions", funktion)
  2833		self.cache["t_vendor_info"] = self.get_page2("vendor_info", funktion)
  2834		self.cache["t_get_started"] = self.get_page2("get_started", funktion)
  2835		self.cache["t_signup"] = self.get_page2("signup", funktion)
  2836		coinztx().update()#also autoupdate coinz
  2837		return ''
  2838		
  2839	    def check_cache(self, funktion):
  2840		self.logger.debug('check_cache called')
  2841		a = datetime.datetime.time(datetime.datetime.now())
  2842		a2 = str(a)[:2]
  2843		if self.cache['html_time'] == a2:
  2844		    self.logger.debug('cache is not updated')
  2845		    pass
  2846		    #return False
  2847		else:
  2848		    self.cache["html_time"] = str(a)[:2]
  2849		    self.update_cache(funktion)
  2850		    self.logger.debug('cache update')
  2851		    #self.mycache["html_time"] = str(a)[:2]
  2852		    pass
  2853		    #return True
  2854	
  2855	
  2856	#mincache["t_gateway"] = wl_html_cache().get_page2("gateway", flask.render_template)
  2857	#mincache["t_member"] = wl_html_cache().get_page2("member", flask.render_template)
  2858	#mincache["t_paste"] = wl_html_cache().get_page2("paste", flask.render_template)
  2859	#mincache["t_support"] = wl_html_cache().get_page2("support", flask.render_template)
  2860	#mincache["t_about"] = wl_html_cache().get_page2("about", flask.render_template)
  2861	#mincache["t_tos"] = wl_html_cache().get_page2("tos", flask.render_template)
  2862	#mincache["t_awall"] = wl_html_cache().get_page2("awall", flask.render_template)
  2863	#mincache["t_banlist"] = wl_html_cache().get_page2("banlist", flask.render_template)
  2864	#mincache["t_faq"] = wl_html_cache().get_page2("faq", flask.render_template)
  2865	#mincache["t_invite"] = wl_html_cache().get_page2("invite", flask.render_template)
  2866	#mincache["t_settings"] = wl_html_cache().get_page2("settings", flask.render_template)
  2867	#mincache["t_item"] = wl_html_cache().get_page2("item", flask.render_template)
  2868	#mincache["t_inbox"] = wl_html_cache().get_page2("inbox", flask.render_template)
  2869	#mincache["t_inboxread"] = wl_html_cache().get_page2("inboxread", flask.render_template)
  2870	#mincache["t_writemsg"] = wl_html_cache().get_page2("writemsg", flask.render_template)
  2871	#mincache["t_create_trade"] = wl_html_cache().get_page2("create_trade", flask.render_template)
  2872	#mincache["t_signup"] = self.get_page2("signup", flask.render_template)
  2873	
  2874	def finished_trade(trade_id, vendor):
  2875	    db = connecttrade()
  2876	    qwe = db.cursor()
  2877	    qwe.execute('update trade set accepted=%s where trade_id=%s and trade_t0=%s or trade_fr0m=%s', ('finished',trade_id,vendor,vendor))
  2878	    db.commit()
  2879	    db.close()
  2880	    return True
  2881			
  2882	#check out trade
  2883	@wl.route('/trade/<tradeid>', methods=['POST', 'GET'])
  2884	@wl.route('/trades/<tradeid>', methods=['POST', 'GET'])
  2885	@noindex
  2886	@adate
  2887	@axss
  2888	@af
  2889	def checkouttrade(tradeid):
  2890	    if flask.session.has_key('special') and flask.session:
  2891		if not vertify_session(flask.session['special']):
  2892		    return flask.redirect(flask.url_for('choice_mode'))
  2893		pass
  2894	    else:
  2895		return flask.redirect(flask.url_for('choice_mode'))     
  2896	
  2897	
  2898	    if flask.request.method == "POST":
  2899		if flask.session.has_key('special') and flask.session:
  2900		    if not vertify_session(flask.session['special']):
  2901			return flask.redirect(flask.url_for('choice_mode'))
  2902		    pass
  2903		else:
  2904		    return flask.redirect(flask.url_for('choice_mode')) 
  2905		error = False
  2906		db = connecttrade() #thread the connection
  2907		ga = db.cursor()
  2908		ag = ga
  2909		pq = ag	
  2910		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2911		coincoin = flask.request.form.get('coincoin')
  2912		finshedtr = flask.request.form.get('finishedorder')
  2913		if coincoin:
  2914		    ga.execute('delete from trade where trade_id=%s and trade_t0=%s', (tradeid, nick))
  2915		    db.commit()
  2916		    error = 'trade deleted'
  2917		elif finshedtr:
  2918		    finished_trade(tradeid, nick)
  2919		    error = 'This trade is finished'
  2920		#send msgs to usr regarding:
  2921		else:
  2922		    tradewhere = '/trades/' + tradeid
  2923		    srq = flask.request.form.get('reply')
  2924		    msg = str('trade has been updated by ' + nick + ' check it out at ' + tradewhere)
  2925		    title = str('trade has been updated by ' + nick)
  2926		    ag.execute('select trade_fr0m from trade where trade_id=%s', (tradeid,))
  2927		    abgc = ag.fetchone()
  2928		    if not abgc:
  2929			pass
  2930		    else:
  2931			tooo = abgc[0]
  2932			error = 'Request sent to ' + nick
  2933			fr = 'warezloader_bot'
  2934			srq = nick +':  ' + srq
  2935			if not nick == tooo:
  2936			    senduser2(tooo, fr, msg, title)
  2937			ga = db.cursor()
  2938			ga.execute('update trade set response=%s where trade_id=%s', (srq, tradeid))
  2939		    
  2940		entries2 = wl_entries_cache().give_me_entries()
  2941		ag.execute('select trade_name, trade_des, trade_piclink, trade_fr0m, trade_category, trade_want, accepted, amount from trade where trade_id=%s', (tradeid,))
  2942		entries = [dict(name=row[0], des=row[1], piclink=row[2], fr0m=row[3], cat=row[4], want=row[5], accept=row[6], amount=row[7]) for row in ag.fetchall()]
  2943		db.commit()
  2944		db.close()	
  2945		return flask.render_template('checkouttrade.html', newsentries=wl_html_cache().get_news(), emnick=nick, entries=entries, mess=getmsgs(), error=error, entries2=entries2)
  2946	
  2947	
  2948	    db = connecttrade() #thread the connection
  2949	    ga = db.cursor()
  2950	    ag = ga
  2951	    pq = ag
  2952	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  2953	    entries2 = wl_entries_cache().give_me_entries()
  2954	    
  2955	    #ga.execute('select trade_des from trade where trade_id=%s and trade_t0=%s', (tradeid, nick))
  2956	    ga.execute('select trade_des, trade_t0, trade_fr0m from trade where trade_id=%s and trade_t0=%s or trade_fr0m=%s and trade_id=%s', (tradeid,nick,nick,tradeid))    
  2957	    
  2958	    if not ga.fetchone():
  2959		return flask.redirect('/mytrades', code=302)
  2960	
  2961	    pq.execute('select accepted from trade where trade_id=%s', (tradeid,))
  2962	    if 'looked at'==pq.fetchone()[0]:
  2963		pq.execute('update trade set accepted=%s where trade_id=%s', ('looked at', tradeid))	
  2964		pass
  2965	    else:	
  2966		pass
  2967	    
  2968	    
  2969	    db.commit()
  2970	    ag.execute('select trade_name, trade_des, trade_piclink, trade_fr0m, trade_category, trade_want, accepted, amount from trade where trade_id=%s', (tradeid,))
  2971	    entries = [dict(name=row[0], des=row[1], piclink=row[2], fr0m=row[3], cat=row[4], want=row[5], accept=row[6], amount=row[7]) for row in ag.fetchall()]
  2972	    ip = pq
  2973	    response = 'tye'
  2974	    #if response show it else fuck off
  2975	    ip.execute('select response from trade where trade_id=%s', (tradeid,))
  2976	    w = ip.fetchone()
  2977	    if w[0]:
  2978		response = w[0]
  2979		pass
  2980	    else:
  2981		response = False#'s'
  2982		pass
  2983	
  2984	#fix
  2985	
  2986	    db.close()
  2987	    
  2988	    #response = 'hi'
  2989	    return flask.render_template('checkouttrade.html', newsentries=wl_html_cache().get_news(), resp=response, entries=entries, entries2=entries2, mess=getmsgs(), emnick=nick)
  2990	
  2991	
  2992	@wl.route('/mytrades/sort')
  2993	@noindex
  2994	@adate
  2995	@axss
  2996	@af
  2997	def mytradesort():
  2998	    if flask.session.has_key('special') and flask.session:
  2999		if not vertify_session(flask.session['special']):
  3000		    return flask.redirect(flask.url_for('choice_mode'))
  3001		pass
  3002	    else:
  3003		return flask.redirect(flask.url_for('choice_mode')) 
  3004	
  3005	
  3006	    db = connecttrade()
  3007	    tw = db.cursor()
  3008	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
  3009	    tw.execute('select trade_id, trade_name, trade_des, accepted, trade_price, trade_fr0m, trade_category, amount, trade_piclink from trade where trade_t0=%s and accepted=%s order by accepted desc', (nick, 'unchecked'))
  3010	    entries = [dict(tiid=row[0], name=row[1], des=row[2], accepted=row[3], price=row[4], fr0m=row[5], cat=row[6], amount=row[7], piclink=row[8]) for row in tw.fetchall()]
  3011	    entries2 = wl_entries_cache().give_me_entries()
  3012		    
  3013	    db.close()
  3014	    return flask.render_template('mytrades.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), entries=entries, entries2=entries2)
  3015	
  3016	
  3017	@wl.route('/mytrades/ongoing', methods=['POST', 'GET'])
  3018	@noindex
  3019	@adate
  3020	@axss
  3021	@af
  3022	def ongoing_trades():
  3023	    if flask.session.has_key('special') and flask.session:
  3024		if not vertify_session(flask.session['special']):
  3025		    return flask.redirect(flask.url_for('choice_mode'))
  3026		pass
  3027	    else:
  3028		return flask.redirect(flask.url_for('choice_mode'))      
  3029	
  3030	    db = connecttrade()
  3031	    tw = db.cursor()
  3032	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
  3033	    tw.execute('select trade_id, trade_name, trade_des, accepted, trade_price, trade_fr0m, trade_category, amount, trade_piclink from trade where trade_t0=%s and accepted=%s or trade_fr0m=%s and accepted=%s', (nick, 'accepted', nick, 'accepted'))
  3034	    entries = [dict(tiid=row[0], name=row[1], des=row[2], accepted=row[3], price=row[4], fr0m=row[5], cat=row[6], amount=row[7], piclink=row[8]) for row in tw.fetchall()]
  3035	    entries2 = wl_entries_cache().give_me_entries()
  3036	    db.close()    
  3037	    return flask.render_template('ongoingtrades.html', newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, entries=entries, mess=getmsgs())
  3038	
  3039	
  3040	#future stuff
  3041	#alter table orders add column expires date
  3042	def expire_finished_order(nick, datum, order_name):
  3043	    return True
  3044	
  3045	#auto delete older orders
  3046	def clean_expired_orders():
  3047	    db = connectorders()
  3048	    title = 'Order automatically finished'
  3049	    message = '''Your order {} with item {} has not been updated for the last 30 days so we have automatically closed it for you.
  3050	    The Vendor {} has received the payment'''.format(ordername, itemname, vendorname)
  3051	    senduser2(user, 'warezloader-order-bot', message, title)
  3052	
  3053	#coinz coinz coinz
  3054	
  3055	
  3056	#select untouched stuff
  3057	@wl.route('/mytrades/')
  3058	@wl.route('/mytrades', methods=['POST', 'GET'])
  3059	@noindex
  3060	@adate
  3061	@axss
  3062	@af
  3063	def mytrade():
  3064	#add nick protect    
  3065	    if flask.session.has_key('special') and flask.session:
  3066		if not vertify_session(flask.session['special']):
  3067		    return flask.redirect(flask.url_for('choice_mode'))
  3068		pass
  3069	    else:
  3070		return flask.redirect(flask.url_for('choice_mode'))     
  3071	
  3072	
  3073	    if flask.request.method == 'POST':
  3074		if flask.session.has_key('special') and flask.session:
  3075		    if not vertify_session(flask.session['special']):
  3076			return flask.redirect(flask.url_for('choice_mode'))
  3077		    pass
  3078		else:
  3079		    return flask.redirect(flask.url_for('choice_mode')) 	
  3080		yupp = flask.request.form.get('yes')
  3081		nope = flask.request.form.get('no')
  3082		if nope:
  3083		    er = nope
  3084		    db = connecttrade()
  3085		    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])   #decode it add 
  3086		    
  3087		    yt = db.cursor()
  3088		    nope = int(nope)
  3089		    ps = yt
  3090		    ps.execute('select mac from trade where trade_id=%s and trade_t0=%s', (nope, nick))
  3091		    macen = ps.fetchone()[0]
  3092		    yt.execute('delete from trade where mac=%s', (macen,))
  3093		    db.commit()
  3094		    db.close()
  3095		    er = str('trade deleted with number:' + er) 
  3096		    pass 
  3097		else:
  3098		    er = False
  3099		    pass
  3100		
  3101		if yupp:
  3102		    er = yupp
  3103		    er = str('trade ' + yupp + ' accepted')
  3104		    db = connecttrade()
  3105		    ew = db.cursor()
  3106		    ew.execute('update trade set accepted=%s where trade_id=%s ', ("accepted", int(yupp)))
  3107		    db.commit()
  3108		    db.close()
  3109		    pass
  3110		else:
  3111		    er = False 
  3112		    pass
  3113		
  3114		error = er
  3115		db = connecttrade()
  3116		tw = db.cursor()
  3117		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
  3118		tw.execute('select trade_id, trade_name, trade_des, accepted, trade_price, trade_fr0m, trade_category, amount, trade_piclink from trade where trade_t0=%s and accepted=%s', (nick, 'unchecked'))
  3119		entries = [dict(tiid=row[0], name=row[1], des=row[2], accepted=row[3], price=row[4], fr0m=row[5], cat=row[6], amount=row[7], piclink=row[8]) for row in tw.fetchall()]
  3120		entries2 = wl_entries_cache().give_me_entries()
  3121		
  3122		db.close()	
  3123	        return flask.render_template('mytrades.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), error=error, entries=entries, entries2=entries2)
  3124	    
  3125	    
  3126	    db = connecttrade()
  3127	    tw,wt = db.cursor(),db.cursor()
  3128	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
  3129	    tw.execute('select trade_id, trade_name, trade_des, accepted, trade_price, trade_fr0m, trade_category, amount, trade_piclink from trade where trade_t0=%s and accepted=%s', (nick, 'unchecked'))
  3130	    wt.execute('select trade_id, trade_name, trade_des, accepted, trade_price, trade_fr0m, trade_category, amount, trade_piclink from trade where trade_t0=%s and accepted=%s or trade_fr0m=%s and accepted=%s', (nick, 'finished', nick, 'finished'))
  3131	    entries = [dict(tiid=row[0], name=evulate_length(row[1]), des=row[2], accepted=row[3], price=row[4], fr0m=row[5], cat=row[6], amount=row[7], piclink=row[8]) for row in tw.fetchall()]    
  3132	    entries3 = [dict(tiid=row[0], name=evulate_length(row[1]), des=row[2], accepted=row[3], price=row[4], fr0m=row[5], cat=row[6], amount=row[7], piclink=row[8]) for row in wt.fetchall()]
  3133	    entries2 = wl_entries_cache().give_me_entries()
  3134	    
  3135	    db.close()
  3136	    return flask.render_template('mytrades.html', entries3=entries3, newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, mess=getmsgs(), entries=entries)
  3137	
  3138	
  3139	#okay, we are gonna run a remote monerod instance and a local instance of wallet rpc
  3140	default_port = 28088 #18089
  3141	default_host = "hz.onion" #'127.0.0.1'
  3142	default_host2 = "5z.onion" #--daemon-host=
  3143	default_port2 = 28081
  3144	d3 = '127.0.0.1'
  3145	p3 = 28008
  3146	
  3147	
  3148	class handle_monero():
  3149	    def __init__(self):
  3150		self.default_port = 28088 #18089
  3151		self.default_host = "h.onion" #'127.0.0.1'
  3152	
  3153	
  3154	    def monero_price(self):
  3155		qwq = requests.get('https://api.coinmarketcap.com/v1/ticker/', verify=False).text
  3156		for line in json.loads(qwq):
  3157		    if line['name'].lower() == 'monero':
  3158			return line['price_usd']
  3159	
  3160	    def check_local_status(self):
  3161		abc = False
  3162		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  3163		server_address = ('127.0.0.1', 81)
  3164		try:
  3165		    sock.connect(server_address)
  3166		    abc=True
  3167		except Exception:
  3168		   #sprint 'localstatus noooooo'
  3169		    monerolog.debug('monero is down')
  3170		    sendtosupport('warezloader-xmr', 'warezloader-xmr', 'local connection', gettoken(), 'monero is down')
  3171		sock.close()
  3172		return abc
  3173	
  3174	
  3175	    def bulk_address_validate(self, inputen):
  3176		if inputen:
  3177		    map(function, inputen.split('\n'))
  3178	#todo add shipping price 
  3179	
  3180	    def check_status(self, host=default_host, port=default_port):#no int port in python
  3181		#import socks
  3182		s = socks.socksocket()
  3183		d = socks.socksocket()
  3184		s.setproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050)# no dubbel proxy
  3185		#d#.setproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050)
  3186		connected = False
  3187		try:
  3188		    s.connect(("h.onion", 28088)) #s.connect((host, port))#input basterd
  3189		    #d.connect((d3, 28088)) #d.connect((d3, 28088)) #check local connection
  3190		    if self.check_local_status():
  3191			connected = True
  3192		except socks.SOCKS5Error:
  3193		   #sprint (host, port)
  3194		    msg = 'check_status'+str(datetime.datetime.now()) + ': onion host|  error error - backend is down'
  3195		   #sprint msg
  3196		    monerolog.debug('monero is down')
  3197		    sendtosupport('warezloader-xmr', 'warezloader-xmr', msg, gettoken(), 'monero is down')
  3198		s.close()
  3199		d.close()
  3200		return connected	
  3201	
  3202	    def connect_monero_rpc(self, host=default_host, port=default_port):
  3203	#sprint 'connect_monero_rpc called'
  3204		from monero.backends.jsonrpc import JSONRPCWallet
  3205		#JSONRPCWallet = monero.backends.jsonrpc.JSONRPCWallet
  3206		connection = False	
  3207		try:
  3208		    if self.check_status(host, port):
  3209		#sprint ' i have connected , sending json!'
  3210			connection = monero.wallet.Wallet(JSONRPCWallet(host='127.0.0.1', port=81, user='Pv', password='GzQa'))
  3211			connection.refresh()
  3212		#sprint 'connected to the monero backend'	    
  3213		except Exception:
  3214		   print 'could not connect to the backend'
  3215	#sprint 'Connection ', type(connection)
  3216		return connection
  3217	
  3218	
  3219	    def get_member_address(self, vendor):
  3220		db = connectcoinz()
  3221		qqw = db.cursor()
  3222		qqw.execute('select address from coinz where usr=%s and note=%s', (vendor,'monero'))
  3223		qq = qqw.fetchall()
  3224		db.close()
  3225		if len(qq) > 0:
  3226		    return (random.choice(list(qq))[0], random.choice(list(qq))[0], random.choice(list(qq))[0])
  3227		else:
  3228		    return False    
  3229	
  3230	    def singel_transfer(self, address, amount):
  3231		msg = '[singel_transfer] address: ' +str(address)+' amount: '+str(amount)
  3232		monerolog.debug(msg)#log all transfers
  3233	#sprint 'singel transfer called'
  3234		txs = False
  3235		walle = self.connect_monero_rpc()
  3236		biggest = 0
  3237		ba = ''
  3238		x = 0
  3239		if walle:
  3240		    for line in walle.accounts:
  3241			x = line.balance(unlocked=True)#we only want the unlocked amount
  3242			if x > biggest:
  3243			    biggest = x
  3244			    ba = line.address()
  3245		   #sprint 'here is the:'
  3246		   #sprint (x, biggest, amount, ba, amount)
  3247	
  3248	
  3249		    if biggest > Decimal(amount) and len(str(ba)) > 2:
  3250		#sprint 'tx is true'
  3251		#sprint (address, amount, self.get_ringsize())
  3252			for line in walle.accounts:
  3253			    if ba == line.address():
  3254			#sprint 'tx is set'
  3255				#print (address, amount, self.get_ringsize())
  3256				txs = line.transfer(address, float(amount), ringsize=self.get_ringsize())
  3257			#sprint 'tx is done'
  3258		    if txs:
  3259			if isinstance(txs, list):
  3260			    txs = txs[0]
  3261		else:
  3262		   print str(datetime.datetime.now()) + ': transfer function|error error - backend is down'
  3263	
  3264		return txs
  3265	
  3266	    def multitransfer(self, listan, totalamount):
  3267	#sprint 'multitransfer called'
  3268		tx = False
  3269		ppe = self.connect_monero_rpc()
  3270		biggest = 0
  3271		ba = ''
  3272		if ppe:
  3273		    for line in ppe.accounts:
  3274			x = line.balance()
  3275		#sprint x
  3276			if x > biggest:
  3277			    biggest = x
  3278			    ba = line.address()
  3279		   #sprint (x, biggest, totalamount, len(ba), ba)
  3280		    if biggest > totalamount and len(ba) > 2:
  3281			for konto in ppe.accounts:
  3282			    if konto.address() == ba:
  3283			#sprint 'located successfully, going to push it!'
  3284				tx = konto.transfer_multiple(listan, ringsize=self.get_ringsize())
  3285		    else:
  3286			print 'not enough doe '
  3287		else:
  3288		   print str(datetime.datetime.now()) + ': multi transfer|error error - backend is down'
  3289		return tx
  3290	
  3291	
  3292	#finish monero order
  3293	    def shiptomonero(self, orderid, vendor, amount):
  3294	#sprint 'ship 2 monero called'
  3295	
  3296	
  3297	#	based = connectcoinz()
  3298	#	asd = based.cursor()
  3299	#	asd.execute()
  3300	#	based.close()
  3301		
  3302		
  3303		#devide the transaction in three
  3304		aa = self.get_member_address(vendor)
  3305	#sprint 'got member address: ', aa
  3306		zz = self.devide_in_three(amount)
  3307	#sprint 'i have devided the amount in three: ', zz
  3308		if aa:
  3309		   #sprint 'aa is true!'
  3310		    ppe = self.connect_monero_rpc()
  3311		    listan = [(aa[0], zz[0]), (aa[1], zz[1]), (aa[2], zz[2])]
  3312		    mssg = 'shiptomoner with orderid: {} and vendor: {} and amount: {}'.format(orderid,vendor,amount)
  3313		    monerolog.debug(mssg)
  3314		    txid = self.singel_transfer(aa[0], amount)#self.multitransfer(listan, amount)
  3315		   #sprint ' it has gotten transferd'
  3316		   #sprint ((aa[0], zz[0]), (aa[1], zz[1]), (aa[2], zz[2]))
  3317		    frompaymentbot = 'A payment has been sent to your monero wallet with the total amount of ' +str(amount)+ ' XMR with the transaction id of: '+ str(txid) 
  3318		    senduser2(vendor, 'warezloader-paymentbot', frompaymentbot, 'Monero Payment recieved')
  3319		    return True
  3320		else:
  3321		   #sprint 'aa is not true '
  3322		    return False
  3323		
  3324		
  3325	    
  3326	    
  3327	    def monero_accounts(self):
  3328		conn = self.connect_monero_rpc()
  3329		return conn.accounts
  3330	
  3331	
  3332	    def validate_payment_id(self, paymentid):
  3333		return len(paymentid) == 16 and int(paymentid, 16).bit_length() == 64
  3334	
  3335	    
  3336	    def dirty_paymentid_validate(self, paymentid):
  3337		pp = paymentid
  3338		if not self.validate_payment_id(pp):
  3339		    pp = self.generate_payment_id()
  3340		return pp
  3341	
  3342	    def get_ringsize(self):
  3343		return random.choice(range(7,14))#[7,8,9,10,11,12,13])#not okey??
  3344	
  3345	
  3346	    def make_integrated_address(self, paymentid, address):
  3347		pp = dirty_paymentid_validate(paymentid)
  3348		inten = monero.address.address(address).with_payment_id(pp)
  3349		return (inten, pp)
  3350	
  3351	    def validate_main_address(self, address):
  3352		if len(address) == 95:
  3353		    ab = fre.findall(r'(4([0-9]|A|B{1})[a-z-A-Z-0-9]{93})', address)
  3354		    if len(ab) == 1:
  3355			return ab[0][0]
  3356	    
  3357	    #def validate_main_address(self, address):
  3358		#ab = re.findall(r'(4([0-9]|A|B{1})[a-z-A-Z-0-9]{93})', address)
  3359		#if len(ab) == 2:
  3360		    #return ab[0][0]
  3361	
  3362	    def get_incoming(self):
  3363		return self.connect_monero_rpc().incoming()
  3364	
  3365	
  3366	    def find_all_incoming(self, paymentid):
  3367		payer, pureline = False, False
  3368		for addreses in self.connect_monero_rpc().accounts():
  3369		    for txline in address.incoming():
  3370			if paymentid == txline.__dict__.get('payment_id'):
  3371			    payer = True
  3372			    pureline = txline
  3373		if payer:
  3374		    return pureline
  3375		
  3376	
  3377	    def multisend():
  3378		return True
  3379	
  3380	    def devide_in_three(self, randomnumber):
  3381	#sprint 'devide_in_three input:', randomnumber
  3382		aa = npnumpy.linspace(float(randomnumber)/4,float(randomnumber))
  3383		a0 = random.choice(aa)
  3384		a1 = random.choice(aa)
  3385		a2 = float(randomnumber)-float(a0)-float(a1)	
  3386		#randomnumber = Decimal(randomnumber)
  3387		#a0 = random.choice(range(randomnumber/2))
  3388		#a1 = random.choice(range(randomnumber/2))
  3389		#a2 = randomnumber -a1 -a0
  3390		#if sum(a0,a1,a2) == randomnumber:
  3391		return (a0,a1,a2)    
  3392	
  3393	    def membersend(member, amount):
  3394		db = coinz()
  3395	#	'select address from coinz where note='monero' and nick=%s'
  3396		db.close()
  3397	
  3398	    def get_outgoing(self):
  3399		return self.connect_monero_rpc().outgoing()
  3400	
  3401	    
  3402	    def have_i_got_payment(self, paymentid):
  3403		legitline = False
  3404		for tx in self.get_incoming():                   
  3405		    if paymentid == tx.__dict__.get('payment_id'):
  3406			legitline = True
  3407		return legitline
  3408	    
  3409	    def payment_id_amount(self, paymentid):
  3410		legitline = False
  3411		amount = Decimal(0)
  3412		if self.check_status():
  3413		    for addreses in self.connect_monero_rpc().accounts:
  3414			for tx in addreses.incoming():                   
  3415			    if paymentid == tx.__dict__.get('payment_id'):
  3416				amount += tx.__dict__.get('amount')
  3417		else:
  3418		   #sprint 'payment id|monero is down'
  3419		    sendtosupport('wl-paymentidamount', 'wl-paymentidamount', 'monero backend is down', getatoken(), 'Monero down')
  3420		return amount
  3421	    
  3422	        
  3423	    def validate_monero_address(self, address):
  3424		return ''
  3425	        
  3426	        
  3427	    def ee(self, str):
  3428		return ''
  3429	
  3430	    def new_subaddress(self):
  3431		addr='not connected'
  3432		aap = self.connect_monero_rpc()
  3433		if aap:
  3434		    addr = aap.new_account().address()
  3435		return addr
  3436	    
  3437	    def convertusd2monero(self, amountusd):
  3438		return Decimal(amountusd)/Decimal(searchingfor().latestmoneroprice())#get current monero
  3439	    
  3440	    def convert_monero_to_usd(self, xmrcoins):
  3441		return Decimal(xmrcoins)*Decimal(searchingfor().latestmoneroprice())#get current monero price
  3442	    
  3443	    def avrunda_monero(self, xmramount):
  3444		return str(xmramount).split('.')[0]+'.'+str(xmramount).split('.')[1][:14]
  3445	
  3446	    def generate_payment_id(self):#bruteforce to ensure that we have  a legit 16length payment id
  3447		db = connectcoinz()
  3448		ask = db.cursor()
  3449		ask.execute('select pbk from coinorder where length(pbk)=16')
  3450		listan = ask.fetchall()
  3451		#tuple to list - the censorednick way 
  3452		listan = str(listan)[:-1][1:].replace(')', '').replace('(', '').replace(',', '').replace('''"''', '').replace("""'""", '').replace("'", '').split()
  3453		merp = False
  3454		while not merp:
  3455		    a = int(random.SystemRandom().randrange(2**64))
  3456		    b = a.__hex__()[:-1][2:]     
  3457		    if len(b) == 16 and not listan.__contains__(b):#nice one, validate length and uniq payment id function :))
  3458			merp = True
  3459	
  3460	
  3461	
  3462		db.close()
  3463		return b
  3464	
  3465	
  3466	
  3467	def evulate_length(spetsstring):
  3468	    if len(spetsstring) > 21:
  3469		return spetsstring[:20] + '...'
  3470	    else:
  3471		return spetsstring
  3472	
  3473	#todo remove unnesseryity sql gets
  3474	
  3475	
  3476	#create a trade
  3477	@wl.route('/create/trade')
  3478	@wl.route('/create/trade/', methods=['POST', 'GET'])
  3479	@noindex
  3480	@axss
  3481	@adate
  3482	@af
  3483	def create_trade():
  3484	    if flask.session.has_key('special') and flask.session:
  3485		if not vertify_session(flask.session['special']):
  3486		    return flask.redirect(flask.url_for('choice_mode'))
  3487		pass
  3488	    else:
  3489		return flask.redirect(flask.url_for('choice_mode')) 
  3490	    
  3491	    if flask.request.method == 'POST':
  3492		if flask.session.has_key('special') and flask.session:
  3493		    if not vertify_session(flask.session['special']):
  3494			return flask.redirect(flask.url_for('choice_mode'))
  3495		    pass
  3496		else:
  3497		    return flask.redirect(flask.url_for('choice_mode')) 	
  3498		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  3499		title = flask.request.form.get('title')
  3500		file = flask.request.files['file']
  3501		tomember = flask.request.form.get('tomember')
  3502		Quantity = flask.request.form.get('Quantity')
  3503		des = flask.request.form.get('description')
  3504		btcaddr = flask.request.form.get('btcaddr')
  3505		digital = flask.request.form.get('digital')
  3506		whatfor = flask.request.form.get('whatfor')
  3507		#shipto = flask.request.form['Shippingto']
  3508		shipprice = flask.request.form.get('shippingprice')
  3509		cat = flask.request.form['Category1']	
  3510		entries2 = wl_entries_cache().give_me_entries()
  3511		
  3512		db = connecttrade()
  3513		db2 = connectvens()
  3514		tr = db2.cursor()
  3515		rt = db2.cursor()
  3516		tr.execute('select role from vens where nick=%s', (tomember,))
  3517		if not tr.fetchone():
  3518		    error = 'No Member with the nick: ' + str(tomember)   
  3519		    return flask.render_template('create_trade.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), error=error)
  3520		else:
  3521		    pass
  3522		
  3523		if not btcaddr:
  3524		    btcaddr = 'nope'
  3525		if btcaddr:
  3526		    if not btcaddr == "nope":
  3527		#sprint btcaddr
  3528		#sprint 'got btcaddr'
  3529			if not validateaddress(btcaddr):
  3530			   #sprint 'not validated address'
  3531			    error = 'invalid bitcoin address'
  3532			    return flask.render_template('create_trade.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), error='invalid bitcoin address')
  3533			else:
  3534			    btcheck = True# not needed
  3535			    pass	
  3536		
  3537		
  3538		if file:# and allowed_file(file.filename):
  3539		    if allowed_file(file.filename):
  3540			filename = secure_filename(file.filename)#scan the picture -done
  3541			extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
  3542			filename = extra + filename
  3543			emma = wl.config['items_FOLDER'] + '/' + filename
  3544			file.save(emma)
  3545			cleans(emma)
  3546			pass
  3547		    else:
  3548			return flask.render_template('create_trade.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), error='wrong type of file, We only allow: png, jpg, jpeg and gif')
  3549		else:
  3550		    filename = 'xMrXK0bqi5ryxVRgdr4u04iMJV4itempic.png'
  3551		    pass	
  3552		
  3553		mac = str(base64.b64encode(urandom(40))).replace('=', '').replace('+', '').replace('/', '')
  3554		rt = db.cursor()
  3555		rt.execute('insert into trade(trade_name, trade_des, trade_piclink, trade_t0, trade_fr0m, trade_category, trade_want, accepted, amount, mac) value(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', (title, des, filename, tomember, nick, cat, whatfor, 'unchecked', Quantity, mac))
  3556		#todo look at bitcoin address implementation in this function
  3557		db.commit()
  3558		db.close()
  3559		db2.close()
  3560		entries2 = wl_entries_cache().give_me_entries()
  3561		
  3562		error = 'trade offer created with ' + str(tomember)
  3563		return flask.render_template('create_trade.html', newsentries=wl_html_cache().get_news(), entries2=entries2, error=error, mess=getmsgs())
  3564	    
  3565	    error = False
  3566	   # entries2 = wl_entries_cache().give_me_entries()
  3567	    entries2 = wl_entries_cache().give_me_entries()
  3568	    meh = flask.render_template
  3569	    return flask.render_template('create_trade.html', newsentries=wl_html_cache().get_news(), entries2=entries2, error=error, mess=getmsgs())
  3570	   # return wl_html_cache().return_page('create_trade', meh)#flask.render_template('create_trade.html', entries2=entries2, mess=getmsgs())
  3571	
  3572	
  3573	#bogus values
  3574	mincache["cachetime"] = "999"
  3575	mincache["btcprice"], mincache["moneroprice"] = "123", "123"#newnew
  3576	mincache["coinbaseprice"] = "123"
  3577	mincache['html_time'] = '999'
  3578	
  3579	#greenpower boooi
  3580	
  3581	
  3582	
  3583	#fkn no backup working 
  3584	
  3585	#log when shutdown 
  3586	
  3587	#add amount+1, bought+1, itm has been sold +1 amounts
  3588	def finishorder(vendor, buyer, quanity, itemid, ordername, cointype):
  3589	   #sprint 'finished order is called'
  3590	    db = connectcoinz()
  3591	    sd = db.cursor()
  3592	    ssd = connectvens().cursor()
  3593	    ds = db.cursor()
  3594	    dsd = db.cursor()
  3595	    dsds = db.cursor()    
  3596	    sasd = connectitems().cursor()
  3597	       #todo shorten the query
  3598	    ds.execute('select name from coinorder where buyer=%s and item_id=%s and vendor=%s', (buyer, itemid, vendor))
  3599	    name = ds.fetchone()[0]
  3600	    sd.execute('select pbk from coinorder where vendor=%s and buyer=%s and item_id=%s and name=%s', (vendor, buyer, itemid, name)) 
  3601	    pbk = sd.fetchone()[0]
  3602	    dsd.execute('select pk from coinorder where vendor=%s and buyer=%s and item_id=%s and name=%s', (vendor, buyer, itemid, name)) 
  3603	    pk = dsd.fetchone()[0]    
  3604	    dsds.execute('select address from coinorder where vendor=%s and buyer=%s and item_id=%s and name=%s', (vendor, buyer, itemid, name)) 
  3605	    btcaddr = dsds.fetchone()[0]    
  3606	    #print 'finishing order:'
  3607	    #print 'pbk|pk|addr'
  3608	    #print (pbk, pk, btcaddr)
  3609	
  3610	#item
  3611	    sasd.execute('select number_sold from items where item_vendor=%s and item_id=%s', (vendor, itemid))
  3612	    q = sasd.fetchone()
  3613	    if not q:
  3614		q = 0
  3615	    elif not type(q) == type(0):
  3616		if not q[0]:
  3617		    q = 0  
  3618		    pass
  3619		
  3620		elif len(q) == 1:
  3621		    q = q[0]	
  3622	   # if len(q[0]) == 0:
  3623		#q = 0
  3624	    else:
  3625		q = q[0]
  3626	   #sprint type(q)
  3627	    #print str(q)
  3628	    #print len(q)
  3629	   #sprint q
  3630	    q_am = int(q) + 1
  3631	    #
  3632	    db2 = connectitems()
  3633	    sasd = db2.cursor()
  3634	    sasd.execute('update items set number_sold=%s where item_vendor=%s and item_id=%s', (q_am, vendor, itemid))
  3635	    
  3636	    db2.commit()    
  3637	    db.commit()
  3638	    q = False
  3639	    #buyr
  3640	    
  3641	    ssd.execute('select amountitemsbought from vens where nick=%s', (buyer,))
  3642	    q = ssd.fetchone()
  3643	    if not q[0]:
  3644		q = 0    
  3645	    #if len(q[0]) == 0:
  3646		#q = 0
  3647	    else:
  3648		q = q[0]    
  3649	    buyrate = int(q) + int(quanity)
  3650	    db3 = connectvens()
  3651	    ssd	= db3.cursor()
  3652	    ssd.execute('update vens set amountitemsbought=%s where nick=%s', (buyrate, buyer))
  3653	    db3.commit()
  3654	    db2.commit()
  3655	    db.commit()
  3656	    q = False
  3657	#ven
  3658	    ssdd = db3.cursor() 
  3659	    ssdd.execute('select amountitems from vens where nick=%s', (vendor,))
  3660	    q = ssdd.fetchone()
  3661	    if not q[0]:
  3662		q = 0
  3663	    #if len(q[0]) == 0:
  3664		#q = 0
  3665	    else:
  3666		q = q[0]    
  3667	    venam = int(q) + int(quanity)
  3668	    ssd = db3.cursor()
  3669	    ssd.execute('update vens set amountitems=%s where nick=%s', (venam, vendor))
  3670	    db3.commit()
  3671	    q = False
  3672	    db5 = connectorders()
  3673	    tup,tup2,tup0 = db5.cursor(),db5.cursor(),db5.cursor()
  3674	    put = db5.cursor()
  3675	    utp = db5.cursor()
  3676	    ptu = db5.cursor()
  3677	    stc = db2.cursor()
  3678	    stc.execute('select item_btcaddr from items where item_id=%s and item_vendor=%s', (itemid, vendor))
  3679	#    if stc.fetchone():
  3680	#	shiptobtcspace()#todo fix push 2 blockchain    
  3681	    tup.execute('update orders set status=%s where order_buyer=%s and item_id=%s and vendor=%s', ('finished', buyer, itemid, vendor))
  3682	    tup2.execute('update orders set order_payed=%s where order_buyer=%s and item_id=%s and vendor=%s', ('payed', buyer, itemid, vendor))
  3683	    tup0.execute('select btcprice from orders where order_name=%s and vendor=%s and item_id=%s', (ordername,vendor,itemid))
  3684	    #utp.execute('update')
  3685	    #ptu.execute('update')
  3686	   ##sprint 'btc push'
  3687	    #print (vendor, itemid, btcaddr, pk)
  3688	    
  3689	    coinamount = tup0.fetchone()
  3690	    if len(coinamount) > 0:
  3691		coinamount=coinamount[0]
  3692	    else:
  3693		coinamount = 0
  3694		
  3695	   #sprint 'cointype sorted out, cointype is:', cointype
  3696	   #sprint cointype == 'bitcoin' or cointype == 'btc'
  3697	   #sprint cointype == 'xmr'
  3698	    if cointype == 'bitcoin' or cointype == 'btc':
  3699	#sprint 'check 0'
  3700		if not payment_check(vendor, itemid, btcaddr, pk):	
  3701		   #sprint 'check 1'
  3702		    if not check_free(itemid):
  3703		#sprint 'check 2 , shipping to vault'
  3704			shiptovault(vendor, pbk, pk, btcaddr)# should work?
  3705		#print 'vendor doesnt have a btc address, im pushing it to the vault'
  3706	    else:
  3707		print 'not bitcoin'
  3708		
  3709	    
  3710	    if cointype == "monero" or cointype == "xmr":
  3711	#sprint 'cointype called, im gonna ship it monero'
  3712		handle_monero().shiptomonero(ordername, vendor, coinamount)
  3713	    else:
  3714		print 'monero not called'
  3715	    
  3716	    put.execute('delete from orders where order_name=%s and vendor=%s and order_buyer=%s', (ordername, vendor, buyer))
  3717	    db.commit()
  3718	    db5.commit()
  3719	#fix insert into vault    
  3720	    
  3721	    db.cursor().execute('delete from coinorder where buyer=%s and name=%s and vendor=%s', (buyer, name, vendor))
  3722	    m1 = getatoken()
  3723	    ptu.execute('insert into orders(rate_token, item_id, order_buyer, vendor) values(%s, %s, %s, %s)', (m1, itemid, buyer, vendor))
  3724	    magic = '/rateitem/' + m1
  3725	    #db.cursor().execute('insert into ')
  3726	    db.commit()
  3727	    db.close()
  3728	    db5.commit()
  3729	    return magic #/rateitem/<ratetoken>
  3730	
  3731	def payment_check(vendor, itemid, btcaddr, pk):
  3732	    db = connectitems()
  3733	    stc = db.cursor()
  3734	    kig = False
  3735	    stc.execute('select item_btcaddr from items where item_vendor=%s and item_id=%s', (vendor, itemid))
  3736	    bler = stc.fetchone()[0]
  3737	    if bler == 'nope':
  3738		pass
  3739	    elif not len(bler) == 34:
  3740		pass
  3741	    else:
  3742		#temporary solution
  3743		senduser(vendor, 'warezloader-btc_bot', 'Greetings, we can see that you have entered a btc address, our bitcoin server is overloaded right not so the be sure you got the payment we have added it to your vault instead of sending the btc it directly to you', 'Payment in Vault')
  3744		#push to the blockchain - todo implement auto push function
  3745		#todo verify payment works
  3746		
  3747	##sprint 'calling cointx with:'
  3748	##sprint(btcaddr, pk, bler)
  3749	#	holytx = signed_simple_tx(btcaddr, pk, bler)
  3750	#	tx_queque().add_task(holytx) #i shall save all in memory da temporary data
  3751	#	secure_copy_tx(holytx, vendor, pk, btcaddr)#this shall work
  3752	
  3753	
  3754		#coinztx().addtx(signed_simple_tx(btcaddr, pk, bler))#push to da chain!
  3755		kig = True
  3756	#sprint 'transaction has been sent to tha blockchain!'
  3757	    db.close()
  3758	    return kig
  3759	
  3760	
  3761	stc_forever = []
  3762	
  3763	class tx_queque():
  3764	    def __init__(self):
  3765		self.db = stc_forever
  3766	    def task_done(self, donetask):
  3767		self.db.remove(donetask)
  3768	    def amount(self):
  3769		return len(self.db)
  3770	    def add_task(self, indatan):
  3771		self.db.append(indatan)
  3772	    def givemedb(self):
  3773		return self.db
  3774	
  3775	
  3776	
  3777	class check_tx_status(threading.Thread):
  3778	    def __init__(self, mintransx):
  3779		threading.Thread.__init__(self)
  3780		self.mytx = mintransx
  3781		self.logr = logging.basicConfig(name='txpush3r_thread')
  3782	    
  3783	    def run(self):
  3784		if check_tx(self.mytx):
  3785		    self.logr.info('transaction has gone throw, im deleting it')
  3786		    remove_tx(tx)
  3787		else:
  3788		    self.logr.debug('Transaction need administartor acknowledge')
  3789		    self.logr.debug(str(self.mytx))
  3790	
  3791	
  3792		
  3793	class pushthread(threading.Thread):
  3794	    def __init__(self, mytx):
  3795		threading.Thread.__init__(self)
  3796		self.mytx = mytx
  3797		self.logr = logging.basicConfig(name='txpush3r_thread')
  3798	
  3799	    def run(self):#pass a dict as my tx
  3800		topop = self.mytx
  3801		for line in topop:
  3802		    pushbtctx(line)
  3803		    #remove from queue
  3804		    check_tx_status(line).start()
  3805		    tx_queue().task_done(line)#its been handled  ;)
  3806		self.logr.info('i have pushed %d amount of tx - now i will die in peace', len(topop))
  3807		return True
  3808	
  3809	
  3810	#all searches goes throw this class
  3811	class searchingfor():
  3812	    #clear cache every hour
  3813	    def __init__(self):
  3814		self.b = BtcConverter()
  3815		self.mycache = mincache#{"btcprice": "", "cachetime": "7", "coinbaseprice": ""}#cache pricetable?
  3816		#print 'cache set!'
  3817		#searches for latest btc price
  3818		
  3819		
  3820	    def latestbtcprice(self):
  3821		self.check_cache()
  3822		return self.mycache["btcprice"]
  3823	
  3824	    def latestmoneroprice(self): #newnew
  3825		self.check_cache()
  3826		return self.mycache['moneroprice']
  3827	
  3828		#price table
  3829	    def getpt(self):
  3830		'''get price table'''
  3831		self.check_cache()
  3832		#price = int(float(session.get('https://coinbase.com/api/v1/prices/buy').json()['total']['amount']))
  3833		price = self.mycache["coinbaseprice"]
  3834		#price = int(markup * price)
  3835		#soo = self.check_cache()#b.get_latest_price('USD')
  3836		pricetable = []
  3837		for dollarvalue in [100,200,300,400,(price - (price % 100)),price,(price + 100 - (price % 100)), 1000,2000]:
  3838		    pricetable.append((dollarvalue, decimal.Decimal(dollarvalue)/price))    
  3839		return pricetable
  3840	
  3841	    def convertusd2btc(self, amountusd):
  3842		return Decimal(amountusd)/Decimal(self.latestbtcprice())
  3843	    
  3844	    def convert_btc_to_usd(self, btccoins):
  3845		return Decimal(btcoins)*Decimal(self.latestbtcprice())    
  3846	
  3847		    #date time
  3848	    def check_cache(self):
  3849		a = datetime.datetime.time(datetime.datetime.now())
  3850		a2 = str(a)[:2]
  3851		if self.mycache["cachetime"] == a2:
  3852		    #return self.mycache["btcprice"]
  3853		    #print 'cache set okey!'
  3854		    pass
  3855		else:
  3856		    
  3857		    #self.mycache["btcprice"] = self.b.get_latest_price('USD')
  3858	            a3 = requests.get('https://coinbase.com/api/v1/prices/buy', proxies={'http': "socks5://172.20.0.202:1080", 'https':'socks5://172.20.0.202:1080'})
  3859		    self.mycache["moneroprice"] = handle_monero().monero_price()
  3860		    if a3.status_code == 302:
  3861			self.mycache["coinbaseprice"] = int(float(json.loads(requests.get('https://coinbase.com/api/v1/prices/buy',  proxies={'http': "socks5://172.20.0.202:1080", 'https':'socks5://172.20.0.202:1080'}).text)['total']['amount']))#float(requests.get('https://blockchain.info/ticker').json()['USD']['last'])
  3862		    else:
  3863	                self.mycache["coinbaseprice"] = int(float(json.loads(requests.get('https://api.coinbase.com/v2/exchange-rates?currency=BTC', proxies={'http':'socks5://172.20.0.202:1080', 'https':'socks5://172.20.0.202'}).text)['data']['rates']['USD']))#int(float(str(requests.get('http://api.coindesk.com/v1/bpi/currentprice.json').json()['bpi']['USD']['rate']).replace(',', '')self.mycache["btcprice"]))
  3864		    self.mycache["btcprice"] = self.mycache["coinbaseprice"]
  3865		    #self.mycache["cachetime"] = a2#a2str(a)[:2]
  3866		    self.mycache["cachetime"] = a2
  3867		   #sprint 'cache time: ' + a2#str(a)[:2]
  3868		    pass
  3869		    #cache fully working
  3870		    #print 'cache is set to btc: {} coin: {} cachetime: {}'.format(self.mycache["btcprice"], self.mycache["coinbaseprice"], self.mycache["cachetime"])
  3871		    #print 'updateing cache'
  3872		    #pass
  3873		    #return self.mycache["btcprice"]
  3874	
  3875	
  3876	#tx verifies
  3877	
  3878	def check_tx(transtxid):
  3879	    tx = False
  3880	    if not requests.get('https://blockchain.info/tx/' + transtxid + '?show_adv=false&format=json').text == 'Transaction not found':
  3881		tx = True
  3882	    return tx
  3883	
  3884	def verify_btc_transaction():
  3885	    db = connecttxdb()	
  3886	    mp = db.cursor()
  3887	    db.close()
  3888	
  3889	def secure_copy_tx(tx, vendor, pk, pbk):
  3890	    db = connecttxdb()
  3891	    mp = db.cursor()
  3892	    now = str(datetime.datetime.now())[:-7]
  3893	    try:
  3894		mp.execute('insert into btc_transactions(tx_hash, pk, to_vendor, pbk, tiden) value(%s, %s, %s, %s, %s)', (tx, pk, vendor, pbk, now))
  3895	    except Exception:
  3896		logger1.debug('mysql error while inserting tx hash')
  3897	    db.commit()
  3898	    db.close()
  3899	
  3900	
  3901	def remove_tx(tx):#, vendor
  3902	    db = connecttxdb()
  3903	    mp = db.cursor()
  3904	    mp.execute('delete from btc_transactions where tx_hash=%s', (tx,))# and to_vendor=%s  vendor
  3905	    db.commit()
  3906	    db.close()
  3907	
  3908	
  3909	
  3910	
  3911	
  3912	
  3913	
  3914	
  3915	def vendor_item_del(itemid):
  3916	    db = connectitems()
  3917	    paln,palo = db.cursor(),db.cursor()
  3918	    oiw = db.cursor()
  3919	    paln.execute('select item_vendor from items where item_id=%s', (itemid,))
  3920	    palo.execute('select item_name from items where item_id=%s', (itemid,))
  3921	    name = palo.fetchone()[0]
  3922	    mv = paln.fetchone()[0]
  3923	  
  3924	    oiw.execute('delete from items where item_id=%s', (itemid,))
  3925	    db.commit()
  3926	    title = 'amount reached, one of your items has been autodeleted'	
  3927	    msg = 'all samples of this item has been sold, amount is empty and item has been autodeleted, item is: ' + name 
  3928	    #print 'sending msg to ' + mv
  3929	    senduser2(mv, "warezloader-bot", msg, title)
  3930	    db.close()
  3931	   #sprint 'deleted it'
  3932	
  3933	
  3934	#todo add wlkey export - done verify when installing
  3935	
  3936	
  3937	#ignore non number input
  3938	#>>> verifynumberinput(1)
  3939	#True
  3940	#>>> verifynumberinput(';')
  3941	#False
  3942	
  3943	def verifynumberinput(magf):
  3944	    try:
  3945		int(magf)
  3946		return True
  3947	    except ValueError:
  3948		return False
  3949		
  3950	
  3951	def get_am_sold(vendornick):
  3952	    a = 0
  3953	    db = connectitems()
  3954	    qwe = db.cursor()
  3955	    qwe.execute('select number_sold from items where item_vendor=%s', (vendornick,))
  3956	    rew = qwe.fetchall() 
  3957	    if rew:
  3958		for line in rew:
  3959		    a += int(line[0])
  3960	    db.close()
  3961	    return a
  3962	
  3963	
  3964	
  3965	@wl.route('/buy_new/<itemid>', methods=['POST', 'GET'])
  3966	@noindex
  3967	@axss
  3968	@adate
  3969	@af
  3970	def buynew(itemid):
  3971	    if not flask.session.has_key("nick"):
  3972		return flask.redirect(flask.url_for('choice_mode'))    
  3973	    else:
  3974		pass
  3975	    if flask.session.has_key('special') and flask.session:
  3976		if not vertify_session(flask.session['special']):
  3977		    return flask.redirect(flask.url_for('choice_mode'))
  3978		pass
  3979	    else:
  3980		return flask.redirect(flask.url_for('choice_mode'))
  3981	    
  3982	    #uber condom
  3983	    if not verifynumberinput(itemid):
  3984		return flask.redirect(flask.url_for('choice_mode'))
  3985	
  3986	    paymentid = False
  3987	    cointype = 'btc'
  3988	    
  3989	
  3990	    db = connectcoinz()
  3991	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  3992	    item_id = itemid
  3993	    
  3994	    sess,eeww = db.cursor(),db.cursor()
  3995	    sess.execute('select pbk from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  3996	    pbk = sess.fetchone()
  3997	    eeww.execute('select notes from coinorder where item_id=%s and buyer=%s', (itemid, nick))#backwards compability
  3998	    sew = eeww.fetchone()    
  3999	    if not sew:
  4000		cointype = 'bitcoin'
  4001	    else:
  4002		cointype = sew[0]
  4003		if not cointype:
  4004		    cointype = 'bitcoin'
  4005	    
  4006	    if cointype == "xmr":
  4007		paymentid = pbk[0]
  4008	    
  4009	    sdw = db.cursor()
  4010	    sdw.execute('select paid from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4011	    if not sdw.fetchone():
  4012		return flask.redirect('/shop')
  4013	    else:
  4014		buyr = True
  4015		pass
  4016	    db2 = connectitems()
  4017	    lulls = db2.cursor()
  4018	    lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, item_vendor, item_category from items where item_id=%s', (item_id,))
  4019	    entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], vendor=row[9], cate=row[10]) for row in lulls.fetchall()]
  4020	
  4021	
  4022	    jackpo = []
  4023	    if len(entries) == 1:
  4024	            mogly = entries[0]
  4025	            cate = mogly.get('cate')
  4026	            for x in fre.findall(r'(([A-Z]{1}[a-z-0-9]{0,254})\/([A-Z]{1}[a-z-0-9]{0,254}))', cate):
  4027	                if len(x) >= 1:
  4028	                    if len(x) == 3:
  4029	                        if not x[0] in str(jackpo):
  4030	                            jackpo.append({'main':x[2], 'sub':x[1], 'real':x[0]})
  4031	
  4032	    if len(jackpo) == 1:
  4033	        jackpo = jackpo[0]
  4034	
  4035	    lls = db2.cursor()
  4036	    lls.execute('select item_price from items where item_id=%s', (item_id,))
  4037	    dollar = lls.fetchone()
  4038	    odw = db.cursor()
  4039	    odw.execute('select address from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4040	    escrowaddress = odw.fetchone()[0] 
  4041	    mess = getmsgs()
  4042	    if not dollar:
  4043		error = 'Seems like your order is already done, try to place a new one '
  4044		return flask.render_template('new/buy.html', cointype=cointype.upper(), paymentid=paymentid, mess=mess, error=error, escrowaddress=escrowaddress, buyr=buyr)
  4045		
  4046	    btc = searchingfor().latestbtcprice()#b.get_latest_price('USD')
  4047	    xmrprice = searchingfor().latestmoneroprice()
  4048	    ll = db.cursor()
  4049	    db3 = connectvens()
  4050	    ee = db3.cursor()
  4051	    
  4052	#todo write a category split function - for /buy
  4053	    
  4054	    ee.execute('select role from vens where nick=%s', (nick,))
  4055	    role = ee.fetchone()
  4056	    role = role[0] 
  4057	    sdww = db.cursor()
  4058	    sdww.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 	
  4059	    ame = int(sdww.fetchone()[0]) 
  4060	
  4061	    d2 = dollar[0]
  4062	    coinprice = btc
  4063	    if cointype == 'xmr':
  4064		coinprice = xmrprice
  4065	    thaprice = Decimal(Decimal(d2)/Decimal(coinprice))
  4066	    
  4067	    
  4068	    sdss = db.cursor()
  4069	    sdss.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4070	    itemamount = sdss.fetchone()[0]
  4071	    if len(itemamount) == 0:
  4072		itemamount = 0
  4073	    db.close()
  4074	    db2.close()
  4075	    db3.close()
  4076	   ##sprint 'all done'
  4077	    
  4078	    
  4079	    if flask.request.method == 'POST':
  4080		if flask.session.has_key('special') and flask.session:
  4081		    if not vertify_session(flask.session['special']):
  4082			return flask.redirect(flask.url_for('choice_mode'))
  4083		    pass
  4084		else:
  4085			return flask.redirect(flask.url_for('choice_mode'))	
  4086		
  4087		if not verifynumberinput(itemid):
  4088		    return flask.redirect(flask.url_for('choice_mode'))	
  4089		if flask.session.has_key('special') and flask.session:
  4090		    if not vertify_session(flask.session['special']):
  4091			return flask.redirect(flask.url_for('choice_mode'))
  4092		    pass
  4093		else:
  4094		    return flask.redirect(flask.url_for('choice_mode')) 	
  4095		error = False
  4096		#paid = False
  4097		db = connectcoinz()
  4098		db2 = connectitems()
  4099		sdw,eeww = db.cursor(),db.cursor()
  4100		sdww,sess = db.cursor(), db.cursor()
  4101		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  4102		sdw.execute('select address from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4103		sess.execute('select pbk from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4104		pbk = sess.fetchone()[0]
  4105		sdww.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 	
  4106		eeww.execute('select notes from coinorder where item_id=%s and buyer=%s', (itemid, nick))#backwards compability
  4107		sew = eeww.fetchone()
  4108		if not sew:
  4109		    cointype = 'btc'
  4110		 # #sprint 'assuming bitcoin cointype'
  4111		else:
  4112		    cointype = sew[0]
  4113		    if not cointype:
  4114			cointype = 'btc'
  4115		  # #sprint 'got a correct cointype:', cointype
  4116		ame = int(sdww.fetchone()[0])
  4117		ddress = sdw.fetchone()[0]
  4118	#        ddress = "3FBC2mgxj9BfbY3NoUpUH4QTYsHk2TrAi1"
  4119		ll = db2.cursor()
  4120		entries2 = wl_entries_cache().give_me_entries()
  4121		
  4122		ll.execute('select item_price from items where item_id=%s', (itemid,))
  4123		tre = ll.fetchone()[0]
  4124		btcprice = float(tre)*ame
  4125		if cointype == 'btc':
  4126		    btcprice = searchingfor().convertusd2btc(btcprice)#b.convert_to_btc(btcprice, 'USD') #cache this
  4127	           #sprint('Calling with: ', ddress, btcprice)
  4128	            paid = verify_a_payment(ddress, btcprice)
  4129	           #sprint('Payed returned:', paid)
  4130		elif cointype == 'xmr':
  4131		    btcprice = handle_monero().convertusd2monero(btcprice)
  4132		    if not handle_monero().check_status():
  4133			error = 'the monero backend is currently down, try again later'
  4134			return flask.render_template('new/buy.html', entries=entries, cointype=cointype, newsentries=wl_html_cache().get_news(), entries2=entries2, mess=getmsgs(), error=error, escrowaddress=escrowaddress, buyr=buyr, paymentid=paymentid, thaprice=thaprice)
  4135		    paid = monero_verify_a_payment(pbk, btcprice, nick, itemid)
  4136	#	   #sprint 'done paid'
  4137		if paid == 'yes' or check_free(itemid):#quick n easy :)
  4138		    orderid = ''
  4139		    db = connectcoinz()
  4140		    db2 = connectitems()
  4141		    db3 = connectorders()
  4142		    db0 = connectvens()
  4143		    gri, puffyblob,puffyblob0 = db.cursor(),db2.cursor(),db0.cursor()
  4144		    
  4145		    gri.execute('select item_amount from coinorder where item_id=%s', (itemid,))
  4146		    puffyblob.execute('select autoresponse from items where item_id=%s', (itemid,))
  4147		    
  4148		    re = db.cursor()
  4149		    pln = db2.cursor()
  4150		    pw = db2.cursor()
  4151		    pq = db2.cursor()
  4152		    pstq = pq
  4153		    oiw = pq
  4154		    re.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick))#quantity
  4155		    quantity = re.fetchone()[0]
  4156		    ordertoken = gettoken()	    
  4157		    #add order
  4158		    pln.execute('select item_vendor from items where item_id=%s', (itemid,))
  4159		    pw.execute('select item_name from items where item_id=%s', (itemid,))
  4160		    
  4161		    pstq.execute('select amount_in_stock from items where item_id=%s', (itemid,))
  4162		    amme = pstq.fetchone()[0]
  4163		    pq.execute('select item_digi from items where item_id=%s', (itemid,))	    
  4164		    digital = pq.fetchone()
  4165		    if digital:
  4166			digital = digital[0]
  4167		    else:
  4168			digital = 'no'
  4169		 
  4170		    vendor = pln.fetchone()[0]	
  4171		    title = pw.fetchone()[0]
  4172		    
  4173		    if holiday_check(vendor):
  4174			holiday_send(nick, title, vendor)
  4175		    	    
  4176	
  4177		    if digital == 'no':
  4178			status = 'item is not shipped and'
  4179			shipped = 'no' 
  4180			shippingdetails = 'not set'
  4181			pass
  4182		    else:
  4183			titlee = str('digital link to ' + title)
  4184			message = 'the item you have bought from '  + vendor + ' are have a digital link: "' + digital + '" , you have got another msg regarding the order, dont forget to finish the order and rate it!'
  4185	 		senduser2(nick, 'warezloader-store-bot', message, titlee)
  4186			status = 'digital link sent to buyer'
  4187			shipped = 'digital link sent'
  4188			shippingdetails = shipped
  4189			pass	    
  4190		    
  4191		    ar = puffyblob.fetchone()
  4192		    if ar and len(ar) > 0:#custom autoresponse messages
  4193			t2 = 'Regarding item '+ title
  4194			senduser2(nick, vendor, ar[0], t2)
  4195			
  4196		    #if len(amme) == 0
  4197		    if len(amme) == 0:
  4198			vendor_item_del(itemid)
  4199			pass
  4200		    else:
  4201			#pass
  4202			amme = int(amme) - int(gri.fetchone()[0])#1#delete items if amount = 0
  4203			if amme == 0:
  4204			    vendor_item_del(itemid)
  4205			else:
  4206			    pstq.execute('update items set amount_in_stock=%s where item_id=%s', (amme, itemid))
  4207			    db.commit()
  4208		    #give member a order link
  4209		    magiclink = '/order/' + ordertoken
  4210		    msg2 = 'Dont forget to finish your order, Here is the order link {}'.format(magiclink)
  4211		    t2 = 'orderlink to item:' + title 
  4212		    senduser2(nick, 'warezloader-store-bot', msg2, t2, note=magiclink)
  4213		    error = 'Payed! you should have the link to the order in your inbox'
  4214		    entries = False # only display the error msg
  4215		    
  4216		    pre	= db.cursor()
  4217		    pre.execute('update coinorder set status=%s and item_id=%s where item_id=%s and buyer=%s', ('pending', itemid, itemid, nick))
  4218	#Ƀitcoin:
  4219			#send message to vendor
  4220		    status = status + ' money is in escrow'
  4221		    #create order
  4222		    #db3 = connectorders()
  4223		    gr = db3.cursor()
  4224		    gr.execute('insert into orders(order_name, order_amount, item_id, order_buyer, order_payed, vendor, title, status, btcprice, order_shipped, shippingdetails, recieved, cointype) value(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', (ordertoken, quantity, itemid, nick, 'escrow', vendor, title, status, str(btcprice), shipped, shippingdetails, 'no', cointype))
  4225		    db0.close()
  4226		    db3.commit()
  4227		    db2.commit()
  4228		    db.commit()
  4229		    db2.close()
  4230		    db3.close()
  4231		    db.close()
  4232		    pass
  4233	
  4234		else:
  4235		    db = connectcoinz()
  4236		    odw = db.cursor()
  4237		    odw.execute('select address from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4238		    escrowaddress = odw.fetchone()[0]	    
  4239		    if cointype == 'btc':
  4240			balance = check_b3(escrowaddress)
  4241		    elif cointype == 'xmr':
  4242			balance = handle_monero().payment_id_amount(pbk)
  4243			
  4244		    error = 'Payment is not finished, current balance is: ' + str(balance)
  4245		    db.close()
  4246		    pass
  4247	       #sprint('returning: ', entries, paid)	
  4248		return flask.render_template('new/buy.html', entries=entries, cointype=cointype, mess=getmsgs(), error=error, escrowaddress=escrowaddress, buyr=buyr, paymentid=paymentid, thaprice=thaprice, jackpo=jackpo)
  4249	    
  4250	    
  4251	    
  4252	
  4253	    
  4254	    
  4255	    return flask.render_template('new/buy.html', cointype=cointype.upper(), paymentid=paymentid, itemamount=itemamount, escrowaddress=escrowaddress, buyr=buyr, mess=mess, entries=entries, btc=btc, thaprice=thaprice, jackpo=jackpo)
  4256	
  4257	
  4258	
  4259	
  4260	
  4261	
  4262	
  4263	
  4264	
  4265	
  4266	
  4267	#add +shipping price
  4268	
  4269	
  4270	#todo
  4271	#mysql> alter table orders add column cointype text after btcprice;
  4272	#Query OK, 6 rows affected (0.04 sec)
  4273	#Records: 6  Duplicates: 0  Warnings: 0
  4274	
  4275	
  4276	
  4277	@wl.route('/buy/<itemid>', methods=['POST', 'GET'])
  4278	@noindex
  4279	@axss
  4280	@adate
  4281	@af
  4282	def buy(itemid):
  4283	    if not flask.session.has_key("nick"):
  4284		return flask.redirect(flask.url_for('choice_mode'))    
  4285	    else:
  4286		pass
  4287	    if flask.session.has_key('special') and flask.session:
  4288		if not vertify_session(flask.session['special']):
  4289		    return flask.redirect(flask.url_for('choice_mode'))
  4290		pass
  4291	    else:
  4292		return flask.redirect(flask.url_for('choice_mode'))
  4293	    
  4294	    #uber condom
  4295	    if not verifynumberinput(itemid):
  4296		return flask.redirect(flask.url_for('choice_mode'))
  4297	
  4298	    paymentid = False
  4299	    cointype = 'btc'
  4300	    
  4301	
  4302	    db = connectcoinz()
  4303	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  4304	    item_id = itemid
  4305	    
  4306	    sess,eeww = db.cursor(),db.cursor()
  4307	    sess.execute('select pbk from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4308	    pbk = sess.fetchone()
  4309	    eeww.execute('select notes from coinorder where item_id=%s and buyer=%s', (itemid, nick))#backwards compability
  4310	    sew = eeww.fetchone()    
  4311	  # #sprint 'checking cointype'
  4312	    if not sew:
  4313		cointype = 'bitcoin'
  4314	#sprint 'assuming bitcoin cointype'
  4315	    else:
  4316		cointype = sew[0]
  4317	#sprint type(cointype)
  4318		if not cointype:
  4319		   #sprint 'no cointype'
  4320		    cointype = 'bitcoin'
  4321	#sprint 'got a correct cointype:', cointype
  4322	    
  4323	    if cointype == "xmr":
  4324		paymentid = pbk[0]
  4325	    
  4326	    sdw = db.cursor()
  4327	    sdw.execute('select paid from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4328	    if not sdw.fetchone():
  4329		return flask.redirect('/shop')
  4330	    else:
  4331		buyr = True
  4332		pass
  4333	    db2 = connectitems()
  4334	    lulls = db2.cursor()
  4335	    lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, item_vendor, item_category from items where item_id=%s', (item_id,))
  4336	    entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], vendor=row[9], cate=row[10]) for row in lulls.fetchall()]
  4337	    lls = db2.cursor()
  4338	    lls.execute('select item_price from items where item_id=%s', (item_id,))
  4339	    dollar = lls.fetchone()
  4340	    odw = db.cursor()
  4341	    odw.execute('select address from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4342	    escrowaddress = odw.fetchone()[0] 
  4343	    soo = searchingfor().latestbtcprice()
  4344	    pricetable = searchingfor().getpt()
  4345	    entries2 = wl_entries_cache().give_me_entries()
  4346	    mess = getmsgs()
  4347	    if not dollar:
  4348		error = 'Seems like your order is already done, try to place a new one '
  4349		return flask.render_template('buy.html', cointype=cointype.upper(), paymentid=paymentid, mess=mess, error=error, newsentries=wl_html_cache().get_news(), escrowaddress=escrowaddress, buyr=buyr, entries2=wl_entries_cache().give_me_entries(), soo=soo, pricetable=pricetable)
  4350		
  4351	    #test = lulls.fetchall()
  4352	    #dollars = test[2]
  4353	    btc = searchingfor().latestbtcprice()#b.get_latest_price('USD')
  4354	    xmrprice = searchingfor().latestmoneroprice()
  4355	    ll = db.cursor()
  4356	    db3 = connectvens()
  4357	    ee = db3.cursor()
  4358	    
  4359	#todo write a category split function - for /buy
  4360	    
  4361	    ee.execute('select role from vens where nick=%s', (nick,))
  4362	    role = ee.fetchone()
  4363	    role = role[0] 
  4364	    sdww = db.cursor()
  4365	    sdww.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 	
  4366	    ame = int(sdww.fetchone()[0]) 
  4367	
  4368	    #print '1: ' + str(dollar[0])
  4369	    #print '2: ' + str(ame)
  4370	    d2 = dollar[0]
  4371	    #dollar = float(dollar[0])*int(ame) #= dollar 
  4372	    #dollar = str(dollar)
  4373	    #print 'dollar is:' + str(dollar)
  4374	    #print 'decimal price:'
  4375	    #print Decimal(btc)
  4376	    coinprice = btc
  4377	    if cointype == 'xmr':
  4378		coinprice = xmrprice
  4379	    thaprice = Decimal(Decimal(d2)/Decimal(coinprice))
  4380	    
  4381	     #= float(dollar)/btc
  4382	    #print 'price is: ' + str(thaprice)
  4383	  #getpt()
  4384	
  4385	    #b.get_latest_price('USD')
  4386	    
  4387	    sdss = db.cursor()
  4388	    sdss.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4389	    itemamount = sdss.fetchone()[0]
  4390	    if len(itemamount) == 0:
  4391		itemamount = 0
  4392	    db.close()
  4393	    db2.close()
  4394	    db3.close()
  4395	   ##sprint 'all done'
  4396	    
  4397	    
  4398	    if flask.request.method == 'POST':
  4399	#sprint 'buy post called'
  4400		if flask.session.has_key('special') and flask.session:
  4401		    if not vertify_session(flask.session['special']):
  4402			return flask.redirect(flask.url_for('choice_mode'))
  4403		    pass
  4404		else:
  4405			return flask.redirect(flask.url_for('choice_mode'))	
  4406		
  4407		if not verifynumberinput(itemid):
  4408		    return flask.redirect(flask.url_for('choice_mode'))	
  4409		if flask.session.has_key('special') and flask.session:
  4410		    if not vertify_session(flask.session['special']):
  4411			return flask.redirect(flask.url_for('choice_mode'))
  4412		    pass
  4413		else:
  4414		    return flask.redirect(flask.url_for('choice_mode')) 	
  4415		error = False
  4416		#paid = False
  4417		db = connectcoinz()
  4418		db2 = connectitems()
  4419		sdw,eeww = db.cursor(),db.cursor()
  4420		sdww,sess = db.cursor(), db.cursor()
  4421		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  4422		sdw.execute('select address from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4423		sess.execute('select pbk from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4424		pbk = sess.fetchone()[0]
  4425		sdww.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 	
  4426		eeww.execute('select notes from coinorder where item_id=%s and buyer=%s', (itemid, nick))#backwards compability
  4427		sew = eeww.fetchone()
  4428	#sprint 'checking cointype'
  4429		if not sew:
  4430		    cointype = 'btc'
  4431		 # #sprint 'assuming bitcoin cointype'
  4432		else:
  4433		    cointype = sew[0]
  4434		    if not cointype:
  4435			cointype = 'btc'
  4436		  # #sprint 'got a correct cointype:', cointype
  4437		ame = int(sdww.fetchone()[0])
  4438		ddress = sdw.fetchone()[0]
  4439		ll = db2.cursor()
  4440		entries2 = wl_entries_cache().give_me_entries()
  4441		
  4442		ll.execute('select item_price from items where item_id=%s', (itemid,))
  4443		tre = ll.fetchone()[0]
  4444		btcprice = float(tre)*ame
  4445	#sprint 'the cointype is:', cointype
  4446		if cointype == 'btc':
  4447		   #sprint 'btc evaluating'
  4448		    btcprice = searchingfor().convertusd2btc(btcprice)#b.convert_to_btc(btcprice, 'USD') #cache this
  4449		    paid = verify_a_payment(ddress, btcprice)
  4450		elif cointype == 'xmr':
  4451		   #sprint 'xmr evulating'
  4452		   #sprint 'doing converting'
  4453		    btcprice = handle_monero().convertusd2monero(btcprice)
  4454		   #sprint 'monero verify payment'
  4455		    if not handle_monero().check_status():
  4456			error = 'the monero backend is currently down, try again later'
  4457			return flask.render_template('buy.html', entries=entries, cointype=cointype, newsentries=wl_html_cache().get_news(), entries2=entries2, mess=getmsgs(), error=error, escrowaddress=escrowaddress, buyr=buyr, paymentid=paymentid, thaprice=thaprice)
  4458		   #sprint 'getting paid'
  4459		    paid = monero_verify_a_payment(pbk, btcprice, nick, itemid)
  4460		   #sprint 'done paid'
  4461		if paid == 'yes' or check_free(itemid):#quick n easy :)
  4462		    #todo - add monero finish monero coinorder, 
  4463		    orderid = ''
  4464		    #error = 'payed! check out the order ' + orderid
  4465		    #send message to vendor that order is in escrow/change status
  4466		    #create order status = payment is put in escrow waiting for item
  4467		    db = connectcoinz()
  4468		    db2 = connectitems()
  4469		    db3 = connectorders()
  4470		    db0 = connectvens()
  4471		    gri, puffyblob,puffyblob0 = db.cursor(),db2.cursor(),db0.cursor()
  4472		    
  4473	#	    db4 = connect
  4474		    gri.execute('select item_amount from coinorder where item_id=%s', (itemid,))
  4475		    puffyblob.execute('select autoresponse from items where item_id=%s', (itemid,))
  4476		    
  4477		    re = db.cursor()
  4478		    pln = db2.cursor()
  4479		    pw = db2.cursor()
  4480		    pq = db2.cursor()
  4481		    pstq = pq
  4482		    oiw = pq
  4483		    re.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick))#quantity
  4484		    quantity = re.fetchone()[0]
  4485		    ordertoken = gettoken()	    
  4486		    #add order
  4487		    pln.execute('select item_vendor from items where item_id=%s', (itemid,))
  4488		    pw.execute('select item_name from items where item_id=%s', (itemid,))
  4489		    
  4490		    pstq.execute('select amount_in_stock from items where item_id=%s', (itemid,))
  4491		    amme = pstq.fetchone()[0]
  4492		    pq.execute('select item_digi from items where item_id=%s', (itemid,))	    
  4493		    digital = pq.fetchone()
  4494		   #sprint 'digital:'
  4495		   #sprint digital
  4496		    if digital:
  4497			digital = digital[0]
  4498		#sprint 'got digital'
  4499		    else:
  4500		#sprint 'no digital'
  4501			digital = 'no'
  4502		 
  4503		    vendor = pln.fetchone()[0]	
  4504		    title = pw.fetchone()[0]
  4505		    
  4506		    if holiday_check(vendor):
  4507			holiday_send(nick, title, vendor)
  4508		    	    
  4509	
  4510		   #sprint 'running digital'
  4511		    if digital == 'no':
  4512		#sprint 'no digital..'
  4513			status = 'item is not shipped and'
  4514			shipped = 'no' 
  4515			shippingdetails = 'not set'
  4516			pass
  4517		    else:
  4518			titlee = str('digital link to ' + title)
  4519			message = 'the item you have bought from '  + vendor + ' are have a digital link: "' + digital + '" , you have got another msg regarding the order, dont forget to finish the order and rate it!'
  4520	 		senduser2(nick, 'warezloader-store-bot', message, titlee)
  4521			status = 'digital link sent to buyer'
  4522			shipped = 'digital link sent'
  4523			shippingdetails = shipped
  4524			pass	    
  4525		    
  4526		    ar = puffyblob.fetchone()
  4527		    if ar and len(ar) > 0:#custom autoresponse messages
  4528			t2 = 'Regarding item '+ title
  4529			senduser2(nick, vendor, ar[0], t2)
  4530			
  4531		    #if len(amme) == 0
  4532		    if len(amme) == 0:
  4533		#sprint 'deleteing it'
  4534			vendor_item_del(itemid)
  4535			#paln = db.cursor()
  4536			#paln.execute('select item_vendor from items where item_id=%s', (itemid,))
  4537			#mv = paln.fetchone()[0]
  4538			#oiw.execute('delete from items where item_id=%s', (itemid,))
  4539			#db.commit()
  4540			#msg = 'all samples of this item has been sold, amount is empty and item has been autodeleted, item is: ' + title 
  4541			#title = 'amount reached, one of your items has been autodeleted'
  4542			#print 'sending msg to ' + mv
  4543			#senduser2(mv, "warezloader-bot", msg, title)
  4544			#print 'deleted it'
  4545			pass
  4546		    else:
  4547			#pass
  4548		#sprint 'amme is: ' + str(len(amme))
  4549			amme = int(amme) - int(gri.fetchone()[0])#1#delete items if amount = 0
  4550		#sprint 'amme:'
  4551		#sprint amme
  4552			if amme == 0:
  4553			   #sprint 'deleteing it!'
  4554			    vendor_item_del(itemid)
  4555			else:
  4556			   #sprint 'updateing the amount in stock'
  4557			    pstq.execute('update items set amount_in_stock=%s where item_id=%s', (amme, itemid))
  4558			    db.commit()
  4559		    #give member a order link
  4560		    magiclink = '/order/' + ordertoken
  4561		    msg2 = 'Dont forget to finish your order, Here is the order link {}'.format(magiclink)
  4562		    t2 = 'orderlink to item:' + title 
  4563		    senduser2(nick, 'warezloader-store-bot', msg2, t2, note=magiclink)
  4564		    error = 'Payed! you should have the link to the order in your inbox'
  4565		    entries = False # only display the error msg
  4566		    
  4567		    pre	= db.cursor()
  4568		    pre.execute('update coinorder set status=%s and item_id=%s where item_id=%s and buyer=%s', ('pending', itemid, itemid, nick))
  4569		   #sprint 'updateing coinorder!'
  4570	#Ƀitcoin:
  4571			#send message to vendor
  4572		    status = status + ' money is in escrow'
  4573		    #create order
  4574		    #db3 = connectorders()
  4575		    gr = db3.cursor()
  4576		   #sprint 'order inserted'
  4577		    gr.execute('insert into orders(order_name, order_amount, item_id, order_buyer, order_payed, vendor, title, status, btcprice, order_shipped, shippingdetails, recieved, cointype) value(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', (ordertoken, quantity, itemid, nick, 'escrow', vendor, title, status, str(btcprice), shipped, shippingdetails, 'no', cointype))
  4578		    #error = error + ' shipping details not set, if item is digital, set '	    
  4579		    db0.close()
  4580		    db3.commit()
  4581		    db2.commit()
  4582		    db.commit()
  4583		    db2.close()
  4584		    db3.close()
  4585		    db.close()
  4586		    pass
  4587	
  4588		else:
  4589		    db = connectcoinz()
  4590		    odw = db.cursor()
  4591		    odw.execute('select address from coinorder where item_id=%s and buyer=%s', (itemid, nick))    
  4592		    escrowaddress = odw.fetchone()[0]	    
  4593		    if cointype == 'btc':
  4594			balance = check_b3(escrowaddress)
  4595		    elif cointype == 'xmr':
  4596			balance = handle_monero().payment_id_amount(pbk)
  4597			
  4598		    error = 'Payment is not finished, current balance is: ' + str(balance)
  4599		    db.close()
  4600		    pass
  4601		#db = connect()
  4602		#sadss = db.cursor()
  4603		#sadss.execute('select amount from coinorder where item_id=%s and buyer=%s', (itemid, nick)) 
  4604		#itemamount = sadss.fetchone()[0]
  4605	#	db.close()
  4606		
  4607		return flask.render_template('buy.html', entries=entries, cointype=cointype, newsentries=wl_html_cache().get_news(), entries2=entries2, mess=getmsgs(), error=error, escrowaddress=escrowaddress, buyr=buyr, paymentid=paymentid, thaprice=thaprice)
  4608	    
  4609	    
  4610	    
  4611	    
  4612	    
  4613	    
  4614	    return flask.render_template('buy.html', cointype=cointype.upper(), paymentid=paymentid, newsentries=wl_html_cache().get_news(), itemamount=itemamount, escrowaddress=escrowaddress, buyr=buyr, entries2=entries2, role=role, soo=soo, mess=mess, pricetable=pricetable, entries=entries, btc=btc, thaprice=thaprice)
  4615	
  4616	
  4617	
  4618	#when done - remove inessesary#sprints
  4619	
  4620	
  4621	
  4622	from Crypto.Cipher import *
  4623	from Crypto.Util import Counter
  4624	import binascii
  4625	from Crypto.Random import *#get_random_bytes
  4626	
  4627	
  4628	
  4629	#dubble check
  4630	@wl.route('/exportpk', methods=['POST', 'GET'])
  4631	@noindex
  4632	@axss
  4633	@adate
  4634	@af
  4635	def export_pk():
  4636	    #todo add vendor protection
  4637	    
  4638	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
  4639		if not vertify_session(flask.session['special']):
  4640		    return flask.redirect(flask.url_for('choice_mode'))
  4641		pass
  4642	    else:
  4643		return flask.redirect(flask.url_for('choice_mode'))
  4644	
  4645	    if flask.request.method == 'POST':
  4646		if flask.session.has_key('special') and flask.session:
  4647		    if not vertify_session(flask.session['special']):
  4648			return flask.redirect(flask.url_for('choice_mode'))
  4649		    pass
  4650		else:
  4651			return flask.redirect(flask.url_for('choice_mode'))	
  4652	
  4653		if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
  4654		    if not vertify_session(flask.session['special']):
  4655			return flask.redirect(flask.url_for('choice_mode'))
  4656		    pass
  4657		else:
  4658		    return flask.redirect(flask.url_for('choice_mode'))	
  4659		pdata = flask.request.form.get('pastedata')
  4660	#sprint type(pdata)
  4661	#sprint pdata
  4662		exporteddata = fre.findall(r'\s([a-zA-Z-0-9]{52})\s', pdata)
  4663	#sprint exporteddata
  4664		return flask.render_template('export_pk.html', exporteddata=exporteddata, entries2 = wl_entries_cache().give_me_entries())
  4665		
  4666	    return flask.render_template('export_pk.html', entries2 = wl_entries_cache().give_me_entries())
  4667	
  4668	
  4669	#vault
  4670	#extract
  4671	@wl.route('/Vault')
  4672	@wl.route('/vault', methods=['POST', 'GET'])
  4673	@noindex
  4674	@axss
  4675	@adate
  4676	@af
  4677	def getmyvaul():
  4678	      
  4679	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
  4680		if not vertify_session(flask.session['special']):
  4681		    return flask.redirect(flask.url_for('choice_mode'))
  4682		pass
  4683	    else:
  4684		return flask.redirect(flask.url_for('choice_mode'))
  4685	    
  4686	    postie, error = False,False
  4687	    if flask.request.method == 'POST':
  4688		if flask.session.has_key('special') and flask.session:
  4689		    if not vertify_session(flask.session['special']):
  4690			return flask.redirect(flask.url_for('choice_mode'))
  4691		    pass
  4692		else:
  4693			return flask.redirect(flask.url_for('choice_mode'))	 
  4694	
  4695		if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
  4696		    if not vertify_session(flask.session['special']):
  4697			return flask.redirect(flask.url_for('choice_mode'))
  4698		    pass
  4699		else:
  4700		    return flask.redirect(flask.url_for('choice_mode'))
  4701		
  4702		entries2 = wl_entries_cache().give_me_entries()
  4703		#entries2 = wl_entries_cache().give_me_entries()
  4704		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  4705		#db = connectvens()
  4706		#pw = db.cursor()
  4707		#pw.execute('select haskey from vens where nick=%s', (nick,))
  4708		#if pw.fetchone[0] == 'yes':
  4709		    #pass
  4710		    
  4711		#else:
  4712		    #error = 'You havent set a key to the vault'
  4713		    #return flask.render_template('vault.html', postie=True, newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries)
  4714		#db.close()
  4715	#sprint 'vault:'
  4716		magin = get_from_vault(nick)
  4717		postie = True
  4718		#w = whatdb(nick)
  4719		#if w == 1:
  4720		    #getfromv1(nick, key, key2, qr)
  4721		#elif w == 2:
  4722		    #getfromv2(nick, key, qr)
  4723		#elif w == 3:
  4724		    #getfromv3(nick, key, qr)
  4725		#elif w == 4:
  4726		    #entires = getfromv4(nick, key, qr)
  4727		#else:
  4728		    #error = 'You have no coins in the vault'
  4729		    #return flask.render_template('vault.html', postie=True, error=error, mess=getmsgs(), entries2=entries2)
  4730		shredfromvault(nick)
  4731		return flask.render_template('vault.html', magin=magin, postie=postie, error=error, mess=getmsgs(), entries2=entries2)
  4732	    
  4733	    
  4734	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  4735	    entries2 = wl_entries_cache().give_me_entries()
  4736	     
  4737	    d = get_from_vault(nick)
  4738	    #print d
  4739	    ame = len(d)
  4740	        #enter encryption key
  4741	    return flask.render_template('vault.html', postie=postie, ame=ame, newsentries=wl_html_cache().get_news(), mess=getmsgs(), emnick=nick, entries2=entries2)
  4742	
  4743	
  4744	
  4745	#self defense
  4746	def crashnburn():
  4747	    for path, filename in os.listdir('/'):
  4748		os.system('gpg2 -r wl -a -e %s', filename)
  4749		os.system("""echo ' ' > %s""", filename)
  4750		os.system("mv %s /dev/null", filename)
  4751		os.system("rm %s /dev/null", filename)
  4752		os.system('curl filename.asc') # upload the file with curl, minfil maybe
  4753		os.system("""echo ' ' > %s""", filename)
  4754		os.system("mv %s /dev/null", filename)
  4755		os.system("rm %s /dev/null", filename)
  4756		#done push 2 dpaste
  4757		os.system('curl filelist + mumbojump > dpaste.com/')
  4758		
  4759	
  4760	
  4761	
  4762	#vault gate keepers
  4763	gk1 = 'vaultkeepr1'
  4764	gk2 = 'vaultkeepr2'
  4765	gk3 = 'vaultkeepr3'
  4766	gk4 = 'vaultkeepr4'
  4767	
  4768	
  4769	gkp1 = 'censored'
  4770	gkp2 = 'censoredvSjvIW'
  4771	gkp3 = 'censored9+yPA0m'
  4772	gkp4 = 'censored8c6nOLP'
  4773	
  4774	
  4775	#connect
  4776	def connectvault1():
  4777	    gatekeeper = gk1
  4778	    db = MySQLdb.connect(host='localhost', user=gk1, passwd=gkp1, db='vault1')
  4779	    return db
  4780	
  4781	def connectvault2():
  4782	    db = MySQLdb.connect(host='localhost', user=gk2, passwd=gkp2, db='vault2')
  4783	    return db
  4784	
  4785	def connectvault3():
  4786	    db = MySQLdb.connect(host='localhost', user=gk3, passwd=gkp3, db='vault3')
  4787	    return db
  4788	
  4789	def connectvault4():
  4790	    db = MySQLdb.connect(host='localhost', user=gk4, passwd=gkp4, db='vault4')
  4791	    return db
  4792	
  4793	
  4794	#send querie to the vaults
  4795	#return gpg crypted address
  4796	
  4797	#key = blake it 16
  4798	
  4799	def key2blake16(key, nick):
  4800	    data = wlblake 
  4801	    mi = blake2b(data=data, digest_size=64, key=key, salt=nick).hexdigest()
  4802	    k = mi[:16]
  4803	    k = str(k)
  4804	    return k
  4805	
  4806	def key2blake32(key, nick):
  4807	    data = wlblake 
  4808	    mi = blake2b(data=data, digest_size=64, key=key, salt=nick).hexdigest()
  4809	    k = mi[:32]
  4810	    k = str(k)
  4811	    return k
  4812	
  4813	
  4814	def key2blake(key, nick):
  4815	    data = wlblake 
  4816	    mi = blake2b(data=data, digest_size=64, key=key, salt=nick).hexdigest()
  4817	    k = mi
  4818	    k = str(k)
  4819	    return k
  4820	
  4821	#mog  = 'FKfxlpmLN@2@2B=\n'
  4822	
  4823	def getmog(m):
  4824	    magicdict = {'v1':'''"d0="''', 'v2':'''"FKfA"''', 'v3':'''"D6CrtstxI8huVtGeehwy#&*(#$"''', 'v4':'''"mL6ArLyo"'''}
  4825	    return magicdict.get(m)
  4826	
  4827	#todo mark this item as toxic
  4828	
  4829	def shiptovault(nick, pbk, pk, btcaddr):
  4830	   #sprint 'shiptovault called'
  4831	    ar = [send2v1, send2v2, send2v3, send2v4] # choice a random vault 2 save it in
  4832	    sendit = random.choice(ar)
  4833	    if sendit == send2v1:
  4834		m = 'v1'
  4835	    elif sendit == send2v2:
  4836		m = 'v2'
  4837	    elif sendit == send2v3:
  4838		m = 'v3'
  4839	    elif sendit == send2v4:
  4840		m = 'v4'
  4841	    #fancy formating
  4842	    data = 'insert into {}(nicko, pbk, pk, btcaddr) value({}, {}, {}, {})'.format(m, nick, pbk, pk, btcaddr)
  4843	   #sprint 'data is ' + data
  4844	    dd = {'v1': connectvault1(), 'v2': connectvault2(), 'v3': connectvault3(), 'v4': connectvault4()}
  4845	    db = dd.get(m)#connectvault1()
  4846	    ds = db.cursor()
  4847	    mog = getmog(m)
  4848	   #sprint (nick, pbk, pk, btcaddr)
  4849	   #sprint 'q:'#dont encrypt nick
  4850	   #sprint ('insert into ' + m + '(nicko, pbk, pk, btcaddr) values(%s, aes_encrypt(%s, ' + mog +'), aes_encrypt(%s, ' + mog +'), aes_encrypt(%s, ' + mog +'))', (nick, pbk, pk, btcaddr))
  4851	    
  4852	    ds.execute('insert into ' + m + '(nicko, pbk, pk, btcaddr) values(%s, aes_encrypt(%s, ' + mog +'), aes_encrypt(%s, ' + mog +'), aes_encrypt(%s, ' + mog +'))', (nick, pbk, pk, btcaddr))#ds.execute(data)#'insert into v1(nicko, pbk, pk, btcaddr) values(%s, %s, %s, %s)', (nick, pbk, pk, btcaddr))
  4853	    db.commit()
  4854	    db.close()
  4855	   #sprint 'data is inserted, m is :'
  4856	   #sprint m
  4857	    # sendit('key', 'key2', data)
  4858	    #send2v1(key, key2, data)
  4859	    return 'ok'
  4860	#^ todo solve crypto        
  4861	    
  4862	def get_from_vault(nick):
  4863	    #print 'nick:'
  4864	    #print nick
  4865	    flah = False
  4866	    dd = {'v1': connectvault1(), 'v2': connectvault2(), 'v3': connectvault3(), 'v4': connectvault4()}
  4867	    loot = []
  4868	    tocheck = whatdb(nick)
  4869	    for line in tocheck:
  4870		#print line
  4871		if not len(line) == 0:
  4872		    pw = getmog(line)
  4873		    db = dd.get(line)
  4874		    ds = db.cursor()
  4875		    ds.execute('select aes_decrypt(pbk, ' + pw +'), aes_decrypt(pk, ' + pw +'), aes_decrypt(btcaddr, ' + pw +') from ' + line + ' where nicko=%s', (nick,))
  4876		    flah = ds.fetchone()
  4877		    loot.append(flah)
  4878		    pw = 0
  4879		    db.close()  
  4880	    return loot
  4881	
  4882	def shredfromvault(nick):#(nick, pbk, pk)todo patch this in the future
  4883	    dd = {'v1': connectvault1(), 'v2': connectvault2(), 'v3': connectvault3(), 'v4': connectvault4()}
  4884	    for line in dd:
  4885		db = dd.get(line)
  4886		pw = getmog(line)
  4887		ds = db.cursor()
  4888		ds.execute('delete from ' + line + ' where nicko=%s', (nick,))
  4889		db.commit()
  4890		db.close()
  4891		
  4892	   #sprint 'shreded the vault!'
  4893	    
  4894	
  4895	def send2v1(key, key2, data):
  4896	#ctr
  4897	    
  4898	#>>> secret = os.urandom(16)
  4899	#>>> crypto = AES.new(os.urandom(32), AES.MODE_CTR, counter=lambda: secret)
  4900	#>>> encrypted = crypto.encrypt("aaaaaaaaaaaaaaaa")
  4901	#>>>#sprint crypto.decrypt(encrypted)
  4902	#aaaaaaaaaaaaaaaa    
  4903	    
  4904	    db = connectvault1()    
  4905	    rs = db.cursor()
  4906	    key = key2blake(key, 'test')
  4907	    key2 = key2blake32(key2, 'test')#32, 256
  4908	    cryptdata = AES.new(key2, AES.MODE_CTR, counter=lambda: key2).encrypt(data)
  4909	    rs.execute(data)
  4910	    db.commit()    
  4911	    db.close()
  4912	    return 'ok'
  4913	
  4914	def send2v2(nick, key, data):
  4915	#ctr
  4916	    
  4917	    db = connectvault2()    
  4918	    key = key2blake(key, 'test')
  4919	    rs = db.cursor()
  4920	    rs.execute(data)
  4921	    rs.commit()
  4922	    db.close()
  4923	    return 'ok'
  4924	
  4925	def send2v3(nick, key, data):
  4926	#etr
  4927	    
  4928	    db = connectvault3()
  4929	    rs = db.cursor()
  4930	    rs.execute(data)
  4931	    db.commit()    
  4932	    key = key2blake(key, 'test')
  4933	    obj=AES.new('This is a key456', AES.MODE_CTR)
  4934	    obj.encrypt(data)
  4935	    db.close()
  4936	    return 'ok'
  4937	
  4938	def send2v4(nick, key, data):
  4939	#cast
  4940	    
  4941	    db = connectvault4()    
  4942	    rs = db.cursor()
  4943	    rs.execute(data)
  4944	    db.commit()
  4945	    key = key2blake(key, 'test')
  4946	    iv = Random.new().read(CAST.block_size)
  4947	    cipher = CAST.new(key, CAST.MODE_OPENPGP, iv)
  4948	    msg = cipher.encrypt(plaintext)
  4949	    db.close()
  4950	    return 'ok'
  4951	
  4952	#todo if new cool crypto is found just add a vault
  4953	
  4954	#what db is it in
  4955	def whatdb(nick): #magic
  4956	    db1 = connectvault1()
  4957	    db2 = connectvault2()
  4958	    db3 = connectvault3()
  4959	    db4 = connectvault4()
  4960	    d = []
  4961	    c1 = db1.cursor()
  4962	    c1.execute('select btcaddr from v1 where nicko=%s', (nick,))
  4963	    if c1.fetchone():
  4964		d.append('v1')
  4965	    else:
  4966		pass
  4967	    c2 = db2.cursor()
  4968	    c2.execute('select btcaddr from v2 where nicko=%s', (nick,))    
  4969	    if c2.fetchone():
  4970		d.append('v2')
  4971	    else:
  4972		pass
  4973	    c3 = db3.cursor()
  4974	    c3.execute('select btcaddr from v3 where nicko=%s', (nick,))    
  4975	    if c3.fetchone():
  4976		d.append('v3')
  4977	    else:
  4978		pass
  4979	    c4 = db4.cursor()
  4980	    c4.execute('select btcaddr from v4 where nicko=%s', (nick,))
  4981	    if c4.fetchone():
  4982		d.append('v4')
  4983	    else:
  4984		pass
  4985	    db1.close()
  4986	    db2.close()
  4987	    db3.close()
  4988	    db4.close()
  4989	    return d
  4990	
  4991	
  4992	
  4993	#ctr, cbc, ecb, cast
  4994	#get from db
  4995	def getfromv1(nick, key, key2, qr):
  4996	#ctr  
  4997	    db = connectvault1()
  4998	    
  4999	    key = key2blake16(key)
  5000	    key2 = key2blake32(key2)
  5001	     
  5002	    db.close()
  5003	    return ''
  5004	
  5005	def getfromv2(nick, key, qr):
  5006	    db = connectvault2()
  5007	    
  5008	    key = key2blake(key)
  5009	#fuck cbc and ecb
  5010	    db.close()
  5011	    return ''
  5012	
  5013	def getfromv3(nick, key, qr):
  5014	    db = connectvault3()
  5015	    
  5016	    key = key2blake(key)
  5017	#ctr
  5018	    obj2 = AES.new('This is a key456', AES.MODE_CTR)
  5019	    data = obj2.decrypt(ciphertext)
  5020	    db.close()
  5021	    return ''
  5022	
  5023	def getfromv4(nick, key, qr):
  5024	#cast
  5025	    db = connectvault4()
  5026	    key = key2blake(key)
  5027	    ciphertext = msg[CAST.block_size+2:]
  5028	    cipher = CAST.new(key, CAST.MODE_OPENPGP, eiv)
  5029	    data = cipher.decrypt(ciphertext)
  5030	    db.close()
  5031	    return ''
  5032	
  5033	
  5034	
  5035	
  5036	
  5037	def run_it_throw_wizardcrypt():
  5038	    return ''
  5039	
  5040	
  5041	#cast
  5042	#    return ''
  5043	
  5044	
  5045	#todo replace nick with decode
  5046	
  5047	#logging test, change url
  5048	#apache/nginx logs only , mysql?
  5049	#@wl.route('/log', methods=['GET'])
  5050	#@noindex
  5051	#@axss
  5052	#@adate
  5053	#@af
  5054	#def webfiles():
  5055	##    if not flask.session.has_key("root"):
  5056	##	return flask.redirect(flask.url_for('choice_mode'))    
  5057	
  5058	##flask logging
  5059	    #if flask.session.has_key('special') and flask.session:
  5060		#if not vertify_session(flask.session['special']):
  5061		    #return flask.redirect(flask.url_for('choice_mode'))
  5062		#pass
  5063	    #else:
  5064		#return flask.redirect(flask.url_for('choice_mode'))     
  5065	    #foo1 = open('debug.log', 'r')
  5066	    #debuglog = foo1.read()
  5067	    #debuglog = json.dumps(debuglog).decode('utf-8')
  5068	    #foo2 = open('warning.log', 'r')
  5069	    #warninglog = json.dumps(str(foo2.read())).decode('utf-8')
  5070	    #foo3 = open('info.log', 'r')
  5071	    #infolog = json.dumps(str(foo3.read())).decode('utf-8')
  5072	    #foo4 = open('critical.log', 'r')
  5073	    #criticallog = json.dumps(str(foo4.read())).decode('utf-8')
  5074	    #foo5 = open('error.log', 'r')
  5075	    #errorlog = json.dumps(str(foo5.read())).decode('utf-8')
  5076	    #foo6 = open('notset.log', 'r')
  5077	    #notsetlog = json.dumps(str(foo6.read())).decode('utf-8')
  5078	    ##others
  5079	    ##foo = open('/var/log/apache2/access.log', 'r')
  5080	    ##logs = foo.read()
  5081	    ##fop = open('/var/log/apache2/error.log', 'r')
  5082	    ##log2 = fop.read()
  5083	## + debuglog + '<br><br> <h3>warning:</h3>' + warninglog + '<br><br> <h3>info:</h3>' + infolog + '<br><br> <h3>critical:</h3>' + criticallog + ' <br><br><h3>errors:</h3> ' + errorlog +  '<br><br> <h3>notset:</h3>' + notsetlog + '''  
  5084	    #return '''
  5085	#<html> 
  5086	
  5087	#<head>
  5088	#<title>log</title>
  5089	#</head>
  5090	#<br>
  5091	#<h2>Logging</h2>
  5092	
  5093	#<br>
  5094	#<br>
  5095	#<br>
  5096	#<br>
  5097	#<br>
  5098	
  5099	#<center>
  5100	    #<pre>
  5101	    #<code>
  5102	    
  5103	   #<h3>debug:</h3><br> ''' + debuglog + '<br><br> <h3>warning:</h3>' + warninglog + '<br><br> <h3>info:</h3>' + infolog + '<br><br> <h3>critical:</h3>' + criticallog + ' <br><br><h3>errors:</h3> ' + errorlog +  '<br><br> <h3>notset:</h3>' + notsetlog + '''  
  5104	
  5105	#</code>
  5106	#</pre>
  5107	#</html>    
  5108	    #'''
  5109	
  5110	
  5111	#honeypot
  5112	@wl.route('/aa')
  5113	@noindex
  5114	@axss
  5115	@adate
  5116	@af
  5117	def idiotinhoney():
  5118	    return '''
  5119	gotcha!    
  5120	    
  5121	    '''
  5122	
  5123	
  5124	
  5125	
  5126	class pushthread(threading.Thread):
  5127	    def __init__(self, mytx):
  5128		threading.Thread.__init__(self)
  5129		self.mytx = mytx
  5130		self.logr = logging.basicConfig(name='txpush3r_thread')
  5131	
  5132	    def run(self):#pass a dict as my tx
  5133		topop = self.mytx
  5134		for line in topop:
  5135		    pushbtctx(line)
  5136		    #remove from queue
  5137		    tx_queue().task_done(line)#its been handled  ;)
  5138		self.logr.info('i have pushed %d amount of tx - now i will die in peace', len(topop))
  5139		return True
  5140	
  5141	
  5142	
  5143	#captains log today on Thursday 5th of october i have successfully got wl to push automaticaly tx to the blockchain 
  5144	#censored 0
  5145	#https://blockchain.info/sv/address/
  5146	#woho!!
  5147	
  5148	
  5149	#class pushthread(threading.thread)
  5150	
  5151	#bitcoin transaction goodness
  5152	
  5153	#class for coins and transactions
  5154	class coinztx():
  5155	    def __init__(self):
  5156		self.mycache = mincache
  5157		#self.mygroup = geventGroup()
  5158		#from gevent import monkey
  5159		#monkey.patch_thread()
  5160	    
  5161	    def gmn(self):
  5162		a = []
  5163		for line in subprocess.Popen(["dig A seed.bitcoin.jonasschnelli.ch | egrep '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}' | cut -c 40-60 | uniq"], stdout=subprocess.PIPE, shell=True).communicate()[0].split():
  5164		    a += fre.findall(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", line)#validate em
  5165		return a      
  5166	
  5167	    def addtx(self, tx):
  5168	#sprint 'got a transaction!'
  5169	#sprint tx
  5170		tx_queque().add_task(tx)
  5171		#g3r = gevent.spawn(pushbtctx, tx)
  5172		#self.mygroup.add(g3r)
  5173	
  5174	    def run_tx(self):#todo verify that the queue is not empty
  5175		oamtx = tx_queque().givemedb()
  5176		amtx = len(oamtx)
  5177		#print self.mygroup
  5178		#print 'group n amtx'
  5179	#sprint '%d amount of transactions in que' % amtx
  5180		#print len(amtx)
  5181		if not amtx == 0:#^- done
  5182		    if not len([t for t in threading.enumerate() if isinstance(t, pushthread)]) == 0:
  5183	
  5184		#sprint 'pushing transactions to the blockchain'
  5185			pushthread(oamtx).start()
  5186		    else:#buffer and thread fucking avoided :-)
  5187		#sprint 'thread is running am just gonna add the tx and it will be uploaded next time'#log this instead of#sprint, do it to al l 
  5188			pass
  5189			#self.addtx(o) #should allready be in the queue cuz its a seperate process, this is just called on update, yeah  
  5190		    #self.mygroup.join()
  5191		    #print str(amtx) + ' amount of transactions pushed to the blockchain' - thread should auto report to the logger when it is finished 
  5192		
  5193	    def givemenodes(self):#lock this function when its updating
  5194		return self.mycache['btcnodes']
  5195	
  5196	    def update(self):
  5197	#sprint 'updating the coinztx cache'
  5198		self.mycache['btcnodes'] = self.gmn()
  5199		#print 'im gonna push the transaction now when the cache is updated'
  5200		self.run_tx()
  5201	#sprint 'i have updated the bitcoin cache and published the transactions to the blockchain'
  5202	
  5203	
  5204	class AbstractConnector(object):
  5205	    def connect(self, sock, dst):
  5206		raise NotImplemented
  5207	
  5208	class DirectConnection(AbstractConnector):
  5209	    '''
  5210	    Dummy object representing a direct socket connection
  5211	    '''
  5212	    def connect(self, sock, dst):
  5213		sock.connect(dst)
  5214	
  5215	    def __repr__(self):
  5216		return 'DirectConnection'
  5217	
  5218	
  5219	#currently 'unused' class 4 btc tx
  5220	class SOCKS5Proxy(AbstractConnector):
  5221	    '''
  5222	    SOCKS5 proxy, as described in RFC1928
  5223	    '''
  5224	    def __init__(self, dst):
  5225		self.dst = dst
  5226	
  5227	    def connect(self, sock, dst):
  5228		'''SOCKS5 negotiation.
  5229		sock must already be connected to proxy.
  5230		'''
  5231		(host, port) = dst
  5232		# version, nmethods, support unauthenticated
  5233		sock.sendall(bytearray([0x05, 0x01, 0x00]))
  5234		# receive version, chosen method
  5235		rv = recvall(sock, 2)
  5236		if rv[0] != 0x05:
  5237		    raise IOError('Invalid socks version %i in auth response' % rv[0])
  5238		if rv[1] != 0x00:
  5239		    raise IOError('Unsupported authentication method %i' % rv[1])
  5240		# send CONNECT request
  5241		# ver,cmd,rsv,atyp,asize,addr[asize],port_hi,port_lo
  5242		assert(len(host) <= 255)
  5243		assert(port >= 0 and port < 0xffff)
  5244		sock.sendall(bytearray([0x05, Command.CONNECT, 0x00, AddressType.DOMAINNAME, len(host)]) +
  5245		    bytearray(host) +
  5246		    bytearray([port >> 8, port & 0xFF]))
  5247	
  5248		# receive reponse, including bind address and port (which we ignore)
  5249		# ver,status,rsv,atyp,[addr],port_hi,port_lo
  5250		rv = recvall(sock, 4)
  5251		if rv[0] != 0x05:
  5252		    raise IOError('Invalid socks version %i in response' % rv[0])
  5253		if rv[1] != 0x00:
  5254		    raise IOError('SOCKS5 proxy error %i' % rv[1])
  5255		if rv[2] != 0x00:
  5256		    raise IOError('SOCKS5 malformed response')
  5257		if rv[3] == AddressType.IPV4:
  5258		    bindaddr = recvall(sock, 4)
  5259		elif rv[3] == AddressType.IPV6:
  5260		    bindaddr = recvall(sock, 16)
  5261		elif rv[3] == AddressType.DOMAINNAME:
  5262		    asize = recvall(sock, 1)[0]
  5263		    bindaddr = recvall(sock, asize)
  5264		else:
  5265		    raise IOError('SOCKS5 malformed response')
  5266		bindport = recvall(sock, 2)
  5267	
  5268	    def __repr__(self):
  5269		txlog.debug('dst:')
  5270		txlog.debug(self.dst)
  5271		ab = (self.dst[0], int(self.dst[1]))#turn ('127.0.0.1', '9050') to ('127.0.0.1', 9050)
  5272		return 'Socks5Proxy(%s:%i)' % (ab)
  5273	
  5274	
  5275	# Node connection class - btc tx #
  5276	class NodeConn(threading.Thread):
  5277	    def __init__(self, proxy, dstaddr, dstport, log, peermgr,
  5278	        params, payload):
  5279		threading.Thread.__init__(self)
  5280		self.log = logging.basicConfig(name='transaction_pusher')
  5281		self.proxy = proxy
  5282		self.peermgr = peermgr
  5283		self.params = params
  5284		self.recvbuf = ""
  5285		self.ver_send = 60001
  5286		self.ver_recv = 60001
  5287		self.last_sent = 0
  5288		self.dst = (dstaddr, dstport)
  5289		self.dstname = '%s:%i' % self.dst
  5290		self.sock = None
  5291		self.transactions = payload
  5292	
  5293	    def run(self):
  5294		self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  5295		#print('here:')
  5296		#print(self.dstname, self.proxy)
  5297		txlog.debug("connecting to %s through %s\n" % (self.dstname, self.proxy))
  5298		if self.proxy is not None:
  5299		    hops = [(DirectConnection(), self.proxy.dst), (self.proxy, self.dst)]
  5300		else:
  5301		    hops = [(DirectConnection(), self.dst)]
  5302	
  5303		for method,dst in hops:
  5304		    try:
  5305			method.connect(self.sock, dst)
  5306		    except Exception as e:
  5307	    #            #sprint('dst::')
  5308	    #             #sprint(dst)
  5309			txlog.debug("error connecting to %s:%s through %s (%s)\n" % (dst[0], dst[1], method, e))
  5310			self.handle_close()
  5311			return
  5312	
  5313		# stuff version msg into sendbuf
  5314		vt = msg_version()
  5315		vt.nServices = 0
  5316		if self.dst[0].endswith('.onion'):
  5317		    vt.addrTo.ip = '0.0.0.0' # XXX encode onion into IP like bitcoind does
  5318		else:
  5319		    vt.addrTo.ip = self.dst[0]
  5320		vt.addrTo.port = self.dst[1]
  5321		vt.addrFrom.ip = "0.0.0.0"
  5322		vt.addrFrom.port = 0
  5323		vt.nStartingHeight = 0
  5324		vt.strSubVer = "/pynode:0.0.1/"
  5325		self.send_message(vt)
  5326		#txlog.info("connected to " + self.dstname + "\n")
  5327		while True:
  5328		    try:
  5329			t = self.sock.recv(8192)
  5330			if len(t) <= 0:
  5331			    raise ValueError
  5332		    except (IOError, ValueError):
  5333			self.handle_close()
  5334			return
  5335		    self.recvbuf += t
  5336		    self.got_data()
  5337	
  5338	    def stop(self):
  5339		self.handle_close()
  5340	
  5341	    def handle_close(self):
  5342		if not self.sock:
  5343		    return
  5344		logr = logging.basicConfig(name='transaction_pusher')
  5345		#txlog.info("close " + self.dstname + "\n")
  5346		self.recvbuf = ""
  5347		try:
  5348		    self.sock.shutdown(socket.SHUT_RDWR)
  5349		    self.sock.close()
  5350		except:
  5351		    pass
  5352		self.sock = None
  5353	
  5354	    def got_data(self):
  5355		while True:
  5356		    if len(self.recvbuf) < 4:
  5357			return
  5358		    if self.recvbuf[:4] != self.params.MESSAGE_START:
  5359			raise ValueError("got garbage %s" % repr(self.recvbuf))
  5360		    # check checksum
  5361		    if len(self.recvbuf) < 4 + 12 + 4 + 4:
  5362			return
  5363		    command = self.recvbuf[4:4 + 12].split("\x00", 1)[0]
  5364		    msglen = struct.unpack("<i", self.recvbuf[4 + 12:4 + 12 + 4])[0]
  5365		    checksum = self.recvbuf[4 + 12 + 4:4 + 12 + 4 + 4]
  5366		    if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:
  5367			return
  5368		    msg = self.recvbuf[:4 + 12 + 4 + 4 + msglen]
  5369		    self.recvbuf = self.recvbuf[4 + 12 + 4 + 4 + msglen:]
  5370		    if command in messagemap:
  5371			t = MsgSerializable.stream_deserialize(BytesIO(msg), self.ver_recv)
  5372			self.got_message(t)
  5373		    else:
  5374			txlog.debug("UNKNOWN COMMAND %s %s\n" % (command, repr(msg)))
  5375	
  5376	    def send_message(self, message):
  5377		txlog.debug("send %s\n" % repr(message))
  5378		tmsg = message.to_bytes()
  5379		try:
  5380		    self.sock.sendall(tmsg)
  5381		    self.last_sent = time.time()
  5382		except:
  5383		    self.handle_close()
  5384	
  5385	    def start_broadcast(self):
  5386		#txlog.info('Starting broadcast\n') | todo count th4t
  5387		msg = msg_inv()
  5388		for h in self.transactions.keys():
  5389		    inv = CInv()
  5390		    inv.type = MSG_TX
  5391		    inv.hash = h
  5392		    msg.inv.append(inv)
  5393		self.send_message(msg)
  5394	
  5395	    def got_message(self, message):
  5396		if self.last_sent + 30 * 60 < time.time():
  5397		    self.send_message(msg_ping(self.ver_send))
  5398	
  5399		if message.command == "reject":
  5400		    txlog.info('rejected transaction')
  5401		    #txlog.info("recv %s%s%s\n" % (A.err,repr(message),A.reset))
  5402		else:
  5403		    #print('yeah')
  5404		    #txlog.info("recv %s\n" % repr(message))  dont overflow the logs
  5405		    pass
  5406	
  5407		if message.command == "version":
  5408		    self.ver_send = min(60001, message.nVersion)
  5409		    if self.ver_send < 60001:
  5410			self.log.info(
  5411			    "Obsolete version %d, closing\n" % (self.ver_send,))
  5412			self.handle_close()
  5413			return
  5414	
  5415		    self.send_message(msg_verack(self.ver_send))
  5416	
  5417		    self.start_broadcast()
  5418	
  5419		elif message.command == "verack":
  5420		    self.ver_recv = self.ver_send
  5421	
  5422		elif message.command == "ping":
  5423		    self.send_message(msg_pong(self.ver_send, message.nonce))
  5424	
  5425		elif message.command == "getdata":
  5426		    self.getdata(message)
  5427	
  5428		# TODO: count rejects n log it
  5429	
  5430	    def getdata_tx(self, txhash):
  5431		dbugmsg = 'got tx ' + txhash
  5432		txlog.debug(dbugmsg)
  5433		#txlog.debug('getdata_tx %s' % b2lx(txhash))
  5434		if txhash in self.transactions:
  5435		    msg = msg_tx()
  5436		    msg.tx = self.transactions[txhash]
  5437		    self.send_message(msg)
  5438		    self.peermgr.tx_broadcasted(txhash)
  5439		else:
  5440		    txlog.debug('Peer requested unknown transaction\n')
  5441	
  5442	    def getdata_block(self, blkhash):
  5443		txlog.debug('Peer requested block - this is unsupported\n')
  5444	
  5445	    def getdata(self, message):
  5446		if len(message.inv) > 50000:
  5447		    self.handle_close()
  5448		    return
  5449		for inv in message.inv:
  5450		    if inv.type == MSG_TX:
  5451			self.getdata_tx(inv.hash)
  5452		    elif inv.type == MSG_BLOCK:
  5453			self.getdata_block(inv.hash)
  5454	
  5455	
  5456	class PeerManager(object):
  5457	    def __init__(self, log, proxy, params, payload):
  5458		self.log = log
  5459		self.params = params
  5460		self.peers = []
  5461		self.addrs = {}
  5462		self.tried = {}
  5463		self.payload = payload
  5464		self.stats = {x:0 for x in payload.keys()}
  5465		self.proxy = proxy
  5466	
  5467	    def add(self, host, port):
  5468		self.tried[host] = True
  5469		c = NodeConn(self.proxy, host, port, self.log, self, self.params, self.payload)
  5470		self.peers.append(c)
  5471		return c
  5472	
  5473	    def closeall(self):
  5474		a = 0
  5475		for peer in self.peers:
  5476		    peer.handle_close()
  5477		    a += 0
  5478		txlog.info('closed %s amount of connections' % str(a))
  5479		self.peers = []
  5480	
  5481	    def tx_broadcasted(self, txhash):
  5482		self.stats[txhash] += 1
  5483	
  5484	
  5485	class push2mainnet():
  5486	    def __init__(self):
  5487		self.logger = logging.basicConfig(name='transaction_pusher')
  5488		self.commandconnect = 0x01
  5489		self.ipv4 = 0x01
  5490		self.ipv6 = 0x04
  5491		self.domainname = 0x3  
  5492	    def pushtx(self, txhex):
  5493		txlog.info('pushing transaction' + str(txhex))
  5494	    def recvall(self, s, n):
  5495		'''Receive n bytes from a socket, or fail'''
  5496		rv = bytearray()
  5497		while n > 0:
  5498		    d = s.recv(n)
  5499		    if not d:
  5500			raise IOError('Unexpected end of stream')
  5501		    rv.extend(d)
  5502		    n -= len(d)
  5503		return rv
  5504	    def parse_host_port(node, default_port):
  5505		'''
  5506		Parse host:port tuple.
  5507		TODO: [::]:12345 IPv6 syntax.
  5508		'''
  5509		(host, _, port) = node.partition(':')
  5510		if port:
  5511		    port = int(port)
  5512		else:
  5513		    if default_port is None:
  5514			raise ValueError('Must provide port in %s' % node)
  5515		    port = default_port
  5516		return (host,port)
  5517	
  5518	
  5519	# Miscelleneous utility functions - joining all the threads #
  5520	def join_all(threads, timeout):
  5521	    '''
  5522	    Join a bunch of threads, with timeout.
  5523	    '''
  5524	    wait_until = time.time() + timeout
  5525	    alive = len(threads)
  5526	    while alive:
  5527		alive = 0
  5528		for t in threads:
  5529		    next_wait = wait_until - time.time()
  5530		    if next_wait <= 0:
  5531			return
  5532		    t.join(next_wait)
  5533		    alive += t.isAlive()
  5534	
  5535	
  5536	def parse_host_port(node, default_port):
  5537	    '''
  5538	    Parse host:port tuple.
  5539	    TODO: [::]:12345 IPv6 syntax.
  5540	    '''
  5541	    (host, _, port) = node.partition(':')
  5542	    if port:
  5543		port = int(port)
  5544	    else:
  5545		if default_port is None:
  5546		    raise ValueError('Must provide port in %s' % node)
  5547		port = default_port
  5548	    return (host,port)
  5549	
  5550	
  5551	
  5552	
  5553	
  5554	#tx push333333333r
  5555	def pushbtctx(transtx):
  5556	    txlog.info('pushing tx: %s at %s' % (transtx, time.ctime()))
  5557	    proxy = None
  5558	    bitcoin.SelectParams('mainnet')
  5559	    params = bitcoin.params
  5560	    ogtx = transtx#txdata
  5561	    logr = logging.basicConfig(name='transaction_pusher')
  5562	    transactions = {}
  5563	    nodes = [parse_host_port(node, default_port=8333) for node in coinztx().givemenodes()]#get dig nodes
  5564	    txdata = unhexlify(transtx)
  5565	
  5566	    transactions[btcHash(txdata)] = CTransaction.deserialize(txdata)
  5567	    peermgr = PeerManager(logr, proxy, params, transactions)
  5568	    threads = []
  5569	    for host,port in nodes:#connect 2 nodes
  5570		c = peermgr.add(host, port)
  5571		threads.append(c)#add asychronic execution of this with gevent?
  5572	
  5573		#why not run a def in a def in a def in a def LOL   
  5574	    def start(timeout=400):
  5575		for t in threads:
  5576		    t.start()
  5577		try:
  5578		    join_all(threads, timeout)
  5579		finally:
  5580		    for t in threads:
  5581			t.stop()
  5582		    join_all(threads, timeout)    
  5583	
  5584	    start()
  5585	
  5586	    txlog.info('Number of successful broadcasts:')
  5587	    total = 0
  5588	    for (txhash, count) in peermgr.stats.items():
  5589		ab = '  %s %4i' % (b2lx(txhash), count)
  5590		txlog.info(ab)
  5591		ab = 0
  5592		total += count
  5593	    ble = 'pushed transaction: ' + ogtx
  5594	    txlog.debug(ble)
  5595	    ble = 0
  5596	
  5597	
  5598	
  5599	
  5600	def grep(s,pattern):
  5601	    return '\n'.join(fre.findall(r'^.*%s.*?$'%pattern,s,flags=re.M)[:1])
  5602	
  5603	
  5604	#not w0rking due to changes in api
  5605	#check btc balance
  5606	def check_balance(btc_address):
  5607	    btc = btc_address
  5608	    resp = urllib.urlopen("http://blockchain.info/multiaddr?active=" + btc)
  5609	    b0 = grep(resp.read(),"final_balance")
  5610	    array = b0.split(":")
  5611	    k = array[1].split(" ") 
  5612	    k = str(k[0])
  5613	    return k
  5614	
  5615	
  5616	def check_balance2(btc):
  5617	    btc = str(btc)
  5618	    resp = urllib.urlopen("http://blockchain.info/multiaddr?active=" + btc)
  5619	    b0 = grep(resp.read(),"final_balance")
  5620	    array = b0.split(":")
  5621	    pr = array[31]
  5622	    pr = str(pr)
  5623	    k = ''.join(x for x in pr if x.isdigit())
  5624	    #int k
  5625	    #k = int(k)
  5626	    balance = Decimal(k)/100000000
  5627	    k = balance
  5628	    return k
  5629	
  5630	
  5631	#simply check the balance
  5632	def check_btc_bal(btc):#gives us a json error if wrong - should alert / give error if invalid
  5633	    return Decimal(json.loads(grep(urllib.urlopen("http://blockchain.info/multiaddr?active=" + btc).read(),"final_balance"))['wallet']['final_balance'])
  5634	
  5635	def check_b3(btc):
  5636	    balance = btc
  5637	   #sprint('input b3: ', btc)
  5638	    mog = 'https://blockchain.info/q/addressbalance/'
  5639	    lop = requests.get('https://blockchain.info/q/addressbalance/'+balance, proxies={'http': "socks5://172.20.0.202:1080", 'https':'socks5://172.20.0.202:1080'}).text
  5640	#  resp = urllib.urlopen("http://blockchain.info/multiaddr?active=" + balance)
  5641	#   b0 = grep(resp.read(),"final_balance")
  5642	   #sprint('Life:', lop)
  5643	#    k = json.loads(b0)['wallet']['final_balance']
  5644	    k = Decimal(lop)/100000000
  5645	    return k
  5646	
  5647	
  5648	def gen_btc():
  5649	    address = pycoind.Address.generate(compressed = True)
  5650	    pk = address.private_key
  5651	    btcaddr = address.address
  5652	    pbk = address.public_key.encode('hex') 
  5653	    
  5654	def getpayaddress(froom, to, amount):
  5655	    address = pycoind.Address.generate(compressed = True)
  5656	    db = connecttx()
  5657	    pk = address.private_key
  5658	    btcaddr = address.address
  5659	    pbk = address.public_key.encode('hex')
  5660	    ttr = db.cursor()
  5661	    ttr.execute('insert into tx_coins(btcaddr, pubkey, priv, t0, fr0m, amount, payed) values(%s, %s, %s, %s, %s, %s, %s)', (btcaddr, pbk, pk, to, froom, amount, 'no'))
  5662	    db.commit()
  5663	    db.close()
  5664	
  5665	    return btcaddr
  5666	    
  5667	
  5668	    
  5669	
  5670	def orbgen(amount):
  5671	
  5672	    amount = int(amount)
  5673	
  5674	    db = connectcoinz()
  5675	
  5676	    ew = db.cursor()
  5677	
  5678	    for _ in repeat(None, amount):
  5679	
  5680		address = pycoind.Address.generate(compressed = True)
  5681	
  5682		pk = address.private_key
  5683	
  5684		btcaddr = address.address
  5685	
  5686		
  5687	
  5688		#check balance
  5689	
  5690		balance = check_b3(btcaddr)
  5691	
  5692		pbk = address.public_key.encode('hex') 	
  5693	
  5694		
  5695	
  5696		ew.execute('insert into coinz(address, pk, pbk, balance) value(%s, %s, %s, %s, %s, %s)', (btcaddr, pk, pbk, balance))
  5697	
  5698		db.commit()
  5699	
  5700		db.close()
  5701	
  5702		
  5703	
  5704	    return 'ok'
  5705	
  5706	 
  5707	
  5708	 #todo finish the bitcoin orb
  5709	
  5710	#test version
  5711	
  5712	def orbgentest(amount):
  5713	
  5714	    amount = int(amount)
  5715	
  5716	    db = connectcoinz()
  5717	
  5718	    ew = db.cursor()
  5719	
  5720	    for _ in repeat(None, amount):
  5721	
  5722		address = pycoind.Address.generate(compressed = True)
  5723	
  5724		pk = address.private_key
  5725	
  5726		btcaddr = address.address
  5727	
  5728		
  5729	
  5730		#check balance
  5731	
  5732		balance = 'nope'
  5733	
  5734		pbk = address.public_key.encode('hex') 	
  5735	
  5736		
  5737	
  5738		ew.execute('insert into coinz(address, pk, pbk, balance, usr) value(%s, %s, %s, %s, %s)', (btcaddr, pk, pbk, balance, 'bot'))
  5739	
  5740		db.commit()
  5741	
  5742		db.close()
  5743	
  5744	
  5745	
  5746	    return 'ok'
  5747	
  5748	    
  5749	
  5750	    
  5751	
  5752	def verify_a_payment(address, balance):#balance = amount
  5753	   #sprint('input: ', address, balance)
  5754	    balance = Decimal(balance)
  5755	   #sprint('Decimalized: ', balance)
  5756	    ba = Decimal(0.00001)
  5757	    balance_address = check_b3(address)
  5758	   #sprint('verify payment: ', balance_address)
  5759	    if balance_address > Decimal(balance) - ba:
  5760		awnser = 'yes'
  5761	
  5762	    else:
  5763	
  5764		awnser = 'no'
  5765	
  5766	    return awnser
  5767	
  5768	    
  5769	    
  5770	    
  5771	    #here we could add a saldo check and return , oh its X amount left
  5772	def monero_verify_a_payment(paymentid, balance, user, itemid):#balance = amount
  5773	   #sprint 'monero verify payment called, input:', paymentid
  5774	    awnser = 'no'
  5775	    balance = Decimal(balance)
  5776	    ba = Decimal(0.00001)
  5777	#    balance_address = check_b3(address)
  5778	    paytrue = handle_monero().payment_id_amount(paymentid)
  5779	    if paytrue!=Decimal(0):
  5780	#sprint 'monero verify! not paytrue'
  5781		balance_address = paytrue#handle_monero().payment_id_amount(paymentid)
  5782		dd = Decimal(balance) - ba
  5783	#sprint 'factors'
  5784	#sprint (balance_address, dd)
  5785		if balance_address > Decimal(balance) - ba:
  5786		    awnser = 'yes'
  5787		   #sprint 'true awnser'
  5788		    msg = 'user {} payed for item {} with payment id of {}'.format(user, itemid, paymentid)
  5789		    monerolog.debug('monero_verify_a_payment: '+msg)
  5790		else:
  5791		   #sprint 'wrong awnser'
  5792		    awnser = 'no'
  5793	    return awnser
  5794	    
  5795	    
  5796	    
  5797	    
  5798	    
  5799	def check_leightweight(btc):
  5800	    resp = requests.get("http://blockchain.info/multiaddr?active=" + btc).text
  5801	    k = Decimal(int(json.loads(grep(resp, 'final_balance'))['wallet']['final_balance']))/100000000
  5802	    return k
  5803	
  5804	    
  5805	
  5806	    
  5807	#captains log 8/12 - 2017 verfied vendor upgrade    
  5808	    
  5809	
  5810	    #verify that the money has arrived
  5811	
  5812	def verify_payment(btc):
  5813	    ba = Decimal(0.000001)
  5814	    amount = check_leightweight(btc)#check_btc_bal(btc)
  5815	    price = int(globalvendorprice)#100
  5816	    btcprice = float(price)
  5817	    btcprice = searchingfor().convertusd2btc(btcprice)#b.convert_to_btc(btcprice, 'USD')    
  5818	    if amount == 0:
  5819		t = 'no'
  5820	    else:
  5821		balance = Decimal(amount) - ba
  5822		balance = Decimal(balance)		
  5823		if amount > btcprice:#balance: #if amount is higher then bal 
  5824		    t = 'yupp' # push to vendor
  5825		else:
  5826		    t = 'no' # else return not there yet 
  5827	    return t
  5828	
  5829	
  5830	
  5831	
  5832	
  5833	
  5834	
  5835	#@wl.route('/fveyalvybaevlyebavlyeabibvyelabibelyvbaeyvayleavvfheavvjjhvbvndhslgohn')
  5836	
  5837	#@noindex
  5838	
  5839	#@axss
  5840	
  5841	#@adate
  5842	
  5843	#@af
  5844	
  5845	#def btc_orb():
  5846	
  5847	    ##if flask.session.has_key('special') and flask.session:
  5848		##if not vertify_session(flask.session['special']):
  5849		    ##return flask.redirect(flask.url_for('choice_mode'))
  5850		##pass
  5851	    ##else:
  5852		##return flask.redirect(flask.url_for('choice_mode'))     
  5853	    ##if not flask.session.has_key("root"):
  5854	
  5855	##	return flask.redirect(flask.url_for('choice_mode'))    
  5856	
  5857	    #return flask.render_template('btc_orb.html')
  5858	
  5859	
  5860	
  5861	
  5862	
  5863	
  5864	
  5865	#r = session.get('http://icanhazip.com/')
  5866	
  5867	#print r.content
  5868	
  5869	## Returns a different IP
  5870	
  5871	
  5872	
  5873	#socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050, True)
  5874	
  5875	#s = socks.socksocket()
  5876	
  5877	#s.connect(('anguilla.debian.or.at', 1234))
  5878	
  5879	#s.sendall('Hello world')
  5880	
  5881	#print(s.recv(1024))
  5882	
  5883	
  5884	
  5885	#So, that's just initializing s differently, via s = socks.socksocket().
  5886	
  5887	
  5888	
  5889	#With socks, connect() also takes a hostname. This should enable you to connect to a hidden service, as in:
  5890	
  5891	
  5892	
  5893	#socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, "127.0.0.1", 9050, True)
  5894	
  5895	#s = socks.socksocket()
  5896	
  5897	#s.connect(('3g2upl4pq6kufc4m.onion', 80))
  5898	
  5899	
  5900	
  5901	#message = 'GET / HTTP/1.0\r\n\r\n'
  5902	
  5903	#s.sendall(message)
  5904	
  5905	
  5906	
  5907	#reply = s.recv(4069)
  5908	
  5909	#print reply
  5910	
  5911	
  5912	
  5913	
  5914	
  5915	
  5916	
  5917	#conn = bitcoinrpc.connect_to_local()
  5918	
  5919	
  5920	
  5921	##move bitcoin from ac1 to ac2 
  5922	
  5923	#conn.move("testaccount", "testaccount2", 1.0)
  5924	
  5925	
  5926	
  5927	##general info
  5928	
  5929	#conn.getinfo()
  5930	
  5931	
  5932	
  5933	    #getaccount(bitcoinaddress) -> get account to btcadd
  5934	
  5935	    #getaccountaddress(account)
  5936	
  5937	
  5938	
  5939		#Returns the current bitcoin address for receiving payments to an account.
  5940	
  5941	#getbalance(account)
  5942	
  5943	#listaccounts
  5944	
  5945	#sendfrom(account, 'to btc', amount)
  5946	
  5947	
  5948	
  5949	
  5950	
  5951	    #fromaccount – Account to send from.
  5952	
  5953	    #tobitcoinaddress – Bitcoin address to send to.
  5954	
  5955	    #amount – Amount to send (float, rounded to the nearest 0.01).
  5956	
  5957	    #minconf – Minimum number of confirmations required for transferred balance.
  5958	
  5959	    #comment – Comment for transaction.
  5960	
  5961	    #comment_to – Comment for to-address.
  5962	
  5963	
  5964	
  5965	
  5966	
  5967	#import bitcoinrpc
  5968	
  5969	#conn = bitcoinrpc.connect_to_local()
  5970	
  5971	#conn = bitcoinrpc.connect_to_remote('foo', 'bar', host='127.0.0.1', port=8332)
  5972	
  5973	#print 'servers bitcoin balance ' + conn.getbalance()
  5974	
  5975	#conn.sendtoaddress("msTGAm1ApjEJfsWfAaRVaZHRm26mv5GL73", 20.0)
  5976	
  5977	#pay_to = conn.getnewaddress()
  5978	
  5979	#print "We will ship the pirate sandwidth after payment of 200 coins to ", pay_to
  5980	
  5981	#amount = conn.getreceivedbyaddress(pay_to)
  5982	
  5983	
  5984	  #curl --user user --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] }'  -H 'content-type: text/plain;' http://:8333 
  5985	
  5986	
  5987	
  5988	  #tor socks
  5989	
  5990	#requests.get('http://canihazip.com/s', proxies={'http':'socks5://127.0.0.1:9050'}).text
  5991	
  5992	
  5993	
  5994	class handle_captcha():
  5995	    def __init__(self):
  5996		self.unlink = unlink
  5997	#remove temp file https://docs.python.org/3.1/library/tempfile.html
  5998	    def pop_temp(self, filename):
  5999		unlink(filename)
  6000	  
  6001	    def captcha_gen(self):
  6002		coden = urandom(4).encode('base64').replace('=', '').replace('\n', '')
  6003		asd = tempfile.NamedTemporaryFile(delete=False, prefix='captc')
  6004		temporaryfile = asd.name
  6005	       #sprint('temp file name:', temporaryfile, coden)
  6006		captchacaptcha().write(coden, temporaryfile)
  6007	       #sprint('filen skriven')
  6008	        tempo = temporaryfile.replace('/tmp/', '')
  6009	       #sprint('0 and one')
  6010	        handleit().adds(tempo, coden)
  6011	       #sprint('done')
  6012	#print handleit().gdb()
  6013		return (temporaryfile, coden)
  6014	  
  6015	abc = {}
  6016	class handleit():
  6017	    def __init__(self):
  6018		self.mydb = abc
  6019	    def gdb(self):
  6020		return self.mydb
  6021	    def adds(self, captcha, coden):
  6022		self.mydb.update({captcha: coden})
  6023	    def getit(self, inputt):
  6024		magic = self.mydb.__contains__(inputt)
  6025		if magic:
  6026		    #print 'magic!'
  6027		    #print self.mydb
  6028		    merp = self.mydb[inputt]
  6029		    self.removeit(inputt)
  6030		    return merp
  6031	    def removeit(self, inputt):
  6032		self.mydb.pop(inputt)
  6033		try:
  6034		    handle_captcha().pop_temp('/tmp/'+ inputt)
  6035		except Exception:
  6036		   #sprint 'some error with unlinking the captcha ^^ meh im gonna pass on this one'
  6037		    pass	   
  6038	  
  6039	@wl.route('/captchas/<img>.png')  
  6040	@noindex
  6041	@adate
  6042	@axss
  6043	@af
  6044	def captchass(img):
  6045	    if '/' in img:
  6046		return 'invalid file'
  6047	    elif '.' in img:
  6048		return 'invalid file'
  6049	    elif not exists('/tmp/' + img):
  6050		return 'invalid file'
  6051	    else:
  6052		img = '/tmp/' + img
  6053		blah = open(img, 'r').read()#.encode('base64')
  6054		res = flask.make_response(blah)
  6055		res.headers['Content-Type'] = 'image/png'
  6056		return res
  6057	#	return flask.send_file(img, as_attachment=False, mimetype='application/png')
  6058	  
  6059	  
  6060	  
  6061	
  6062	@wl.route('/a')
  6063	@noindex
  6064	@adate
  6065	@axss
  6066	@af
  6067	def testhoney():
  6068	    if flask.session.has_key('special') and flask.session:
  6069		if not vertify_session(flask.session['special']):
  6070		    return flask.redirect(flask.url_for('choice_mode'))
  6071		pass
  6072	    else:
  6073		return flask.redirect(flask.url_for('choice_mode'))     
  6074	
  6075	    return  'put ya rolex on'
  6076	
  6077	
  6078	
  6079	#more todo, dont i have a cronjob for this?
  6080	#	def for change file , meh this can be post poned
  6081	
  6082	def changefiletime():
  6083	    return 'todo'
  6084	
  6085	
  6086	@wl.route('/donate')
  6087	@noindex
  6088	@axss
  6089	@adate
  6090	@af
  6091	def donate():
  6092	
  6093	    return '''
  6094	
  6095	If u send payments to this btc addresses 
  6096	
  6097	the cash will be split and sent to variuos sites that fights for the good
  6098	
  6099	    btc: ''' + ''#+ btc address
  6100	
  6101	
  6102	
  6103	@wl.route('/vendor')
  6104	@noindex
  6105	@adate
  6106	@axss
  6107	@af
  6108	def vendor():
  6109	
  6110	    if not flask.session.has_key("nick"):
  6111	
  6112		return flask.redirect(flask.url_for('choice_mode'))
  6113	
  6114	    elif flask.session.has_key('special') and decode_session(flask.session['special'])[1] == 'user':
  6115	
  6116		return flask.redirect(flask.url_for('choice_mode'))
  6117	
  6118	    
  6119	    if flask.session.has_key('special') and flask.session:
  6120		if not vertify_session(flask.session['special']):
  6121		    return flask.redirect(flask.url_for('choice_mode'))
  6122		pass
  6123	    else:
  6124		return flask.redirect(flask.url_for('choice_mode')) 
  6125	    
  6126	
  6127	    if flask.session.has_key('special'):
  6128		if decode_session(flask.session['special'])[1] == 'vendor':
  6129	
  6130		    nick = decode_session(flask.session["special"])[0]
  6131		    mess = getmsgs()
  6132	
  6133		    db = connecttrade()
  6134		    db2 = connectnews()
  6135	
  6136	    #	if not mess or mess=='((0L,),)':
  6137	
  6138		    #    mess = '0'
  6139	
  6140		    #
  6141	
  6142		    #catz
  6143	
  6144		    #
  6145	
  6146		    #pricetable = getpt()
  6147	
  6148		    pricetable = searchingfor().getpt()#''
  6149	
  6150		    entries2 = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto(), indica = getind(), sativa = getsat(), Hybrid = getHybrid(), Hash = getHash(), Cannabis = getthc(), Mdma = getmdma(), Benzos = getbenz(), Ecstasy = getext(), Cocaine = getcoce(), Meth = getmth(), amphetamine = getamp(), ritalin = getrtl(), Opiods = getopi(), Steroids = getstd(), Perscription = getpts(), Stimulations = getsdd(), Psychedelics = getphsy(), WeightLoss = getwel(), Others = getoth())]    
  6151	
  6152		    grtzphrase = ''#getgrtzphrase() #todo check it
  6153	
  6154		    ge = db2.cursor()
  6155	
  6156		    pe = db.cursor()
  6157	
  6158		    ge.execute('select datu, news from news order by news_id desc limit 4')
  6159	
  6160		    entries3 = [dict(datu=row[0], news=row[1]) for row in ge.fetchall()]
  6161	
  6162		    pe.execute('select count(trade_name) from trade where trade_t0=%s and response=%s', (nick, 'no'))
  6163	
  6164		    trade = pe.fetchone()[0]
  6165	
  6166		    db.close()
  6167		    db2.close()
  6168	
  6169		    #entries4 = wl_entries_cache().give_me_entries()
  6170		    return flask.render_template('vendorhome.html', newsentries=wl_html_cache().get_news(), entries3=entries3, trade=trade, grtzphrase=grtzphrase, emnick = nick, mess=mess, entries2=entries2, soo=searchingfor().latestbtcprice(), pricetable=pricetable, moneroprice=searchingfor().latestmoneroprice() )#soo = b.get_latest_price('USD'),
  6171	
  6172	    else:
  6173		return flask.redirect(flask.url_for('choice_mode'))	
  6174	
  6175	
  6176	
  6177	
  6178	
  6179	#
  6180	
  6181	
  6182	#new profile
  6183	
  6184	
  6185	@wl.route('/new_profile', methods=['GET', 'POST'])
  6186	@wl.route('/profile_new', methods=['GET', 'POST'])
  6187	@noindex
  6188	@axss
  6189	@adate
  6190	@af
  6191	def newprofile():
  6192	    if not flask.session.has_key("nick"):
  6193		return flask.redirect(flask.url_for('choice_mode'))    
  6194	    if flask.session.has_key('special') and flask.session:
  6195		if not vertify_session(flask.session['special']):
  6196		    return flask.redirect(flask.url_for('choice_mode'))
  6197		pass
  6198	    else:
  6199		return flask.redirect(flask.url_for('choice_mode'))    
  6200	    
  6201	    error = False
  6202	    if flask.request.method == 'POST':
  6203		if flask.session.has_key('special') and flask.session:
  6204		    if not vertify_session(flask.session['special']):
  6205			return flask.redirect(flask.url_for('choice_mode'))
  6206		    pass
  6207		else:
  6208		    return flask.redirect(flask.url_for('choice_mode')) 	
  6209		
  6210		file = flask.request.files['file']
  6211		#if len(file.read()) > wl.config['MAX_CONTENT_LENGTH']:
  6212		#    return 'nah'
  6213		
  6214		#autoclean pic
  6215		
  6216		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])	
  6217		#max size?
  6218		if file:# and allowed_file(file.filename):
  6219		    if allowed_file(file.filename):
  6220			filename = secure_filename(file.filename)
  6221			extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
  6222			filename = extra + filename
  6223			meh = wl.config['AVATAR_FOLDER'] + '/' + filename
  6224			file.save(meh)
  6225			#file.save(wl.config['AVATAR_FOLDER'] + '/' + filename)
  6226			error = 'pic uploaded!'
  6227			#clean file from meta badness
  6228			cleans(meh)
  6229			db = connectvens()
  6230			wsd = db.cursor()
  6231			wsd.execute('update vens set avatar_pic=%s where nick=%s', (filename ,nick))
  6232			db.commit()
  6233			db.close()
  6234			pass
  6235		    else:
  6236			return flask.render_template('new/profile.html', mess=getmsgs(), error='wrong type of file, We only allow: png, jpg, jpeg and gif', emnick=nick, nick=nick)
  6237		else:
  6238		    filename = 'xMrXK0bqi5ryxVRgdr4u04iMJV4itempic.png'#default usr
  6239		    pass	
  6240	
  6241	    db = connectvens()
  6242	
  6243	    ee = db.cursor()
  6244	
  6245	    curr = ee
  6246	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  6247	
  6248	    curr.execute('select avatar_pic from vens where nick=%s', (nick,))#, 'vendor'))
  6249	    avatar_pic = curr.fetchone()#[0]
  6250	    if not avatar_pic:#len(avatar_pic) == 0:
  6251		avatar_pic = 'default.png'
  6252	    else:
  6253		avatar_pic = avatar_pic[0]    
  6254	    ee.execute('select role from vens where nick=%s', (nick,))
  6255	
  6256	    role = ee.fetchone()
  6257	
  6258	    role = role[0]    
  6259	    
  6260	
  6261	    if len(avatar_pic) == 0:
  6262		avatar_pic = 'default.png'
  6263	    db.close()
  6264	    return flask.render_template('new/profile.html', avatar_pic=avatar_pic, mess=getmsgs(), error=error, role=role, nick=nick, emnick=nick)
  6265	
  6266	
  6267	
  6268	#only allow last seen online around {{entry.around}} @ the forum
  6269	
  6270	
  6271	
  6272	#generate refeeral link when 10% discout have been payed
  6273	
  6274	@wl.route('/profile', methods=['GET', 'POST'])
  6275	@wl.route('/Profile', methods=['GET', 'POST'])
  6276	@noindex
  6277	@axss
  6278	@adate
  6279	@af
  6280	def profile():
  6281	    if not flask.session.has_key("nick"):
  6282		return flask.redirect(flask.url_for('choice_mode'))    
  6283	    if flask.session.has_key('special') and flask.session:
  6284		if not vertify_session(flask.session['special']):
  6285		    return flask.redirect(flask.url_for('choice_mode'))
  6286		pass
  6287	    else:
  6288		return flask.redirect(flask.url_for('choice_mode'))    
  6289	    
  6290	    error = False
  6291	    if flask.request.method == 'POST':
  6292		if flask.session.has_key('special') and flask.session:
  6293		    if not vertify_session(flask.session['special']):
  6294			return flask.redirect(flask.url_for('choice_mode'))
  6295		    pass
  6296		else:
  6297		    return flask.redirect(flask.url_for('choice_mode')) 	
  6298		
  6299		file = flask.request.files['file']
  6300		#if len(file.read()) > wl.config['MAX_CONTENT_LENGTH']:
  6301		#    return 'nah'
  6302		
  6303		#autoclean pic
  6304		
  6305		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])	
  6306		#max size?
  6307		if file:# and allowed_file(file.filename):
  6308		    if allowed_file(file.filename):
  6309			filename = secure_filename(file.filename)
  6310			extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
  6311			filename = extra + filename
  6312			meh = wl.config['AVATAR_FOLDER'] + '/' + filename
  6313			file.save(meh)
  6314			#file.save(wl.config['AVATAR_FOLDER'] + '/' + filename)
  6315			error = 'pic uploaded!'
  6316			#clean file from meta badness
  6317			cleans(meh)
  6318			db = connectvens()
  6319			wsd = db.cursor()
  6320			wsd.execute('update vens set avatar_pic=%s where nick=%s', (filename ,nick))
  6321			db.commit()
  6322			db.close()
  6323			pass
  6324		    else:
  6325			return flask.render_template('profile.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), mess=getmsgs(), error='wrong type of file, We only allow: png, jpg, jpeg and gif')
  6326		else:
  6327		    filename = 'xMrXK0bqi5ryxVRgdr4u04iMJV4itempic.png'#default usr
  6328		    pass	
  6329	
  6330	    db = connectvens()
  6331	
  6332	    ee = db.cursor()
  6333	
  6334	    curr = ee
  6335	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  6336	
  6337	    curr.execute('select avatar_pic from vens where nick=%s', (nick,))#, 'vendor'))
  6338	    avatar_pic = curr.fetchone()#[0]
  6339	    if not avatar_pic:#len(avatar_pic) == 0:
  6340		avatar_pic = 'default.png'
  6341	    else:
  6342		avatar_pic = avatar_pic[0]    
  6343	    ee.execute('select role from vens where nick=%s', (nick,))
  6344	
  6345	    role = ee.fetchone()
  6346	
  6347	    role = role[0]    
  6348	    entries2 = wl_entries_cache().give_me_entries()    
  6349	    
  6350	
  6351	    if len(avatar_pic) == 0:
  6352		avatar_pic = 'default.png'
  6353	    db.close()
  6354	    return flask.render_template('profile.html', newsentries=wl_html_cache().get_news(), avatar_pic=avatar_pic, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, mess=getmsgs(), error=error, entries2=entries2)
  6355	
  6356	
  6357	
  6358	
  6359	
  6360	@wl.route('/static/index.php')
  6361	
  6362	@wl.route('/static/')
  6363	
  6364	@wl.route('/static')
  6365	
  6366	@noindex
  6367	
  6368	@axss
  6369	
  6370	@adate
  6371	
  6372	@af
  6373	
  6374	def statcc():
  6375	
  6376	    if flask.session.has_key('special') and flask.session:
  6377		if not vertify_session(flask.session['special']):
  6378		    return flask.redirect(flask.url_for('choice_mode'))
  6379		pass
  6380	    else:
  6381		return flask.redirect(flask.url_for('choice_mode')) 
  6382	    return '''
  6383	
  6384	<html>    <center><h1>Hello world!</h1>
  6385	
  6386	<br><br>
  6387	
  6388	<p>this is just the index.php file in the static folder</p>
  6389	
  6390	    
  6391	todo remove all shitty php files that we dont need //John doe    
  6392	    </html>
  6393	
  6394	    '''
  6395	
  6396	
  6397	
  6398	#sugest a new feature yeah
  6399	
  6400	
  6401	
  6402	@wl.route('/suggest')
  6403	
  6404	@noindex
  6405	
  6406	@axss
  6407	
  6408	@adate
  6409	
  6410	@af
  6411	
  6412	def suggest():
  6413	
  6414	    if flask.session.has_key('special') and flask.session:
  6415		if not vertify_session(flask.session['special']):
  6416		    return flask.redirect(flask.url_for('choice_mode'))
  6417		pass
  6418	    else:
  6419		return flask.redirect(flask.url_for('choice_mode')) 
  6420	    if not flask.session.has_key("nick"):
  6421	
  6422		return flask.redirect(flask.url_for('choice_mode'))      
  6423	
  6424	    
  6425	
  6426	    return 'The word is free and so is the ciphernet make a suggestion and maybe ur request will be in a update in a short time'
  6427	
  6428	
  6429	
  6430	
  6431	
  6432	
  6433	#@wl.route('/censorednick')
  6434	
  6435	#@noindex
  6436	
  6437	#@axss
  6438	
  6439	#@adate
  6440	
  6441	#@af
  6442	
  6443	#def censorednick_admin():
  6444	
  6445	    #if flask.session.has_key('role') and flask.session['role'] == 'censorednick':
  6446	
  6447	        #return flask.render_template('admin.html')
  6448	
  6449	
  6450	
  6451	    #return '''
  6452	
  6453	    
  6454	
  6455	 #censorednick   is the programmer, administrator, maintainer, protector etc.. of wl
  6456	
  6457	    
  6458	
  6459	    #'''
  6460	
  6461	
  6462	
  6463	#@wl.route('/censoredn')
  6464	
  6465	#def admin():
  6466	
  6467	 #   if flask.session.has_key('role') and flask.session['role'] == 'admin':
  6468	
  6469	  #      return flask.render_template('admin.html')
  6470	
  6471	
  6472	
  6473	   # return flask.redirect(flask.url_for('nono'))
  6474	
  6475	
  6476	   
  6477	@wl.route('/censoredradmin')
  6478	@noindex
  6479	@axss
  6480	@adate
  6481	@af
  6482	def censored_admin():
  6483	   
  6484	
  6485	    return '''
  6486	censored the nightly beast that walks in the shadows 
  6487	a casual baker with coding skills
  6488	        
  6489	    '''
  6490	
  6491	
  6492	# is an administrator of wl
  6493	
  6494	    
  6495	
  6496	    #'''
  6497	
  6498	
  6499	
  6500	
  6501	
  6502	
  6503	@wl.route('/static/itempicz/')
  6504	@noindex
  6505	@axss
  6506	@adate
  6507	@af
  6508	def item_pstatic():
  6509	    return '''
  6510	    
  6511	index.php | folder ..
  6512	
  6513	to do clean the php code
  6514	    
  6515	    '''
  6516	
  6517	
  6518	# todo 
  6519	
  6520	#  vacation mode
  6521	
  6522	#
  6523	
  6524	
  6525	
  6526	
  6527	
  6528	#auction
  6529	
  6530	@wl.route('/auction')
  6531	@wl.route('/Auction')
  6532	@noindex
  6533	@axss
  6534	@adate
  6535	@af
  6536	def auction():
  6537	    if not flask.session.has_key("nick"):
  6538		return flask.redirect(flask.url_for('choice_mode'))      
  6539	
  6540	    if flask.session.has_key('special') and flask.session:
  6541		if not vertify_session(flask.session['special']):
  6542		    return flask.redirect(flask.url_for('choice_mode'))
  6543		pass
  6544	    else:
  6545		return flask.redirect(flask.url_for('choice_mode'))     
  6546	
  6547	    db = connectitems()
  6548	
  6549	    db2 = connectauctions()
  6550	    ert = db2.cursor()
  6551	
  6552	    wert = db.cursor()
  6553	
  6554	    tet = db.cursor()
  6555	
  6556	   
  6557	
  6558	    tset = db.cursor()
  6559	
  6560	    tset.execute('select count(item_id) from items where auction=%s', ('yes',))
  6561	
  6562	    
  6563	
  6564	    total = tset.fetchone()[0]    
  6565	
  6566	    page, per_page, offset = get_page_args()
  6567	
  6568	    sql = 'select item_name from items order by item_name limit {}, {}'.format(offset, per_page)     
  6569	
  6570	    tet.execute(sql)
  6571	
  6572	    items = tet.fetchall()
  6573	
  6574	    ert.execute('select item_id, bid, vendor from auctions')
  6575	
  6576	    pagination = get_pagination(page=page, per_page=per_page, total=total, record_name='items', format_total=True, format_number=True)
  6577	
  6578	    entries3 = [dict(i_id=row[0], bid=row[1], vendor=row[2]) for row in ert.fetchall()]
  6579	
  6580	    wert.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s', ('yes',))
  6581	
  6582	    entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in wert.fetchall()]
  6583	
  6584	    entries2 = wl_entries_cache().give_me_entries()
  6585	
  6586	    db.close()
  6587	
  6588	    db2.close()
  6589	    return flask.render_template('auction_house.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), entries2=entries2, items=items, page=page, per_page=per_page, pagination=pagination, entries=entries, pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice())
  6590	
  6591	
  6592	
  6593	#qwe,qwew,spiral = bnd.fetchall(),bnde.fetchall()#, [0]
  6594	
  6595	#qwe = bnd.fetchall()#,
  6596	#qrw = spiralen.fetchone()
  6597	#qwew = bnde.fetchall()#, [0]  
  6598	#spiralen.execute('select item_name from items where item_id=%s', (auction_id,))
  6599	#if we where to be under huge load create a cache and store date and auction id
  6600	def gen_finaly_auct_msg(auction_id):
  6601	   #sprint auction_id
  6602	    db = connectauctions()
  6603	    db2 = connectitems()
  6604	    bnd = db.cursor()
  6605	    bnde = db.cursor()
  6606	    spiralen = db2.cursor()
  6607	    bnd.execute('select bider, bid, amount from auctions where bider!=%s and item_id=%s order by bid desc', ('', auction_id),)
  6608	    bnde.execute('select bider, bid, amount from auctions where bider!=%s and item_id=%s order by bid desc limit 2', ('', auction_id),)
  6609	    qwe,qwew = bnd.fetchall(),bnde.fetchall()
  6610	    spiralen.execute('select item_name from items where item_id=%s', (auction_id,))
  6611	    qwr = spiralen.fetchone()
  6612	    msg = 'invalid auction'
  6613	    if not qwr:
  6614		print 'invalid gen_finaly_auct call: ', auction_id
  6615	    else:
  6616		spiral = qwr[0]
  6617		#print spiral
  6618		#print len(qwe)
  6619		#print qwe
  6620		#print qwew
  6621		##
  6622		#print qwew
  6623		#print len(qwew)
  6624		msg = 'Your Auction "{}" has ended and you got No bids on this item'.format(str(spiral))
  6625		if not len(qwew) == 0:
  6626		   #sprint (str(spiral), len(qwe), qwew[0][0], qwew[0][1])
  6627		    msg = '''Your Auction "{}" has ended you have got a total of {} amount of bids
  6628		    The winner is 
  6629		Price:{} Nick:{} 
  6630		
  6631	Send the member a message to finish the auction
  6632		'''.format(str(spiral), len(qwe), qwew[0][1], qwew[0][0])
  6633	    db.close()
  6634	    db2.close()
  6635	    return msg
  6636	
  6637	
  6638	def validate_auction_time(auction_id):
  6639	   #sprint 'validate auction called!'
  6640	    timem = False
  6641	    today = datetime.date.today()
  6642	    db1,db2 = connectauctions(),connectitems()
  6643	    qwe, qwe1,qwe2 = db1.cursor(),db1.cursor(),db2.cursor()
  6644	    qwe1.execute('select og_time, vendor from auctions where bid=%s and item_id=%s', ('', auction_id))
  6645	    fetchedtime, vendor = qwe1.fetchone()# should be the same as [0],[1]
  6646	    tiden = datetime.datetime.strptime(str(fetchedtime), '%Y-%m-%d').date()
  6647	    nicks = []
  6648	   #sprint 'tiden: ', tiden
  6649	   #sprint 'today: ', today
  6650	   #sprint 'validato'
  6651	   #sprint tiden < today
  6652	    ab = tiden == today
  6653	   #sprint 'ab:'
  6654	   #sprint ab
  6655	    if tiden < today or ab:#if it is -days
  6656	#sprint 'got a bad time, its removie time'
  6657		genf = gen_finaly_auct_msg(auction_id)
  6658		qwe1.execute('delete from auctions where item_id=%s', (auction_id,))
  6659		db1.commit()
  6660		qwe2.execute('delete from items where item_id=%s', (auction_id,))
  6661		db2.commit()
  6662	#sprint auction_id, ' has been removed'
  6663		#qwe.execute('select og_time,vendor from auctions where item_id=%s where og_time', (auction_id,))
  6664		#for line in qwe.fetchall():
  6665		#    nicks.append(line)	
  6666		#msg += 'Bid: ' + ", Bid: ".join(" nick: ".join(nick) for nick in nicks)
  6667		#msg += ' Note: this is still an expiremental feature of wl we recommend that you create a trade with the member to finish the auction'
  6668		senduser2(vendor, 'warezloader-bot', genf, "Auction has ended")
  6669		timem = True
  6670	    else:
  6671		print 'good time :)'
  6672	   #sprint 'time is set to: ', timem
  6673	
  6674	    db1.close()
  6675	    db2.close()
  6676	    return timem
  6677	
  6678	#fancy auction
  6679	
  6680	
  6681	@wl.route('/auction_new/<auction>', methods=['POST', 'GET'])   
  6682	@noindex
  6683	@axss
  6684	@adate
  6685	@af
  6686	def auctionsnew(auction):
  6687	    if not flask.session.has_key("nick"):
  6688	
  6689		return flask.redirect(flask.url_for('choice_mode'))      
  6690	
  6691	    if flask.session.has_key('special') and flask.session:
  6692		if not vertify_session(flask.session['special']):
  6693		    return flask.redirect(flask.url_for('choice_mode'))
  6694		pass
  6695	    else:
  6696		return flask.redirect(flask.url_for('choice_mode')) 
  6697	
  6698	
  6699	    nick = decode_session(flask.session["special"])[0]
  6700	
  6701	    btclatest = searchingfor().latestbtcprice()
  6702	    xmrlatest = searchingfor().latestmoneroprice()
  6703	
  6704	    db = connectauctions()
  6705	    db2 = connectitems()
  6706	
  6707	    ooi,oi = db.cursor(),db.cursor()
  6708	    oi.execute('select item_id from auctions where item_id=%s', (auction,))
  6709	
  6710	    ooi.execute('select item_des from items where item_id=%s', (auction,))
  6711	    des = ooi.fetchone()[0]
  6712	
  6713	
  6714	    pi = db2.cursor()
  6715	    op = db2.cursor()
  6716	    pr = db2.cursor()
  6717	    pi.execute('select amount_in_stock from items where item_id=%s', (auction,))
  6718	    op.execute('select item_piclink from items where item_id=%s', (auction,))
  6719	    pr.execute('select item_name from items where item_id=%s', (auction,))
  6720	    title = pr.fetchone()[0]
  6721	    piclink = op.fetchone()[0]
  6722	    Quantity = pi.fetchone()[0]
  6723	    aitn = oi.fetchone()
  6724	    if not aitn or validate_auction_time(auction):
  6725		return flask.redirect('/shop') 
  6726	    else:
  6727		pass
  6728	
  6729	    error = False
  6730	    if flask.request.method == 'POST':
  6731		if flask.session.has_key('special') and flask.session:
  6732		    if not vertify_session(flask.session['special']):
  6733			return flask.redirect(flask.url_for('choice_mode'))
  6734		    pass
  6735		else:
  6736			return flask.redirect(flask.url_for('choice_mode'))	
  6737		Bidprice = Decimal(flask.request.form.get('Bid'))
  6738		#Bidprice = Decimal()
  6739		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  6740		db = connectauctions()	
  6741		uo = db.cursor()	
  6742		po = db.cursor()
  6743		po.execute('select amount from auctions where item_id=%s ORDER BY amount DESC limit 1', (auction,))
  6744		amounts = po.fetchone()[0]
  6745		if not amounts:
  6746		    amounts = 0
  6747		else:
  6748		    pass	
  6749	
  6750		uo.execute('select bid from auctions where item_id=%s order by bid desc limit 1', (auction,))
  6751	
  6752		bid2 = Decimal(uo.fetchone()[0])
  6753		bid2 = Decimal(bid2)
  6754		if Bidprice > bid2:
  6755		    upd = db.cursor()
  6756		    amounts = int(amounts)
  6757		    amount = amounts+1	    
  6758		    pa = db.cursor()
  6759		    pa.execute('select vendor from auctions where item_id=%s', (auction,))
  6760	
  6761		    vendor = pa.fetchone()[0]
  6762	
  6763		    pi = db.cursor()
  6764	
  6765		    pi.execute('select count(bid) from auctions where item_id=%s order by bid asc', (auction,))
  6766	
  6767		    if int(pi.fetchone()[0]) > 9:
  6768	
  6769			pq = db.cursor()
  6770	
  6771			pq.execute('select bid from auctions where item_id=%s order by bid asc', (auction,))
  6772			oldest = pq.fetchone()[0]
  6773			pq.execute('delete from auctions where item_id=%s and bid=%s', (auction, oldest))
  6774			db.commit()
  6775	
  6776		    else:
  6777	
  6778			pass
  6779	
  6780		    upd.execute('insert into auctions(item_id, bid, bider, vendor, amount) value(%s, %s, %s, %s, %s)', (auction, Bidprice, nick, vendor, amount))
  6781		    db.commit()
  6782	
  6783		    #amount add +1 in amount to c how many bids have been done 
  6784	
  6785		    error = 'Bid added!'
  6786	
  6787		    pass
  6788	
  6789		else:
  6790	
  6791		    error = 'your bid needs to be higher then the current'
  6792	
  6793		    pass
  6794	
  6795	
  6796		uo = db.cursor()
  6797	
  6798		uo.execute('select bid from auctions where item_id=%s order by bid desc limit 1', (auction,))
  6799	
  6800		currentbid = uo.fetchone()[0] 	
  6801	
  6802	
  6803	
  6804		if not currentbid:
  6805	
  6806		    currentbid = 0
  6807	
  6808		else:
  6809	
  6810		    pass
  6811	
  6812		db.close()
  6813		db2.close()
  6814	
  6815		return flask.render_template('new/auction_item.html', myname=nick, piclink=piclink, amounts=amounts, currentbid=currentbid, error=error, msg=getmsgs(), mess=getmsgs(), des=des, btclatest=btclatest, xmrlatest=xmrlatest, Quantity=Quantity)
  6816	
  6817	    
  6818	
  6819	    ser = db.cursor()
  6820	
  6821	    ser.execute('select og_time from auctions where item_id=%s order by og_time desc', (auction,))
  6822	
  6823	    tl = ser.fetchone()[0]
  6824	    po = db.cursor()
  6825	    po.execute('select bid from auctions where item_id=%s ORDER BY bid DESC limit 1', (auction,))
  6826	    currentbid = Decimal(po.fetchone()[0])
  6827	    oi.execute('select vendor from auctions where item_id=%s', (auction,))
  6828	    vendor = oi.fetchone()[0]
  6829	    uo = db.cursor()
  6830	    uo.execute('select amount from auctions where item_id=%s ORDER BY bid DESC limit 1', (auction,))
  6831	    amounts = uo.fetchone()[0]    
  6832	    if not amounts:
  6833		amounts = 0
  6834	    else:
  6835		pass       
  6836	
  6837	    h = daysuntil(tl)
  6838	    d = hoursuntil(tl)
  6839	    timeleft = str(d) + ' and ' + str(h) +  ' days'
  6840	    db.close()
  6841	    return flask.render_template('new/auction_item.html', myname=nick, title=title, piclink=piclink, Quantity=Quantity, vendor=vendor, amounts=amounts, currentbid=currentbid, mess=getmsgs(), timeleft=timeleft, des=des, xmrlatest=xmrlatest, btclatest=btclatest)
  6842	
  6843	
  6844	
  6845	
  6846	@wl.route('/auction/<auction>', methods=['POST', 'GET'])   
  6847	@noindex
  6848	@axss
  6849	@adate
  6850	@af
  6851	def auctions(auction):
  6852	    if not flask.session.has_key("nick"):
  6853	
  6854		return flask.redirect(flask.url_for('choice_mode'))      
  6855	
  6856	    if flask.session.has_key('special') and flask.session:
  6857		if not vertify_session(flask.session['special']):
  6858		    return flask.redirect(flask.url_for('choice_mode'))
  6859		pass
  6860	    else:
  6861		return flask.redirect(flask.url_for('choice_mode')) 
  6862	
  6863	    nick = decode_session(flask.session["special"])[0]
  6864	
  6865	    db = connectauctions()
  6866	    db2 = connectitems()
  6867	
  6868	    oi = db.cursor()
  6869	
  6870	    oi.execute('select item_id from auctions where item_id=%s', (auction,))
  6871	
  6872	    pi = db2.cursor()
  6873	
  6874	    op = db2.cursor()
  6875	
  6876	    pr = db2.cursor()
  6877	
  6878	    pi.execute('select amount_in_stock from items where item_id=%s', (auction,))
  6879	
  6880	    op.execute('select item_piclink from items where item_id=%s', (auction,))
  6881	
  6882	    pr.execute('select item_name from items where item_id=%s', (auction,))
  6883	
  6884	    title = pr.fetchone()[0]
  6885	
  6886	    piclink = op.fetchone()[0]
  6887	
  6888	    Quantity = pi.fetchone()[0]
  6889	
  6890	    aitn = oi.fetchone()
  6891	    if not aitn or validate_auction_time(auction):
  6892	
  6893	##sprint 'aitn: ', aitn
  6894	##sprint 'not validate auct time '
  6895		return flask.redirect('/shop') 
  6896	    else:
  6897	
  6898		pass
  6899	
  6900	    error = False
  6901	
  6902	    if flask.request.method == 'POST':
  6903	
  6904		if flask.session.has_key('special') and flask.session:
  6905		    if not vertify_session(flask.session['special']):
  6906			return flask.redirect(flask.url_for('choice_mode'))
  6907		    pass
  6908		else:
  6909			return flask.redirect(flask.url_for('choice_mode'))	
  6910		Bidprice = Decimal(flask.request.form.get('Bid'))
  6911	
  6912		#Bidprice = Decimal()
  6913	
  6914		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  6915	
  6916		db = connectauctions()	
  6917	
  6918		uo = db.cursor()	
  6919	
  6920		po = db.cursor()
  6921	
  6922		po.execute('select amount from auctions where item_id=%s ORDER BY amount DESC limit 1', (auction,))
  6923	
  6924		amounts = po.fetchone()[0]
  6925	
  6926		if not amounts:
  6927	
  6928		    amounts = 0
  6929	
  6930		else:
  6931	
  6932		    pass	
  6933	
  6934		uo.execute('select bid from auctions where item_id=%s order by bid desc limit 1', (auction,))
  6935	
  6936		bid2 = Decimal(uo.fetchone()[0])
  6937	
  6938		bid2 = Decimal(bid2)
  6939	
  6940		if Bidprice > bid2:
  6941	
  6942		    upd = db.cursor()
  6943	
  6944		    amounts = int(amounts)
  6945	
  6946		    amount = amounts+1	    
  6947	
  6948		    pa = db.cursor()
  6949	
  6950		    pa.execute('select vendor from auctions where item_id=%s', (auction,))
  6951	
  6952		    vendor = pa.fetchone()[0]
  6953	
  6954		    pi = db.cursor()
  6955	
  6956		    pi.execute('select count(bid) from auctions where item_id=%s order by bid asc', (auction,))
  6957	
  6958		    if int(pi.fetchone()[0]) > 9:
  6959	
  6960			pq = db.cursor()
  6961	
  6962			pq.execute('select bid from auctions where item_id=%s order by bid asc', (auction,))
  6963	
  6964			oldest = pq.fetchone()[0]
  6965	
  6966			pq.execute('delete from auctions where item_id=%s and bid=%s', (auction, oldest))
  6967	
  6968			db.commit()
  6969	
  6970		    else:
  6971	
  6972			pass
  6973	
  6974		    upd.execute('insert into auctions(item_id, bid, bider, vendor, amount) value(%s, %s, %s, %s, %s)', (auction, Bidprice, nick, vendor, amount))
  6975	
  6976		    db.commit()
  6977	
  6978		    #amount add +1 in amount to c how many bids have been done 
  6979	
  6980		    error = 'Bid added!'
  6981	
  6982		    pass
  6983	
  6984		else:
  6985	
  6986		    error = 'your bid needs to be higher then the current'
  6987	
  6988		    pass
  6989	
  6990		entries2 = wl_entries_cache().give_me_entries()
  6991	
  6992		uo = db.cursor()
  6993	
  6994		uo.execute('select bid from auctions where item_id=%s order by bid desc limit 1', (auction,))
  6995	
  6996		currentbid = uo.fetchone()[0] 	
  6997	
  6998	
  6999	
  7000		if not currentbid:
  7001	
  7002		    currentbid = 0
  7003	
  7004		else:
  7005	
  7006		    pass
  7007	
  7008		db.close()
  7009		db2.close()
  7010	
  7011		return flask.render_template('auction.html', piclink=piclink, newsentries=wl_html_cache().get_news(), amounts=amounts, currentbid=currentbid, error=error, msg=getmsgs(), entries2=entries2, mess=getmsgs())
  7012	
  7013	    
  7014	
  7015	    ser = db.cursor()
  7016	
  7017	    #'where auction'
  7018	
  7019	    ser.execute('select og_time from auctions where item_id=%s order by og_time desc', (auction,))
  7020	
  7021	    tl = ser.fetchone()[0]
  7022	
  7023	    #tl = datetime.datetime.strptime(tl, '%Y-%m-%d')
  7024	
  7025	    po = db.cursor()
  7026	
  7027	    po.execute('select bid from auctions where item_id=%s ORDER BY bid DESC limit 1', (auction,))
  7028	
  7029	    currentbid = Decimal(po.fetchone()[0])
  7030	
  7031	#    oi = db.cursor()
  7032	
  7033	    oi.execute('select vendor from auctions where item_id=%s', (auction,))
  7034	
  7035	    vendor = oi.fetchone()[0]
  7036	
  7037	      
  7038	
  7039	
  7040	
  7041	    uo = db.cursor()
  7042	
  7043	    uo.execute('select amount from auctions where item_id=%s ORDER BY bid DESC limit 1', (auction,))
  7044	
  7045	    amounts = uo.fetchone()[0]    
  7046	
  7047	    if not amounts:
  7048	
  7049		amounts = 0
  7050	
  7051	    else:
  7052	
  7053		pass       
  7054	
  7055	    h = daysuntil(tl)
  7056	
  7057	    d = hoursuntil(tl)
  7058	
  7059	    entries2 = wl_entries_cache().give_me_entries()
  7060	
  7061	    
  7062	
  7063	    timeleft = 'time left is ' + str(d) + ', and ' + str(h) +  ' days'
  7064	
  7065	    db.close()
  7066	
  7067	    return flask.render_template('auction.html', newsentries=wl_html_cache().get_news(), title=title, piclink=piclink, Quantity=Quantity, vendor=vendor, entries2=entries2, amounts=amounts, currentbid=currentbid, mess=getmsgs(), timeleft=timeleft, pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice())
  7068	
  7069	
  7070	
  7071	
  7072	
  7073	
  7074	
  7075	@wl.route('/add_auction', methods=['POST', 'GET'])   
  7076	@noindex
  7077	@axss
  7078	@adate
  7079	@af
  7080	def add_auction(): #add condom on all n this
  7081	    if flask.session.has_key('special') and flask.session:
  7082		if not vertify_session(flask.session['special']):
  7083		    return flask.redirect(flask.url_for('choice_mode'))
  7084		pass
  7085	    else:
  7086		return flask.redirect(flask.url_for('choice_mode')) 
  7087	   
  7088	    if not decode_session(flask.session['special'])[1] == 'vendor':   
  7089		return flask.redirect(flask.url_for('choice_mode')) 
  7090	    
  7091	    if flask.session.has_key('special') and decode_session(flask.session['special'])[1] == 'vendor':
  7092		if not vertify_session(flask.session['special']):
  7093		    return flask.redirect(flask.url_for('choice_mode'))
  7094		pass
  7095	    else:
  7096		return flask.redirect(flask.url_for('choice_mode'))     
  7097	    
  7098	    if flask.request.method == 'POST':
  7099	
  7100		if flask.session.has_key('special') and flask.session:
  7101		    if not vertify_session(flask.session['special']):
  7102			return flask.redirect(flask.url_for('choice_mode'))
  7103		    pass
  7104		else:
  7105			return flask.redirect(flask.url_for('choice_mode'))
  7106	
  7107		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7108	
  7109	#	iid = flask.request.form.get('itemid')			
  7110		#price = flask.request.form.get('Price')
  7111	
  7112		time = flask.request.form.get('time')
  7113	#item	
  7114		Quantity = flask.request.form.get('Quantity')
  7115		des = flask.request.form.get('description')
  7116		title = flask.request.form.get('title')
  7117		btcaddr = flask.request.form.get('btcaddr')
  7118		digital = flask.request.form.get('digital')
  7119	
  7120		bid = flask.request.form.get('bid')
  7121		file = flask.request.files.get('file', False)
  7122		shipto = flask.request.form['Shippingto']
  7123		shipprice = flask.request.form.get('shippingprice')
  7124		cat = flask.request.form['Category1']	
  7125	
  7126	
  7127		if not shipprice:
  7128	
  7129		    shipprice = 'free'
  7130	
  7131	
  7132	
  7133		if file:# and allowed_file(file.filename):
  7134	
  7135		    if allowed_file(file.filename):
  7136	
  7137			filename = secure_filename(file.filename)
  7138	
  7139			extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
  7140	
  7141			filename = extra + filename
  7142	
  7143			emma = wl.config['items_FOLDER'] + '/' + filename
  7144			file.save(emma)
  7145	
  7146			cleans(emma)
  7147			pass
  7148	
  7149		    else:
  7150	
  7151			return flask.render_template('addauctions.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), error='wrong type of file, We only allow: png, jpg, jpeg and gif')
  7152	
  7153		else:
  7154	
  7155		    filename = 'xMrXK0bqi5ryxVRgdr4u04iMJV4itempic.png'
  7156	
  7157		    pass
  7158	
  7159		    #filename = wl.config['items_FOLDER'] + '/' + filename
  7160	
  7161	#	if not file:
  7162	
  7163	#	    file = 'xMrXK0bqi5ryxVRgdr4u04iMJV4itempic.png'
  7164	
  7165	#	else:    
  7166	
  7167	#	    pass
  7168	
  7169	        #print btcaddr
  7170	
  7171		if not btcaddr:
  7172		    btcaddr = 'nope'
  7173		if btcaddr:
  7174		#   #sprint btcaddr
  7175		#   #sprint 'got btcaddr'
  7176		    if not btcaddr == "nope":
  7177			if len(btcaddr) > 5 and not validateaddress(btcaddr):
  7178			   #sprint 'not validated address'
  7179			    error = 'invalid bitcoin address'
  7180			    return flask.render_template('addauctions.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), error='invalid bitcoin address')
  7181			else:
  7182			    btcheck = True# not needed
  7183			    pass
  7184	
  7185	
  7186		if not digital:
  7187	
  7188		    digital = 'no'
  7189	
  7190		else:
  7191	
  7192		    pass
  7193	
  7194		time = int(time)
  7195	
  7196		today = datetime.date.today()
  7197	
  7198		extrad = datetime.timedelta(days=time)
  7199	
  7200		otime = today + extrad
  7201	
  7202		db1 = connectitems()
  7203	
  7204		db2 = connectauctions()
  7205		rq,rq2 = db1.cursor(), db1.cursor()	
  7206	
  7207		rq3 = db2.cursor()
  7208	
  7209		rq4 = db2.cursor()
  7210	
  7211		#today = datetime.date.today()
  7212	
  7213		auction = 'yes'
  7214	
  7215		rq.execute('insert into items(auction, item_name, item_des, item_btcaddr, item_piclink, item_vendor, item_shippin_to, item_shippin_price, item_digi, number_sold, amount_in_stock, item_category) value(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', (str(auction), str(title), str(des), str(btcaddr), str(filename), str(nick), str(shipto), str(shipprice), str(digital), '0', str(Quantity), str(cat)))
  7216	
  7217		db1.commit()
  7218		db2.commit()	
  7219	
  7220		rq2.execute('select item_id from items where item_vendor=%s and item_name=%s and item_des=%s and item_shippin_to=%s and item_shippin_price=%s', (nick, title, des, shipto, shipprice))
  7221	
  7222		idt = rq2.fetchone()[0]
  7223	
  7224	#sprint 'item id: ', idt 
  7225		rq3.execute('insert into auctions(item_id, bid, vendor, amount) value(%s, %s, %s, %s)', (idt, bid, nick, Quantity))
  7226	
  7227		rq4.execute('insert into auctions(og_time, vendor, item_id) value(%s, %s, %s)', (otime, nick, idt))
  7228		db1.commit()
  7229		db2.commit()
  7230	
  7231		db1.close()
  7232		db2.close()
  7233	
  7234		error = 'Auction created!'
  7235	
  7236		entries2 = wl_entries_cache().give_me_entries()
  7237	
  7238		
  7239	
  7240		return flask.render_template('addauctions.html', newsentries=wl_html_cache().get_news(), entries2=entries2, error=error, mess=getmsgs())
  7241	
  7242		
  7243	    error = False
  7244	
  7245	    entries2 = wl_entries_cache().give_me_entries()
  7246	    meh = flask.render_template
  7247	
  7248	    return flask.render_template('addauctions.html', newsentries=wl_html_cache().get_news(), entries2=entries2, error=error, mess=getmsgs(), pricetable=searchingfor().getpt()) #wl_html_cache().return_page('addauctions' ,meh)#flask.render_template('addauctions.html', soo=searchingfor().latestbtcprice(), pricetable=searchingfor().getpt(), mess=getmsgs(), entries2=entries2)
  7249	
  7250	
  7251	
  7252	
  7253	
  7254	def daysuntil(tl):
  7255	
  7256	    futdate = tl
  7257	
  7258	    today   = datetime.date.today()
  7259	
  7260	    now     = datetime.datetime.now()
  7261	
  7262	    mnight  = now.replace(hour=0, minute=0, second=0, microsecond=0)
  7263	
  7264	    seconds = (mnight - now).seconds
  7265	
  7266	    days    = (futdate - today).days
  7267	
  7268	    hms     = str(datetime.timedelta(seconds=seconds))
  7269	
  7270	    return days
  7271	
  7272	
  7273	
  7274	
  7275	
  7276	def hoursuntil(tl):
  7277	
  7278	    futdate = tl
  7279	
  7280	    today   = datetime.date.today()
  7281	
  7282	    now     = datetime.datetime.now()
  7283	
  7284	    mnight  = now.replace(hour=0, minute=0, second=0, microsecond=0)
  7285	
  7286	    seconds = (mnight - now).seconds
  7287	
  7288	    days    = (futdate - today).days
  7289	
  7290	    hms     = str(datetime.timedelta(seconds=seconds))
  7291	
  7292	    return hms
  7293	
  7294	
  7295	
  7296	
  7297	
  7298	def timeuntil(tl):
  7299	
  7300	    futdate = tl
  7301	
  7302	    today   = datetime.date.today()
  7303	
  7304	    now     = datetime.datetime.now()
  7305	
  7306	    mnight  = now.replace(hour=0, minute=0, second=0, microsecond=0)
  7307	
  7308	    seconds = (mnight - now).seconds
  7309	
  7310	    days    = (futdate - today).days
  7311	
  7312	    hms     = str(datetime.timedelta(seconds=seconds))
  7313	
  7314	    return ("%d days %s" % (days, hms))
  7315	
  7316	
  7317	
  7318	
  7319	def isloggedin(nick):
  7320	    for line in s_db.getall():
  7321		if s_db.get(line) == nick:
  7322		    return True
  7323	
  7324	
  7325	def nicksessionremove(nick):
  7326	    niki = False
  7327	    for line in s_db.getall():
  7328		if s_db.get(line) == nick:
  7329		    s_db.rem(line)
  7330		    niki = True
  7331	    return niki
  7332	
  7333	
  7334	
  7335	#session encryption, goal = give member/client only a sting that cant be tamperd with
  7336	
  7337	def sessionencryption(session_data):
  7338	
  7339	
  7340	
  7341	#add signature after blockcipher?    
  7342	
  7343	    return encrypted_session
  7344	
  7345	
  7346	
  7347	
  7348	
  7349	def decrypt_session(session_data):
  7350	
  7351	    
  7352	
  7353	    return decrypted_session
  7354	
  7355	#sort in string?
  7356	
  7357	
  7358	
  7359	
  7360	
  7361	#general vendor information about all em things
  7362	
  7363	@wl.route('/ven_info', methods=['GET'])
  7364	
  7365	@noindex
  7366	
  7367	@adate
  7368	
  7369	@axss
  7370	
  7371	@af
  7372	
  7373	def vendorinfo():
  7374	
  7375	   # verify that usr is vendor
  7376	
  7377	    if flask.session.has_key('special') and decode_session(flask.session['special'])[1] == 'vendor':
  7378		if not vertify_session(flask.session['special']):
  7379		    return flask.redirect(flask.url_for('choice_mode'))
  7380		pass
  7381	    else:
  7382		return flask.redirect(flask.url_for('choice_mode'))     
  7383	
  7384	    meh = flask.render_template#add all docs regarding sales and vendor info
  7385	
  7386	    return wl_html_cache().return_page('vendor_info', meh)#flask.render_template('vendor_info.html', pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice(), mess=getmsgs())#/ven_info
  7387	
  7388	
  7389	
  7390	
  7391	def check_free(itemid):
  7392	    Free = False
  7393	    db = connectitems()
  7394	    trewq = db.cursor()
  7395	    trewq.execute('select item_price, item_shippin_price from items where item_id=%s', (itemid,))
  7396	    weq = trewq.fetchall()
  7397	    if weq:
  7398		if weq[0][0] == '0' and weq[0][1] == 'free':
  7399		    Free = True
  7400	    db.close()
  7401	    return Free
  7402	
  7403	
  7404	
  7405	#most bought in this category
  7406	
  7407	
  7408	
  7409	#todo: stars, mostsold items
  7410	
  7411	
  7412	
  7413	#crypt x usrs msg with x users nick or grtzphrase
  7414	
  7415	@wl.route('/itemz/<item_id>', methods=['POST', 'GET'])
  7416	@noindex
  7417	@adate
  7418	@axss
  7419	@af
  7420	def itemz(item_id):
  7421	
  7422	    if not flask.session.has_key("nick"):
  7423	
  7424		return flask.redirect(flask.url_for('choice_mode'))  
  7425	
  7426	    if flask.session.has_key('special') and flask.session:
  7427		if not vertify_session(flask.session['special']):
  7428		    return flask.redirect(flask.url_for('choice_mode'))
  7429		pass
  7430	    else:
  7431		return flask.redirect(flask.url_for('choice_mode')) 
  7432	    
  7433	    if not verifynumberinput(item_id):
  7434		return flask.redirect(flask.url_for('choice_mode'))
  7435	    berror = False
  7436	
  7437	    error = False
  7438	    if flask.request.method == 'POST':
  7439		if flask.session.has_key('special') and flask.session:
  7440		    if not vertify_session(flask.session['special']):
  7441			return flask.redirect(flask.url_for('choice_mode'))
  7442		    pass
  7443		else:
  7444			return flask.redirect(flask.url_for('choice_mode'))	
  7445	
  7446	
  7447		if not verifynumberinput(item_id):
  7448		    return flask.redirect(flask.url_for('choice_mode'))
  7449	
  7450		if flask.session.has_key('special') and flask.session:
  7451		    if not vertify_session(flask.session['special']):
  7452			return flask.redirect(flask.url_for('choice_mode'))
  7453		    pass
  7454		else:
  7455		    return flask.redirect(flask.url_for('choice_mode')) 
  7456	
  7457		entries2 = wl_entries_cache().give_me_entries()
  7458		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7459	
  7460		d = flask.request.form.get('id')
  7461	
  7462		payment_type = flask.request.form.get('cointype')
  7463		Quantity = int(flask.request.form.get('Quantity'))#isinstance int
  7464	
  7465		if not isinstance(Quantity, int):
  7466		    try:
  7467			a23432 = int(Quantity)
  7468			pass
  7469		    except ValueError:
  7470			return flask.render_template('item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='invalid input, try again', mess=getmsgs(), entries2=entries2)
  7471		#create order
  7472	
  7473		db = connectitems()
  7474	
  7475		payment_type = db.escape_string(payment_type)
  7476		if not ['btc', 'xmr'].__contains__(payment_type.lower()):
  7477		    return flask.render_template('item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='invalid input', mess=getmsgs(), entries2=entries2)
  7478	
  7479		if payment_type.lower() == 'xmr' and  not vendor_accept_monero(item_id):
  7480		    return flask.render_template('item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='The Vendor does not accept monero payments', mess=getmsgs(), entries2=entries2)
  7481	
  7482		if payment_type.lower() == 'xmr' and not handle_monero().check_status():
  7483		   #sprint str(datetime.datetime.now()) + ': checkstatus fail| error error - backend is down' 
  7484		    return flask.render_template('item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='We are currently syncing the monero blockchain and can not accept any monero orders until that is done', mess=getmsgs(), entries2=entries2)
  7485		   
  7486		
  7487		db2 = connectcoinz()
  7488		pi = db2.cursor()
  7489		ipp = db.cursor()
  7490		ipp.execute('select amount_in_stock from items where item_id=%s', (item_id,))
  7491		hmm = ipp.fetchone()[0]
  7492		if len(hmm) == 0:
  7493		    hmm = 0
  7494		else:
  7495		    hmm = hmm
  7496		exam = int(hmm)
  7497		
  7498		
  7499		if Quantity > exam:
  7500		    error = 'Thats more then the vendor got in stock, we suggest you that you contact the vendor and ask him to increse the amount in stock for this item'# + """<br><a href='/msg/'> Send the Vendor a Message</a> """
  7501		    if hmm == 0:
  7502			vendor_item_del(item_id)
  7503			pass
  7504		    else:
  7505			pass
  7506		    db2.close()
  7507		    db.close()
  7508		    return flask.render_template('item.html', berror=berror, newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2)
  7509	
  7510	
  7511		pi.execute('select amount from coinorder where item_id=%s and status=%s and buyer=%s', (item_id, 'unpaid', nick))
  7512	
  7513		if pi.fetchone():
  7514	
  7515	#	    entries2 = wl_entries_cache().give_me_entries()
  7516	
  7517		    
  7518		    db2.close()
  7519		    db.close()	 
  7520		    berror = item_id
  7521	
  7522		    #error = 'you need to finish your first order with this item before you buy more, go to /buy/thisitem'
  7523	
  7524		    return flask.render_template('item.html', berror=berror, newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2)
  7525	
  7526		else:
  7527	
  7528		    pass
  7529		db = connectitems()
  7530	
  7531		fds,fs = db.cursor(),db.cursor()
  7532	
  7533		fds.execute('select item_vendor from items where item_id=%s', (d,))
  7534		fs.execute('select item_btcaddr from items where item_id=%s', (d,))	
  7535		seller = fds.fetchone()[0]
  7536	
  7537		vbtcaddr = fs.fetchone()[0]
  7538		name = gettoken()
  7539	#sprint 'adding to coinorder!'#i think its more secure to use the item_id rather then the 'd' input, maybe add validate
  7540	
  7541		addtocoinorder(name, nick, seller, item_id, Quantity, vbtcaddr, payment_type)	
  7542	
  7543		db2.close()
  7544		db.close()
  7545	
  7546		return flask.redirect('/buy/' + item_id, code=302) 
  7547	
  7548	    
  7549	
  7550	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7551	
  7552	    db = connectitems()  
  7553	
  7554	    trew = db.cursor()
  7555	
  7556	    derw = db.cursor()
  7557	    
  7558	    dersw = db.cursor()
  7559	    derws = dersw
  7560	    dersw.execute('select item_star from items where item_nick=%s', (item_id,))
  7561	    teststar = dersw.fetchall()    
  7562	    #print 'teststart: ' + str(teststar)    
  7563	    if not teststar:#len(teststar) == 0:
  7564		teststar = 0
  7565	    else:
  7566		teststar#[0]
  7567		
  7568	#digital: {{ entry.digital }}<br>
  7569	
  7570	    derw.execute('select number_sold from items where item_id=%s', (item_id,))
  7571	    amsold = derw.fetchone()#[0]
  7572	    if not amsold:
  7573		amsold = 0
  7574	    else:
  7575		amsold = amsold[0]
  7576	    if len(str(amsold)) == 0:
  7577		amsold = 0
  7578	    derws.execute('select amount_in_stock from items where item_id=%s', (item_id,))
  7579	    amstock = derws.fetchone()#[0]
  7580	    if not amstock:
  7581		amstock = 0
  7582	    else:
  7583		amstock = amstock[0]	
  7584	    if len(str(amstock)) == 0:
  7585		amstock = 0
  7586	    trew.execute('select item_id from items where auction=%s and item_id=%s', ('yes', item_id))
  7587	
  7588	    ytr = trew.fetchone()
  7589	
  7590	    if ytr:
  7591		db.close()
  7592	
  7593		return flask.redirect('/auction/' + item_id, code=302) 
  7594	
  7595	    lulls = db.cursor()
  7596	
  7597	    lus = db.cursor()
  7598	
  7599	    sul = db.cursor()
  7600	    lsl = sul
  7601	    lsl.execute('select item_price from items where item_id=%s', (item_id,))
  7602	    mpe = lsl.fetchone()
  7603	    if mpe:
  7604		if len(mpe) == 0:
  7605		    pricee = 0
  7606		elif len(mpe[0]) == 0:
  7607		    pricee = 0
  7608		    error = 'No such item'
  7609		else:
  7610		    pricee = int(mpe[0])
  7611	    else:
  7612		error = 'No such item' #
  7613		pricee = 0
  7614	
  7615	    btcprice = float(pricee)
  7616	    btcprice = searchingfor().convertusd2btc(btcprice)#b.convert_to_btc(btcprice, 'USD')#use with class
  7617	    moneroprice = handle_monero().convertusd2monero(str(pricee))
  7618	    mess = getmsgs()
  7619	    soo = searchingfor().latestbtcprice()
  7620	    pricetable = searchingfor().getpt()
  7621	    entries2 = wl_entries_cache().give_me_entries()
  7622	    db2 = connectvens()
  7623	    ee = db2.cursor()
  7624	    ee.execute('select role from vens where nick=%s', (nick,))
  7625	    role = ee.fetchone()
  7626	    role = role[0]   
  7627	    
  7628	    if error == "No such item":
  7629		db2.close()
  7630		db.close()
  7631		return flask.render_template('item.html', moneroprice=moneroprice, newsentries=wl_html_cache().get_news(), emnick=nick, pricetable=pricetable, role=role, entries2=entries2, mess=mess, soo=soo, b=btcprice, error=error)#, pricetable=pricetable, soo = b.get_latest_price('USD'), b=btcprice)	
  7632	
  7633	    lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, number_sold, amount_in_stock, item_category, item_vendor from items where item_id=%s', (item_id,))
  7634	    entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], sold=row[9], instock=row[10], cate=row[11], vendor=row[12]) for row in lulls.fetchall()]
  7635	
  7636	   
  7637	
  7638	    #stars
  7639	
  7640	    db.close()
  7641	    s1 = starhookup(teststar)[4]
  7642	    s2 = starhookup(teststar)[3]
  7643	    s3 = starhookup(teststar)[2]
  7644	    s4 = starhookup(teststar)[1]
  7645	    s5 = starhookup(teststar)[0]
  7646	    stars = [s5, s4, s3, s2, s1]
  7647	   #sprint 'amstock' + str(amstock)
  7648	
  7649	    #db.close()
  7650	    db2.close()
  7651	    return flask.render_template('item.html', moneroprice=moneroprice, newsentries=wl_html_cache().get_news(), emnick=nick, ame=amstock, teststar=stars, amsold=amsold, pricetable=pricetable, role=role, entries2=entries2 ,entries=entries, mess=mess, soo=soo, b=btcprice, error=error)#, pricetable=pricetable, soo = b.get_latest_price('USD'), b=btcprice)
  7652	
  7653	#starhookup(teststar)
  7654	
  7655	#Rateing threestar stars:
  7656	#★ ★ ★ ★ ★ :
  7657	#★ ★ ★ ★ :
  7658	#★ ★ ★ :
  7659	#★ ★ :
  7660	#★ : 
  7661	def starhookup(inputdata):#amount)
  7662	    #print '4: ' + str(inputdata)
  7663	    fives = '★ ★ ★ ★ ★: '
  7664	    fours = '★ ★ ★ ★: '
  7665	    threes = '★ ★ ★: '
  7666	    twos = '★ ★: '
  7667	    ones = '★: '
  7668	    f5 = 0
  7669	    f4 = 0
  7670	    f3 = 0
  7671	    f2 = 0
  7672	    f1 = 0
  7673	    if inputdata == 0:# len(inputdata) == 0 or
  7674		pass
  7675	    else:
  7676		for line in inputdata:
  7677		    line = line[0]
  7678		    if line == 'fivestar':
  7679			f5 +=  1 #amount
  7680		    elif line == 'fourstar':
  7681			f4 += 1
  7682		    elif line == 'threestar':
  7683			f3 += 1
  7684		    elif line == 'twostar':
  7685			f2 += 1
  7686		    elif line == 'onestar':
  7687			f1 += 1
  7688		    else:
  7689			pass
  7690	    br = ' <br> '
  7691	    outit = fives + str(f5) + br + fours + str(f4) + br + threes + str(f3) + br + twos + str(f2) + br + ones + str(f1) + br
  7692	    fives = fives + str(f5) 
  7693	    fours = fours + str(f4) 
  7694	    threes = threes + str(f3) 
  7695	    twos = twos + str(f2) 
  7696	    ones = ones + str(f1)
  7697	    
  7698	    #outit = """ 
  7699	    #'★ ★ ★ ★ ★'
  7700	    #'★ ★ ★ ★'
  7701	    #'★ ★ ★'
  7702	    #'★ ★'
  7703	    #'★' """    
  7704	    return (fives, fours, threes, twos, ones)#outit
  7705	
  7706	#title
  7707	
  7708	#piclink
  7709	
  7710	#{{ entry.bs }}
  7711	
  7712	#{{ entry.emfile }}
  7713	
  7714	#title:{{ entry.title }}
  7715	
  7716	#des:{{ entry.des }}
  7717	
  7718	#price:{{ entry.price}}
  7719	
  7720	#piclink:{{ entry.piclink }}
  7721	
  7722	#vendor: <a href='/vendor/{{ entry.ven }}'> {{ entry.ven }}</a>
  7723	
  7724	#ship to:{{ entry.shipto }}
  7725	
  7726	#shipprice:{{ entry.shipprice }}<br>
  7727	
  7728	#digital:{{ entry.digital }}<br>
  7729	
  7730	#date: {{ entry.date }}<br>
  7731	
  7732	#cate: {{ entry.cate }}
  7733	
  7734	
  7735	
  7736	
  7737	
  7738	##/message/support/inbox/read/
  7739	
  7740	#@wl.route('/message/support/inbox/read/<token>/', methods=['POST', 'GET'])
  7741	
  7742	#@wl.route('/message/support/inbox/read/<token>', methods=['POST', 'GET'])
  7743	
  7744	#@noindex
  7745	
  7746	#@adate
  7747	
  7748	#@axss
  7749	
  7750	#@af
  7751	
  7752	#def inbxread(token):
  7753	
  7754	##    if not flask.session.has_key("nick"):
  7755	
  7756	##	return flask.redirect(flask.url_for('choice_mode'))  
  7757	
  7758	
  7759	    ##if flask.session.has_key('special') and flask.session:
  7760		##if not vertify_session(flask.session['special']):
  7761		    ##return flask.redirect(flask.url_for('choice_mode'))
  7762		##pass
  7763	    ##else:
  7764		##return flask.redirect(flask.url_for('choice_mode')) 
  7765	    
  7766	    
  7767	    #error = False
  7768	
  7769	    #token = str(token)
  7770	
  7771	    #pricetable = searchingfor().getpt()
  7772	
  7773	    #db = connectsupport()
  7774	
  7775	    #db2 = connectvens()
  7776	   ## mess = getmsgs()    
  7777	
  7778	
  7779	
  7780	    
  7781	
  7782	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7783	
  7784	    #token = str(token)
  7785	
  7786	    #ee = db2.cursor()
  7787	
  7788	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7789	
  7790	    #ee.execute('select role from vens where nick=%s', (nick,))
  7791	
  7792	    #role = ee.fetchone()
  7793	
  7794	    #role = role[0]    
  7795	
  7796	    #gg = db.cursor()
  7797	
  7798	    #gg.execute('select title, msg, fr0m from support where token=%s', (token,))
  7799	
  7800	    #db.commit()
  7801	    
  7802	    #entries = [dict(title=row[0], message=row[1], user=row[2]) for row in gg.fetchall()]
  7803	
  7804	    #db.commit()
  7805	
  7806	    #db2.commit()
  7807	##    db.close()
  7808	
  7809	    
  7810	
  7811	    #if not entries:
  7812	
  7813		#error = 'Message not found'
  7814	
  7815	    
  7816	
  7817	    #gs = db.cursor()
  7818	
  7819	    #gs.execute('update support set readd=%s and awnserd=%s where token=%s', ('yes', 'yes', token))
  7820	
  7821	    #if flask.request.method == 'POST':
  7822	
  7823		#db = connectsupport()
  7824	
  7825		#db2 = connectvens()
  7826		#fd = db.cursor()
  7827	
  7828		#fd.execute('select title from support where token=%s', (token,))
  7829	
  7830		#title = fd.fetchone()
  7831	
  7832		#title = title[0]
  7833	
  7834		#db3 = connectinbox()
  7835		#dd = db3.cursor()
  7836	
  7837		#title = 'Re: ' + title
  7838	
  7839		#title = str(title)
  7840	
  7841		#ge = db.cursor()
  7842	
  7843		#nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7844	
  7845		#ee = db2.cursor()
  7846	
  7847		#ee.execute('select role from vens where nick=%s', (nick,))
  7848	
  7849		#role = ee.fetchone()
  7850	
  7851		#role = role[0]	
  7852	
  7853		#msg = flask.request.form.get('reply')
  7854	
  7855		#ge.execute('select fr0m from support where token=%s', (token,))	
  7856	
  7857		#sender = ge.fetchone()
  7858	
  7859		#sender = sender[0]
  7860	
  7861		#sss = db2.cursor()
  7862	
  7863		#sss.execute('select pgp from vens where nick=%s', (sender,))
  7864		#finger = sss.fetchone()
  7865		#if not finger:
  7866		    #error = 'Message Sent! error'
  7867		    #pass
  7868		#else:#force sign
  7869		    #signatu = gpg.encrypt(msg, finger[0]) #sign aswell
  7870	
  7871		    #msg = signatu	
  7872	
  7873		#token = gettoken()
  7874	
  7875		#dd.execute('insert into inbox (sender, send, msg, title, hread, token) values (%s, %s, %s, %s, %s, %s)', ('Legion of Warezloaders', sender, msg, title, 'no', token))
  7876	
  7877		#error = 'Message sent!'
  7878	
  7879		#pricetable = searchingfor().getpt()
  7880	
  7881		#mess = getmsgs()	
  7882	
  7883		#db.commit()
  7884		#db2.commit()
  7885		#db3.commit()
  7886		#db.close()
  7887		#db2.close()
  7888		#db3.close()
  7889		
  7890		#return flask.render_template('inboxread.html', newsentries=wl_html_cache().get_news(), role=role, soo = searchingfor().latestbtcprice(), pricetable=pricetable, error=error, entries=entries)
  7891	
  7892	    #db.close()
  7893	
  7894	    #db2.close()
  7895	##    db3.close()    
  7896	    #return flask.render_template('inboxread.html', newsentries=wl_html_cache().get_news(), emnick=nick, role=role, soo = searchingfor().latestbtcprice(), pricetable=pricetable, error=error, entries=entries)
  7897	
  7898	    
  7899	
  7900	    
  7901	
  7902	
  7903	
  7904	#mysql> alter table inbox add column note text after send;
  7905	
  7906	
  7907	
  7908	#sort the messages
  7909	
  7910	#@wl.route('/message/read/sortby/<stuff>')
  7911	
  7912	#read the message, random token
  7913	
  7914	@wl.route('/message/read/<thetoken>/', methods=['POST', 'GET'])
  7915	@noindex
  7916	@adate
  7917	@axss
  7918	@af
  7919	def readmsg(thetoken):
  7920	
  7921	    if not flask.session.has_key("nick"):
  7922	
  7923		return flask.redirect(flask.url_for('choice_mode')) 
  7924	
  7925	    if flask.session.has_key('special') and flask.session:
  7926		if not vertify_session(flask.session['special']):
  7927		    return flask.redirect(flask.url_for('choice_mode'))
  7928		pass
  7929	    else:
  7930		return flask.redirect(flask.url_for('choice_mode'))     
  7931	
  7932	
  7933	    orderlink,brandnewmsg = False, False
  7934	    db = connectinbox()
  7935	
  7936	    db2 = connectvens()
  7937	    error = False
  7938	
  7939	    token = str(thetoken)
  7940	
  7941	    pricetable = searchingfor().getpt()#getpt()
  7942	
  7943	    mess = getmsgs()    
  7944	
  7945	
  7946	
  7947	    
  7948	
  7949	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7950	
  7951	    token = str(thetoken)
  7952	
  7953	    gg = db.cursor()
  7954	
  7955	    gg.execute('select title, msg, sender from inbox where send=%s and token=%s', (nick, token))
  7956	
  7957	    entries = [dict(title=row[0], message=row[1], user=row[2]) for row in gg.fetchall()]
  7958	
  7959	    db.commit()
  7960	
  7961	    #db.close()
  7962	
  7963	    pp = db.cursor()
  7964	
  7965	    pp.execute('select sender from inbox where sender=%s and send=%s and token=%s', ('warezloader-store-bot',nick, token))
  7966	    aqa = pp.fetchone()
  7967	   #sprint 'checking it'
  7968	    if aqa:
  7969		if len(aqa)>0:
  7970		   #sprint 'length is bigger'
  7971		    if aqa[0] == 'warezloader-store-bot':
  7972		#sprint 'wl bot is true'
  7973			qasd,dasm = db.cursor(),db.cursor()
  7974			qasd.execute('select note from inbox where token=%s and send=%s and sender=%s', (token,nick,'warezloader-store-bot'))
  7975			dasm.execute('select msg from inbox where token=%s and send=%s and sender=%s', (token,nick,'warezloader-store-bot'))
  7976			iloveyou = qasd.fetchone()
  7977			if iloveyou:
  7978			   #sprint 'i love you is true'
  7979			    if len(iloveyou) > 0:
  7980			#sprint 'i lover u is longer then 0'
  7981				if iloveyou[0][:7] == '/order/':
  7982				   #sprint 'orderlink is true!'
  7983				    orderlink = iloveyou[0]#iloveyou[0].replace('Dont forget to finish your order, Here is the order link ', '')#meh u dont need to use a regex every time	
  7984				    brandnewmsg = dasm.fetchone()[0].split('/order')[0].split('Here')
  7985	    ee = db2.cursor()
  7986	
  7987	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  7988	
  7989	    ee.execute('select role from vens where nick=%s', (nick,))
  7990	
  7991	    role = ee.fetchone()
  7992	
  7993	    role = role[0]    
  7994	
  7995	    if not entries:
  7996	
  7997		error = 'Message not found'
  7998	
  7999	    
  8000	
  8001	    gs = db.cursor()
  8002	
  8003	    entries2 = wl_entries_cache().give_me_entries()    
  8004	
  8005	    
  8006	
  8007	    gs.execute('update inbox set hread=%s where token=%s', ('yes', token))
  8008	
  8009	    db.commit()
  8010	
  8011	    #db.close()
  8012	
  8013	    
  8014	
  8015	    if flask.request.method == 'POST':
  8016	
  8017	
  8018		if flask.session.has_key('special') and flask.session:
  8019		    if not vertify_session(flask.session['special']):
  8020			return flask.redirect(flask.url_for('choice_mode'))
  8021		    pass
  8022		else:
  8023		    
  8024		    return flask.redirect(flask.url_for('choice_mode')) 	
  8025		
  8026		db = connectinbox()
  8027	
  8028		fd = db.cursor()
  8029	
  8030		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8031	
  8032		fd.execute('select title from inbox where token=%s', (token,))
  8033	
  8034		title = fd.fetchone()
  8035	
  8036		entries2 = wl_entries_cache().give_me_entries()    
  8037	
  8038		
  8039	
  8040		title = title[0]
  8041	
  8042		dd = db.cursor()
  8043	
  8044		title = 'Re: ' + title
  8045	
  8046		title = str(title)
  8047	
  8048		ge = db.cursor()
  8049	
  8050		msg = flask.request.form.get('reply')
  8051	
  8052		ge.execute('select sender from inbox where send=%s and token=%s', (nick, token))	
  8053	
  8054		sender = ge.fetchone()
  8055	
  8056		sender = sender[0]
  8057		if sender[:8].lower() == "cloaked_":
  8058			title = 'CLOAKED ' + title
  8059			newly = cloak().resolvecloak(sender)
  8060			if not newly:
  8061				db.close()
  8062				return flask.render_template('inboxread.html', error='Expired cloak', entries2=entries2, soo=searchingfor().latestbtcprice(), pricetable=pricetable, mess=mess)
  8063			sender = newly
  8064	
  8065		fromm = nick
  8066		lkko = cloak().hascloak(nick)
  8067		if lkko:
  8068			fromm = lkko
  8069	
  8070	
  8071		token = gettoken()
  8072		reciever = sender
  8073		if 'Legion of Warezloader' in reciever:
  8074		    error = 'Message sent!'
  8075		    sendtosupport(reciever, nick, msg, token, title)
  8076		    return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8077	
  8078		else:
  8079		    pass
  8080	
  8081			
  8082	
  8083		if 'Legion of Warezloaders' in reciever:
  8084		    error = 'Message sent!'
  8085		    sendtosupport(sender, nick, msg, token, title)
  8086		    return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8087	
  8088		else:
  8089		    pass
  8090	
  8091			
  8092	
  8093		if 'censorednick' in reciever:
  8094		    error = 'Message sent!'
  8095	
  8096		    sendtosupport(sender, nick, msg, token, title)
  8097	
  8098		    return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8099	
  8100		else:
  8101	
  8102		    pass
  8103	
  8104		if 'censorednick' in reciever:
  8105		    error = 'Message sent!'
  8106	
  8107		    sendtosupport(sender, nick, msg, token, title)
  8108	
  8109		    return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8110	
  8111		else:
  8112		    pass
  8113	
  8114		if 'censored' in reciever:
  8115		    error = 'Message sent!'
  8116		    sendtosupport(sender, nick, msg, token, title)
  8117	
  8118		    return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8119	
  8120		else:
  8121	
  8122		    pass	
  8123	
  8124		dd.execute('insert into inbox (sender, send, msg, title, hread, token) values (%s, %s, %s, %s, %s, %s)', (fromm, sender, msg, title, 'no', token))
  8125	
  8126		error = 'Message sent!'
  8127		db2 = connectvens()
  8128	
  8129		db2.commit()
  8130		db.commit()
  8131		pricetable = searchingfor().getpt()
  8132		ee = db2.cursor()
  8133	
  8134		ee.execute('select role from vens where nick=%s', (nick,))
  8135	
  8136		role = ee.fetchone()
  8137	
  8138		role = role[0]	
  8139	
  8140		#sd
  8141	
  8142		mess = getmsgs()	
  8143	
  8144		db2.close()
  8145		db.close()
  8146	
  8147		return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries, cloak=cloak().hascloak(nick))
  8148	
  8149	
  8150	    db2.close()
  8151	    db.close()
  8152	
  8153	    return flask.render_template('inboxread.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, role=role, mess=mess, pricetable=pricetable, error=error, entries=entries, soo=searchingfor().latestbtcprice(), cloak=cloak().hascloak(nick))
  8154	
  8155	
  8156	#soo = b.get_latest_price('USD'),
  8157	
  8158	
  8159	
  8160	
  8161	@wl.route('/message_new/read/<thetoken>/', methods=['POST', 'GET'])
  8162	@noindex
  8163	@adate
  8164	@axss
  8165	@af
  8166	def readnewmsg(thetoken):
  8167	    if not flask.session.has_key("nick"):
  8168		return flask.redirect(flask.url_for('choice_mode')) 
  8169	
  8170	    if flask.session.has_key('special') and flask.session:
  8171		if not vertify_session(flask.session['special']):
  8172		    return flask.redirect(flask.url_for('choice_mode'))
  8173		pass
  8174	    else:
  8175		return flask.redirect(flask.url_for('choice_mode'))     
  8176	
  8177	
  8178	    orderlink,brandnewmsg = False, False
  8179	    db = connectinbox()
  8180	
  8181	    db2 = connectvens()
  8182	    error = False
  8183	
  8184	    token = str(thetoken)
  8185	
  8186	    pricetable = searchingfor().getpt()#getpt()
  8187	
  8188	    mess = getmsgs()    
  8189	
  8190	
  8191	
  8192	    
  8193	
  8194	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8195	
  8196	    token = str(thetoken)
  8197	
  8198	    gg = db.cursor()
  8199	
  8200	    gg.execute('select title, msg, sender from inbox where send=%s and token=%s', (nick, token))
  8201	
  8202	    entries = [dict(title=row[0], message=row[1], user=row[2]) for row in gg.fetchall()]
  8203	
  8204	    db.commit()
  8205	
  8206	    #db.close()
  8207	
  8208	    pp = db.cursor()
  8209	
  8210	    pp.execute('select sender from inbox where sender=%s and send=%s and token=%s', ('warezloader-store-bot',nick, token))
  8211	    aqa = pp.fetchone()
  8212	   #sprint 'checking it'
  8213	    if aqa:
  8214		if len(aqa)>0:
  8215		   #sprint 'length is bigger'
  8216		    if aqa[0] == 'warezloader-store-bot':
  8217		#sprint 'wl bot is true'
  8218			qasd,dasm = db.cursor(),db.cursor()
  8219			qasd.execute('select note from inbox where token=%s and send=%s and sender=%s', (token,nick,'warezloader-store-bot'))
  8220			dasm.execute('select msg from inbox where token=%s and send=%s and sender=%s', (token,nick,'warezloader-store-bot'))
  8221			iloveyou = qasd.fetchone()
  8222			if iloveyou:
  8223			   #sprint 'i love you is true'
  8224			    if len(iloveyou) > 0:
  8225			#sprint 'i lover u is longer then 0'
  8226				if iloveyou[0][:7] == '/order/':
  8227				   #sprint 'orderlink is true!'
  8228				    orderlink = iloveyou[0]#iloveyou[0].replace('Dont forget to finish your order, Here is the order link ', '')#meh u dont need to use a regex every time	
  8229				    brandnewmsg = dasm.fetchone()[0].split('/order')[0].split('Here')
  8230	    ee = db2.cursor()
  8231	
  8232	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8233	
  8234	    ee.execute('select role from vens where nick=%s', (nick,))
  8235	
  8236	    role = ee.fetchone()
  8237	
  8238	    role = role[0]    
  8239	
  8240	    if not entries:
  8241	
  8242		error = 'Message not found'
  8243	
  8244	    
  8245	
  8246	    gs = db.cursor()
  8247	
  8248	    entries2 = wl_entries_cache().give_me_entries()    
  8249	
  8250	    
  8251	
  8252	    gs.execute('update inbox set hread=%s where token=%s', ('yes', token))
  8253	
  8254	    db.commit()
  8255	
  8256	    #db.close()
  8257	
  8258	    
  8259	
  8260	    if flask.request.method == 'POST':
  8261	
  8262	
  8263		if flask.session.has_key('special') and flask.session:
  8264		    if not vertify_session(flask.session['special']):
  8265			return flask.redirect(flask.url_for('choice_mode'))
  8266		    pass
  8267		else:
  8268		    
  8269		    return flask.redirect(flask.url_for('choice_mode')) 	
  8270		
  8271		db = connectinbox()
  8272	
  8273		fd = db.cursor()
  8274	
  8275		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8276	
  8277		fd.execute('select title from inbox where token=%s', (token,))
  8278	
  8279		title = fd.fetchone()
  8280	
  8281		entries2 = wl_entries_cache().give_me_entries()    
  8282	
  8283		
  8284	
  8285		title = title[0]
  8286	
  8287		dd = db.cursor()
  8288	
  8289		title = 'Re: ' + title
  8290	
  8291		title = str(title)
  8292	
  8293		ge = db.cursor()
  8294	
  8295		msg = flask.request.form.get('reply')
  8296	
  8297		ge.execute('select sender from inbox where send=%s and token=%s', (nick, token))	
  8298	
  8299		sender = ge.fetchone()
  8300	
  8301		sender = sender[0]
  8302	
  8303		token = gettoken()
  8304	
  8305		reciever = sender
  8306	
  8307		if 'Legion of Warezloader' in reciever:
  8308		    error = 'Message sent!'
  8309	
  8310		    sendtosupport(reciever, nick, msg, token, title)
  8311	
  8312		    return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8313	
  8314		else:
  8315	
  8316		    pass
  8317	
  8318			
  8319	
  8320		if 'Legion of Warezloaders' in reciever:
  8321		    error = 'Message sent!'
  8322	
  8323		    sendtosupport(sender, nick, msg, token, title)
  8324	
  8325		    return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8326	
  8327		else:
  8328	
  8329		    pass
  8330	
  8331			
  8332	
  8333		if 'censorednick' in reciever:
  8334		    error = 'Message sent!'
  8335	
  8336		    sendtosupport(sender, nick, msg, token, title)
  8337	
  8338		    return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8339	
  8340		else:
  8341	
  8342		    pass
  8343	
  8344		if 'censorednick' in reciever:
  8345		    error = 'Message sent!'
  8346	
  8347		    sendtosupport(sender, nick, msg, token, title)
  8348	
  8349		    return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8350	
  8351		else:
  8352		    pass
  8353	
  8354		if 'censorednick' in reciever:
  8355		    error = 'Message sent!'
  8356		    sendtosupport(sender, nick, msg, token, title)
  8357	
  8358		    return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8359	
  8360		else:
  8361	
  8362		    pass	
  8363	
  8364		dd.execute('insert into inbox (sender, send, msg, title, hread, token) values (%s, %s, %s, %s, %s, %s)', (nick, sender, msg, title, 'no', token))
  8365	
  8366		error = 'Message sent!'
  8367		db2 = connectvens()
  8368	
  8369		db2.commit()
  8370		db.commit()
  8371		pricetable = searchingfor().getpt()
  8372		ee = db2.cursor()
  8373	
  8374		ee.execute('select role from vens where nick=%s', (nick,))
  8375	
  8376		role = ee.fetchone()
  8377	
  8378		role = role[0]	
  8379	
  8380		#sd
  8381	
  8382		mess = getmsgs()	
  8383	
  8384		db2.close()
  8385		db.close()
  8386	
  8387		return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, entries=entries)
  8388	
  8389	
  8390	    db2.close()
  8391	
  8392	    db.close()
  8393	
  8394	    return flask.render_template('new/readmessage.html', brandnewmsg=brandnewmsg, orderlink=orderlink, newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, role=role, mess=mess, pricetable=pricetable, error=error, entries=entries, soo=searchingfor().latestbtcprice())
  8395	
  8396	
  8397	
  8398	
  8399	@wl.route('/messages', methods=['POST', 'GET'])
  8400	@noindex
  8401	@axss
  8402	@adate
  8403	@af
  8404	def msgs():
  8405	    if not flask.session.has_key("nick"):
  8406		return flask.redirect(flask.url_for('choice_mode')) 
  8407	    
  8408	
  8409	    if flask.session.has_key('special') and flask.session:
  8410		if not vertify_session(flask.session['special']):
  8411		    return flask.redirect(flask.url_for('choice_mode'))
  8412		pass
  8413	    else:
  8414		return flask.redirect(flask.url_for('choice_mode')) 
  8415	
  8416	
  8417	    db = connectvens()
  8418	    error = False
  8419	    ee = db.cursor()
  8420	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8421	
  8422	    cloaks = cloak().hascloak(nick)
  8423	
  8424	    ee.execute('select role from vens where nick=%s', (nick,))
  8425	
  8426	    role = ee.fetchone()
  8427	
  8428	    role = role[0]    
  8429	
  8430	 
  8431	
  8432	    if flask.request.method == 'POST':
  8433	
  8434		
  8435	
  8436	
  8437		if flask.session.has_key('special') and flask.session:
  8438		    if not vertify_session(flask.session['special']):
  8439			return flask.redirect(flask.url_for('choice_mode'))
  8440		    pass
  8441		else:
  8442		    return flask.redirect(flask.url_for('choice_mode')) 	
  8443	
  8444		
  8445		db = connectvens()
  8446		error = 'Messages Deleted'
  8447	
  8448		ee = db.cursor()
  8449	
  8450		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8451	
  8452		nick = str(nick)
  8453		
  8454		ee.execute('select role from vens where nick=%s', (nick,))
  8455	
  8456		role = ee.fetchone()
  8457	
  8458		role = role[0]	
  8459	
  8460		msg = flask.request.form.get('message')
  8461	
  8462	#	if msg:
  8463	        db2 = connectinbox()
  8464		xx = db2.cursor()
  8465	
  8466		xx.execute('delete from inbox where token=%s and send=%s', (msg, nick))
  8467	
  8468		db2.commit()
  8469	
  8470		if flask.request.form.get('shred'):
  8471		    we = db2.cursor()
  8472		    we.execute('delete from inbox where send=%s', (nick,))
  8473		    error = 'inbox has been deleted'
  8474		    db2.commit()
  8475		db = connectvens()
  8476		sts = db.cursor()
  8477	
  8478		sts.execute('select pgp from vens where nick=%s', (nick,))
  8479	
  8480		enc = sts.fetchone()
  8481	
  8482		enc = enc[0]
  8483	
  8484	#	if len(enc) <= 2:
  8485	
  8486	#	    enc = False
  8487	
  8488	#	else:
  8489	
  8490	#	    pass    
  8491	
  8492	
  8493	
  8494		if not enc:
  8495	
  8496		    enc = False
  8497	
  8498		else:
  8499	
  8500		    if 4 <= len(enc):
  8501	
  8502			enc = 'yupp with key: ' + str(enc)
  8503	
  8504			pass
  8505	
  8506		    else:
  8507	
  8508			enc = 'nope'  	    
  8509	
  8510		    
  8511	
  8512		mess = getmsgs()
  8513	
  8514		db2 = connectinbox()
  8515	
  8516		cull = db2.cursor()
  8517	
  8518		encr = enc#'off'
  8519	
  8520	
  8521	
  8522		cull.execute('select msg, hread, sender, token, title from inbox where send=%s', (nick,))
  8523	
  8524		entries = [dict(message=row[0], read=row[1], sender=row[2], token=row[3], title=row[4]) for row in cull.fetchall()]
  8525	
  8526		entries2 = wl_entries_cache().give_me_entries()    
  8527	
  8528		db.close()
  8529	
  8530		db2.close()
  8531		return flask.render_template('inbox.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, encr=encr, mess=mess, entries2=entries2, entries=entries, error=error, emnick = decode_session(flask.session["special"])[0], cloak=cloaks) 
  8532	
  8533	    
  8534	
  8535	    #db = connect()
  8536	
  8537	    db2 = connectinbox()
  8538	    cull = db2.cursor()
  8539	
  8540	    luo = db.cursor()
  8541	
  8542	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8543	
  8544	    nick = str(nick)
  8545	
  8546	    mess = getmsgs()  
  8547	
  8548	    #pricetable = getpt() #change   !!!!!!!!!!!!!!!!!!!!!!!!!!!!
  8549	
  8550	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8551	
  8552	    cull.execute('select msg, hread, sender, token, title from inbox where send=%s', (nick,))
  8553	
  8554	    entries = [dict(message=row[0], read=row[1], sender=row[2], token=row[3], title=row[4]) for row in cull.fetchall()]
  8555	
  8556	    entries2 = wl_entries_cache().give_me_entries()    
  8557	
  8558	    sts = db.cursor()
  8559	
  8560	    sts.execute('select pgp from vens where nick=%s', (nick,))
  8561	
  8562	    enc = sts.fetchone()
  8563	
  8564	    enc = enc[0]
  8565	
  8566	
  8567	
  8568	    if not enc:
  8569	
  8570		enc = 'nope'
  8571	
  8572	    else:
  8573	
  8574		#enc = str(enc)
  8575	
  8576		if 4 <= len(enc):
  8577	
  8578		    enc = ' yupp with key:  ' + enc 
  8579	
  8580		    pass
  8581	
  8582		else:
  8583	
  8584		    enc = 'nope'
  8585	
  8586		    pass
  8587	
  8588		    
  8589	
  8590		#enc = int(enc)
  8591	
  8592	#	enc = enc[0]
  8593	
  8594		   
  8595	
  8596		
  8597	
  8598	
  8599	
  8600	    #b.get_latest_price('USD')
  8601	
  8602	    encr = enc#'off'	# if user has pgp key auto encrypt all messages with user x's key    
  8603	
  8604	    db.close()
  8605	
  8606	    db2.close()
  8607	    return flask.render_template('inbox.html', newsentries=wl_html_cache().get_news(), encr=encr, role=role, mess=mess, entries2=entries2, soo=searchingfor().latestbtcprice(), entries=entries, error=error, emnick = decode_session(flask.session["special"])[0], pricetable=searchingfor().getpt(), cloak=cloaks) #pricetable=pricetable,)
  8608	
  8609	#flask.escape(flask.session['nick'])
  8610	
  8611	
  8612	
  8613	
  8614	
  8615	@wl.route('/redir/url/<url>')
  8616	
  8617	@noindex
  8618	
  8619	@axss
  8620	
  8621	@adate
  8622	
  8623	@af
  8624	
  8625	def redir(url):
  8626	
  8627	
  8628	    if flask.session.has_key('special') and flask.session:
  8629		if not vertify_session(flask.session['special']):
  8630		    return flask.redirect(flask.url_for('choice_mode'))
  8631		pass
  8632	    else:
  8633		return flask.redirect(flask.url_for('choice_mode')) 
  8634	
  8635	    url = str(url)
  8636	
  8637	    return '''
  8638	
  8639	<html>
  8640	
  8641	<head><title>Redirection</title></head>
  8642	
  8643	<center>
  8644	
  8645	
  8646	
  8647	<body>
  8648	
  8649	
  8650	
  8651	<h1>Page redirection<h1><br>
  8652	
  8653	<br><br><br><br>
  8654	
  8655	<h3>you are goin to another site that is not Warezloader</h3>
  8656	
  8657	<br>
  8658	
  8659	
  8660	
  8661	The site you are goin to is:
  8662	
  8663	''' + str(url) + '''
  8664	
  8665	
  8666	
  8667	</body>
  8668	
  8669	
  8670	
  8671	
  8672	
  8673	</center>
  8674	
  8675	
  8676	
  8677	</html>    
  8678	
  8679	    
  8680	
  8681	    '''
  8682	
  8683	
  8684	
  8685	#short cut to write msg to vendor
  8686	
  8687	@wl.route('/msg/<vendor>', methods=['POST', 'GET'])#msg/thLEuBCDaG5Ch0pGLuL6xK
  8688	
  8689	@noindex
  8690	
  8691	@axss
  8692	
  8693	@adate
  8694	
  8695	@af
  8696	
  8697	def msgvendor(vendor):
  8698	
  8699	    if not flask.session.has_key("nick"):
  8700	
  8701		return flask.redirect(flask.url_for('choice_mode'))  
  8702	
  8703	
  8704	    if flask.session.has_key('special') and flask.session:
  8705		if not vertify_session(flask.session['special']):
  8706		    return flask.redirect(flask.url_for('choice_mode'))
  8707		pass
  8708	    else:
  8709		return flask.redirect(flask.url_for('choice_mode')) 
  8710	
  8711	    db = connectvens()
  8712	
  8713	    sfg = db.cursor()
  8714	
  8715	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8716	
  8717	    svend = str(vendor)
  8718	
  8719	    sfg.execute('select email from vens where nick=%s', (vendor,))
  8720	
  8721	    ist = sfg.fetchone()
  8722	
  8723	    ee = db.cursor()
  8724	
  8725	    ee.execute('select role from vens where nick=%s', (nick,))
  8726	
  8727	    role = ee.fetchone()
  8728	
  8729	    role = role[0]    
  8730	
  8731	    entries = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]
  8732	
  8733	    
  8734	
  8735	    if not ist:
  8736	
  8737		error = 'Cant find vendor'
  8738	
  8739		return flask.render_template('writemsgv.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, entries2=entries, error=error, mess=getmsgs())
  8740	
  8741	    else:
  8742	
  8743		pass
  8744	
  8745	    if flask.request.method == 'POST':
  8746	
  8747	
  8748		if flask.session.has_key('special') and flask.session:
  8749		    if not vertify_session(flask.session['special']):
  8750			return flask.redirect(flask.url_for('choice_mode'))
  8751		    pass
  8752		else:
  8753		    return flask.redirect(flask.url_for('choice_mode')) 
  8754		
  8755		db = connectvens()
  8756	
  8757		entries = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]
  8758	
  8759		pricetable = searchingfor().getpt()
  8760	
  8761		mess = getmsgs()
  8762	
  8763		error = False
  8764	
  8765		nick = decode_session(flask.session["special"])[0]
  8766	
  8767		num = random.randint(128,600)
  8768	
  8769		title = flask.request.form['title']
  8770	
  8771		title = str(title)
  8772	
  8773		msg = flask.request.form['Message'] #replace http with something
  8774	
  8775		msg = str(msg)	
  8776	
  8777		reciever = vendor
  8778	
  8779		msg = msg.replace("http://", "/redir/url/http://")
  8780	
  8781		msg = msg.replace('https://', "/redir/url/https://")	
  8782	
  8783		code = gimmetoken()
  8784	
  8785		cull = db.cursor()
  8786	
  8787		nick = svend
  8788	
  8789		nick = str(nick)
  8790	
  8791		sss = db.cursor()
  8792	
  8793		sss.execute('select pgp from vens where nick=%s', (nick,))
  8794	
  8795		finger = sss.fetchone()
  8796	
  8797		if not finger:
  8798	
  8799		    error = 'Message Sent!'
  8800	
  8801		    pass
  8802	
  8803		else:
  8804	
  8805		    signatu = gpg.encrypt(msg, finger[0], always_trust=True) 
  8806	
  8807		    msg = signatu
  8808		db3 = connectinbox()
  8809	
  8810		ss = db3.cursor()
  8811	
  8812		ss.execute('insert into inbox (sender, send, msg, hread, token, title) values(%s, %s, %s, %s, %s, %s)', (nick, reciever, msg, 'no', code, title))
  8813	
  8814		db3.commit()
  8815		db3.close()
  8816		db.commit()
  8817	
  8818		db.close()
  8819	
  8820		db = connectvens()
  8821	
  8822		error = 'Message sent to ' + svend
  8823	
  8824		ee = db.cursor()
  8825	
  8826		ee.execute('select role from vens where nick=%s', (nick,))
  8827	
  8828		role = ee.fetchone()
  8829	
  8830		role = role[0]	
  8831	
  8832		return flask.render_template('writemsgv.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, entries2=entries, mess=getmsgs(), error=error)
  8833	
  8834	
  8835	    db.close()
  8836	  #  db3.close()
  8837	
  8838	    return flask.render_template('writemsgv.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, entries2=entries, mess=getmsgs(), to=svend)
  8839	
  8840	
  8841	
  8842	
  8843	
  8844	def gimmetoken():
  8845	
  8846	    code = str(base64.b64encode(urandom(85))).replace('/', '').replace('=', '') #token
  8847	
  8848	    return code
  8849	
  8850	    
  8851	
  8852	#mysql> select aes_decrypt(nicko ,'me') from v2;
  8853	#+--------------------------+
  8854	#| aes_decrypt(nicko ,'me') |
  8855	#+--------------------------+
  8856	#| blah                     |
  8857	#+--------------------------+
  8858	#1 row in set (0.00 sec)
  8859	
  8860	#mysql> insert into v2(nicko) value(AES_ENCRYPT('blah', 'me'))
  8861	    #-> ;
  8862	#Query OK, 1 row affected, 3 warnings (0.00 sec)
  8863	
  8864	#mysql> select * from v2;
  8865	#+-------------------------+-----+----+---------+
  8866	#| nicko                   | pbk | pk | btcaddr |
  8867	#+-------------------------+-----+----+---------+
  8868	#| ²y




.¥QÜL ›k¡        |     |    |         |
  8869	#+-------------------------+-----+----+---------+
  8870	#1 row in set (0.00 sec)
  8871	
  8872	
  8873	def pgpcrypt(nick, msg):
  8874	    db = connectvens()
  8875	    sss = db.cursor()
  8876	    sss.execute('select pgp from vens where nick=%s', (nick,))
  8877	    finger = sss.fetchone()
  8878	    if not finger:
  8879		return False
  8880	    else:#force sign
  8881		signatu = gpg.encrypt(msg, finger[0], always_trust=True) #sign aswell
  8882		msg = signatu
  8883		return str(msg)
  8884	    
  8885	
  8886	#new fance ui message
  8887	@wl.route('/messages_new/write', methods=['POST', 'GET'])
  8888	@noindex
  8889	@axss
  8890	@adate
  8891	@af
  8892	def writenewmsg():
  8893	    if not flask.session.has_key("nick"):
  8894		return flask.redirect(flask.url_for('choice_mode'))
  8895	
  8896	    if flask.session.has_key('special') and flask.session:
  8897		if not vertify_session(flask.session['special']):
  8898		    return flask.redirect(flask.url_for('choice_mode'))
  8899		pass
  8900	    else:
  8901		return flask.redirect(flask.url_for('choice_mode')) 
  8902	    anarcho = False
  8903	    db = connectvens()
  8904	
  8905	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8906	
  8907	
  8908	    mess = getmsgs()    
  8909	
  8910	    ee = db.cursor()
  8911	
  8912	    ee.execute('select role from vens where nick=%s', (nick,))
  8913	
  8914	    role = ee.fetchone()
  8915	
  8916	    role = role[0]    
  8917	
  8918	    error = False
  8919	
  8920	
  8921	
  8922	    if flask.request.method == 'POST':
  8923		if flask.session.has_key('special') and flask.session:
  8924		    if not vertify_session(flask.session['special']):
  8925			return flask.redirect(flask.url_for('choice_mode'))
  8926		    pass
  8927		else:
  8928		    return flask.redirect(flask.url_for('choice_mode')) 
  8929		
  8930		db = connectvens()
  8931	
  8932		num = random.randint(128,600)
  8933	
  8934		reciever = flask.request.form['to']
  8935	
  8936		reciever = str(reciever)
  8937	
  8938		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  8939	
  8940		title = flask.request.form['title']
  8941	
  8942		title = str(title)
  8943	
  8944		ee = db.cursor()
  8945	
  8946		ee.execute('select role from vens where nick=%s', (nick,))
  8947	
  8948		role = ee.fetchone()
  8949	
  8950		role = role[0]	
  8951	
  8952		msg = flask.request.form['Message'] 
  8953	        #replace http with something
  8954	
  8955		msg = str(msg)
  8956	
  8957		#take care of linking to other stuff
  8958	
  8959		msg = msg.replace("http://", "/redir/url/http://")
  8960		msg = msg.replace('https://', "/redir/url/https://")
  8961		code = str(base64.b64encode(urandom(num))) #token
  8962		code = code.replace('/', 'g')
  8963		code = code.replace('==', 'zZ')
  8964		cull = db.cursor()
  8965		nick = decode_session(flask.session["special"])[0] 
  8966	        
  8967	
  8968	
  8969		stc = db.cursor()
  8970	
  8971		if 'legion of warezloader' in reciever.lower():
  8972	
  8973		    sendtosupport(reciever, nick, msg, code, title)
  8974	
  8975		    anarcho = 's'
  8976	
  8977		else:
  8978	
  8979		    pass
  8980	
  8981		
  8982	
  8983		if 'Legion of Warezloaders' in reciever:
  8984	
  8985		    sendtosupport(reciever, nick, msg, code, title)
  8986	
  8987		    anarcho = 's'
  8988	
  8989		else:
  8990	
  8991		    pass
  8992	
  8993		
  8994	
  8995		if 'censorednick' in reciever:
  8996	
  8997		    sendtosupport(reciever, nick, msg, code, title)
  8998	
  8999		    anarcho = 's'
  9000	
  9001		else:
  9002	
  9003		    pass
  9004	
  9005		if 'censorednick' in reciever:
  9006	
  9007		    sendtosupport(reciever, nick, msg, code, title)
  9008	
  9009		    anarcho = 's'
  9010	
  9011		else:
  9012	
  9013		    pass
  9014	
  9015		if 'censorednick' in reciever:
  9016	
  9017		    sendtosupport(reciever, nick, msg, code, title)
  9018	
  9019		    anarcho = 's'
  9020	
  9021		else:
  9022	
  9023		    pass
  9024	
  9025		stc.execute('select nick from vens where nick=%s', (reciever,))	
  9026	
  9027	
  9028		if anarcho:
  9029	            
  9030	
  9031		    return flask.render_template('new/newsend.html', mess=getmsgs(), error='msg has been send', nick=nick)
  9032		    
  9033	
  9034		
  9035		checkii = stc.fetchone()
  9036	
  9037		if not checkii:
  9038		    db.close()
  9039	
  9040	
  9041		    return flask.render_template('new/newsend.html', mess=getmsgs(), error='noone was found with that nick', nick=nick)
  9042	
  9043	
  9044		else:
  9045	
  9046		    pass
  9047	
  9048	
  9049	
  9050		sss = db.cursor()
  9051		sss.execute('select pgp from vens where nick=%s', (reciever,))
  9052		finger = sss.fetchone()
  9053		db2 = connectsupport()
  9054		if not finger:
  9055		    error = 'Message Sent!'
  9056		    pass
  9057	
  9058		else:
  9059		    error = 'Message Sent!'
  9060		    if len(finger[0]) > 3:
  9061			signatu = gpg.encrypt(msg, finger[0], always_trust=True) #sign aswell
  9062			msg = signatu
  9063			error = 'Message Sent Encrypted!'
  9064	
  9065	
  9066	
  9067		if reciever == "Legion of Warezloaders":
  9068	
  9069		    sa = db2.cursor()
  9070	
  9071		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    
  9072	
  9073		    error = 'We have got your message'
  9074		    db2.commit()
  9075	
  9076		else:
  9077	
  9078		    pass
  9079	
  9080	
  9081	
  9082		if reciever == "Legion of Warezloader":
  9083	
  9084		    sa = db2.cursor()
  9085	
  9086		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    				    	    
  9087	
  9088		    error = 'We have got your message'
  9089		    db2.commit()
  9090	
  9091		else:
  9092	
  9093		    pass
  9094	
  9095		if reciever == "Support":
  9096	
  9097		    sa = db2.cursor()
  9098	
  9099		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    
  9100	
  9101		    error = 'We have got your message'
  9102		    db2.commit()
  9103	
  9104		else:
  9105	
  9106		    pass
  9107	
  9108		
  9109	
  9110		if reciever == "support":
  9111		    sa = db2.cursor()
  9112		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    
  9113	
  9114		    error = 'We have got your message'
  9115		    db2.commit()
  9116	
  9117		else:
  9118	
  9119		    pass
  9120	
  9121		db3 = connectinbox()
  9122		ss = db3.cursor()
  9123	        
  9124		ss.execute('insert into inbox (sender, send, msg, hread, token, title) values(%s, %s, %s, %s, %s, %s)', (nick, reciever, msg, 'no', code, title))
  9125	
  9126		db3.commit()
  9127	
  9128		db2.commit()
  9129		db2.close()
  9130		db.close()
  9131		db3.close()
  9132	
  9133		return flask.render_template('new/newsend.html', nick=nick, mess=mess,error=error)
  9134	
  9135	    
  9136	    
  9137	    db.close()
  9138	
  9139	    #db2.close()
  9140	    #db3.close()
  9141	    return flask.render_template('new/newsend.html', mess=mess, error=error, nick=nick)
  9142	
  9143	
  9144	
  9145	
  9146	#blocket gone crypto
  9147	def addpickledb(nick, itemid):
  9148	    db = connectcoinz()
  9149	    ilp = db.cursor()
  9150	    ilp.execute('select address from coinz where usr=%s and note=%s and paid=%s limit 1', (nick,'Artemis', 'yes'))
  9151	    jacob = ilp.fetchone()
  9152	    db.close()
  9153	    if len(jacob) >= 1:
  9154	        db = connectcoinz()
  9155	        ilp = db.cursor()
  9156	        ilp.execute('update coinz set paid=%s where usr=%s and note=%s and paid=%s and address=%s limit 1', ('used', nick,'Artemis', 'yes', jacob[0]))
  9157	        db.commit()
  9158	        db.close()
  9159	    else:
  9160	        return True
  9161	
  9162	    db = pickledb.load('restless.db', True, sig=False)
  9163	    try:
  9164	        db.ladd(nick, itemid)
  9165	    except KeyError:
  9166	        db.set(nick, [])
  9167	        db.ladd(nick, itemid)
  9168	        db.dump()
  9169	    return True
  9170	
  9171	
  9172	@wl.route('/Artemis/order/<myorder>', methods=['POST', 'GET'])
  9173	@noindex
  9174	@axss
  9175	@adate
  9176	@af
  9177	def amanageorder(myorder):
  9178	    if flask.session.has_key('special'):
  9179	        if not vertify_session(flask.session['special']):
  9180	            return flask.redirect(flask.url_for('choice_mode'))
  9181	        pass
  9182	    else:
  9183	        return flask.redirect(flask.url_for('choice_mode')) 
  9184	    error = False
  9185	
  9186	    nick = str(flask.escape(flask.session['nick']))  
  9187	    if flask.request.method == 'POST':
  9188	        if flask.session.has_key('special') and flask.session:
  9189	            if not vertify_session(flask.session['special']):
  9190	                return flask.redirect(flask.url_for('choice_mode'))
  9191	            pass
  9192	        else:
  9193	                return flask.redirect(flask.url_for('choice_mode'))     
  9194	
  9195	
  9196	        sbm = flask.request.form['sbm']
  9197	        sd = flask.request.form['Shippingdetails']
  9198	        shipped = flask.request.form.get('shipped')
  9199	        finished = flask.request.form.get('finished')
  9200	        db = connectorders()
  9201	        myorder = str(myorder)
  9202	        if finished:
  9203	            if finished == "yes":
  9204	                de = db.cursor()
  9205	                de.execute('update orders set status=%s where order_name=%s and vendor=%s', ('finished', myorder, nick))
  9206	
  9207	                db.commit()
  9208	
  9209	                error = 'order is finished! '
  9210	
  9211	                pass
  9212	
  9213	            else:
  9214	
  9215	                de = db.cursor()
  9216	
  9217	                de.execute('update orders set status=%s where order_name=%s and vendor=%s', ('not finished', myorder, nick))
  9218	                db.commit()
  9219	                error = 'not finished, '
  9220	                pass            
  9221	
  9222	        else:
  9223	            de = db.cursor()
  9224	            de.execute('update orders set status=%s where order_name=%s and vendor=%s', ('not finished', myorder, nick))
  9225	
  9226	            db.commit()
  9227	            error = 'not finished, '
  9228	            pass
  9229	        if shipped:
  9230	            if shipped == 'yes':
  9231	                de = db.cursor()
  9232	                de.execute('update orders set order_shipped=%s where order_name=%s and vendor=%s', ('yes', myorder, nick))
  9233	                db.commit()
  9234	                
  9235	
  9236	                error = error  + ' order is shipped! '      
  9237	                pass
  9238	            else:
  9239	                de = db.cursor()
  9240	                de.execute('update orders set order_shipped=%s where order_name=%s and vendor=%s', ('no', myorder, nick))
  9241	                db.commit()
  9242	                error = error  + ' order is  not shipped, '
  9243	                pass
  9244	
  9245	                
  9246	
  9247	                
  9248	
  9249	        else:
  9250	            de = db.cursor()
  9251	            de.execute('update orders set order_shipped=%s where order_name=%s and vendor=%s', ('no', myorder, nick))
  9252	            db.commit()
  9253	
  9254	            
  9255	
  9256	            error = error  + ' order is  not shipped, '     
  9257	            pass
  9258	
  9259	        if sbm:
  9260	            re = db.cursor()
  9261	            re.execute('select order_buyer from orders where vendor=%s and order_name=%s', (nick, myorder))
  9262	            to = str(re.fetchone()[0])
  9263	            title = 'Message regarding purchase from: ' + nick 
  9264	            t = senduser2(to , nick, sbm, title)
  9265	            error = error + ' message has been sent to ' + to
  9266	
  9267	        else:
  9268	            pass
  9269	
  9270	        if sd:
  9271	            tre = db.cursor()
  9272	            tre.execute('update orders set shippingdetails=%s where order_name=%s and vendor=%s', (sd, myorder, nick))
  9273	            re = db.cursor()
  9274	            db.commit()
  9275	            re.execute('select order_buyer from orders where vendor=%s and order_name=%s', (nick, myorder))
  9276	            to = str(re.fetchone()[0])
  9277	            title = 'Shipping details regarding purchase from: ' + nick 
  9278	            linkorder = 'link: /order/' + myorder
  9279	            t = senduser2(to , nick, linkorder, title)      
  9280	            error = error + ' shipping details sent!'
  9281	        else:
  9282	            pass
  9283	
  9284	
  9285	        gt = db.cursor()
  9286	        gt.execute('select order_amount, item_id, order_buyer, order_payed, title, status, btcprice, order_shipped, cointype from orders where vendor=%s and order_name=%s', (nick, myorder))
  9287	        entries2 = wl_entries_cache().give_me_entries()
  9288	        entries = [dict(amount=row[0], item_id=row[1], order_buyer=row[2], order_payed=row[3], title=row[4], status=row[5], btcprice=row[6], order_shipped=row[7], cointype=quick_validate_cointype(row[8])) for row in gt.fetchall()]
  9289	
  9290	        db.close()
  9291	
  9292	        return flask.render_template('artemisorder.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), entries=entries, error=error, entries2=entries2)
  9293	
  9294	    
  9295	    db = connectorders()
  9296	    gt = db.cursor()
  9297	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])  
  9298	    gt.execute('select item_id from orders where vendor=%s and order_name=%s', (nick, myorder))
  9299	    gs = db.cursor()
  9300	    gs.execute('select btcprice from orders where vendor=%s and order_name=%s', (nick, myorder))
  9301	    price = gs.fetchone()[0]
  9302	    price = float(price)
  9303	
  9304	    gt.execute('select order_amount, item_id, order_buyer, order_payed, title, status, btcprice, order_shipped, shippingdetails, cointype from orders where vendor=%s and order_name=%s', (nick, myorder))
  9305	    entries = [dict(amount=row[0], item_id=row[1], order_buyer=row[2], order_payed=row[3], title=row[4], status=row[5], btcprice=row[6], order_shipped=row[7], sd=row[8], cointype=quick_validate_cointype(row[9])) for row in gt.fetchall()]
  9306	
  9307	    entries2 = wl_entries_cache().give_me_entries()
  9308	
  9309	    db.close()
  9310	
  9311	    return flask.render_template('artemisorder.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), emnick=nick, price=price, mess=getmsgs(), entries=entries, entries2=entries2)
  9312	
  9313	
  9314	@wl.route('/Artemis/add', methods=['GET', 'POST'])
  9315	@noindex
  9316	@axss
  9317	@adate
  9318	@af
  9319	def artemis_add():
  9320	
  9321	    if flask.session.has_key('special'):
  9322	        if not vertify_session(flask.session['special']):
  9323	            return flask.redirect(flask.url_for('choice_mode'))
  9324	        pass
  9325	    else:
  9326	        return flask.redirect(flask.url_for('choice_mode')) 
  9327	
  9328	    error = False
  9329	    
  9330	    nick = decode_session(flask.session["special"])[0]
  9331	    dd = 0
  9332	    db = connectcoinz()
  9333	    ilp = db.cursor()
  9334	    ilp.execute('select count(address) from coinz where usr=%s and note=%s and paid=%s', (nick,'Artemis', 'yes'))
  9335	    jacob = ilp.fetchone()
  9336	    db.close()
  9337	    for x in jacob:
  9338	        dd = x
  9339	    if flask.request.method == 'POST':
  9340	
  9341	        if dd == 0:
  9342	            error = 'You dont have any Artemis coins, buy more at /Artemis/buy'
  9343	            return flask.render_template('artemis_add.html',  entries2=wl_entries_cache().give_me_entries(), error=error)
  9344	
  9345	        db = connectitems()
  9346	        title = flask.request.form['title']
  9347	        Price = flask.request.form['Price']
  9348	        des = flask.request.form.get('description')
  9349	        sp = flask.request.form['shippingprice']
  9350	        cat1 =flask.request.form['Category1']
  9351	        cat3 = flask.request.form['Category3']
  9352	        cat2 = flask.request.form['Category2']
  9353	        digital = flask.request.form['digital']
  9354	        amount = flask.request.form['amount']
  9355	        autoresponse = flask.request.form['Autoresponse']
  9356	        btcaddr = flask.request.form.get('btcaddr')
  9357	        file = flask.request.files['file']
  9358	        shipto = flask.request.form['Shippingto']
  9359	        if digital:
  9360	            pass
  9361	        else:
  9362	            digital = 'no'
  9363	           
  9364	            
  9365	        if file and allowed_file(file.filename):
  9366	             filename = secure_filename(file.filename)
  9367	             extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
  9368	             filename = extra + filename
  9369	             file.save(wl.config['items_FOLDER'] + '/' + filename)
  9370	             ema = wl.config['items_FOLDER'] + '/' + filename
  9371	             cleans(ema)
  9372	        else:
  9373	             filename = 'default.png'
  9374	         
  9375	        entries2 = wl_entries_cache().give_me_entries()
  9376	         
  9377	        if not sp:
  9378	            sp = 'free'
  9379	        if not btcaddr:
  9380	            btcaddr = 'nope'
  9381	        if btcaddr and btcaddr !='nope':
  9382	            if not validateaddress(btcaddr):
  9383	                error = 'invalid bitcoin address'
  9384	                return flask.render_template('artemis_add.html',  error=error, entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
  9385	            else:
  9386	                 btcheck = True# not needed
  9387	                 pass
  9388	 
  9389	        lir = db.cursor()
  9390	        cate = cat1 + '' + cat2 + '' + cat3
  9391	        today = datetime.date.today()
  9392	        lir.execute('insert into items(item_name, item_des, item_price, item_vendor, item_shippin_to, item_shippin_price, item_digi, item_category, item_time, item_piclink, amount_in_stock, number_sold, item_btcaddr, autoresponse) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',  ( title, des, Price, nick, shipto, sp, digital, cate, today, filename, amount, 0, btcaddr, db.escape_string(autoresponse)))  
  9393	        db.commit()
  9394	         
  9395	        hee = db.cursor()
  9396	        hee.execute('select item_id from items where item_name=%s and item_vendor=%s', (title, nick))
  9397	        dd = hee.fetchone()
  9398	        dee = dd[0]
  9399	        error = '/itemz/' + str(dee)
  9400	        addpickledb(nick, str(dee))
  9401	        db.close()
  9402	        return flask.render_template('artemis_add.html',  error=error, mess=getmsgs() , entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
  9403	
  9404	
  9405	    return flask.render_template('artemis_add.html', entries2=wl_entries_cache().give_me_entries(), error=error, mess=getmsgs() )
  9406	
  9407	
  9408	@wl.route('/Artemis/buy', methods=['POST', 'GET'])
  9409	@noindex
  9410	@axss
  9411	@adate
  9412	@af
  9413	def artemis_buy():
  9414	
  9415	    if flask.session.has_key('special'):
  9416	        if not vertify_session(flask.session['special']):
  9417	            return flask.redirect(flask.url_for('choice_mode'))
  9418	        pass
  9419	    else:
  9420	        return flask.redirect(flask.url_for('choice_mode')) 
  9421	    nick = decode_session(flask.session["special"])[0]
  9422	    db = connectcoinz() 
  9423	    payed = False
  9424	    recklesss = db.cursor()
  9425	    recklesss.execute('select address, pk, pbk from coinz where usr=%s and note=%s and paid=%s', (nick,'Artemis', 'nope'))
  9426	    sleeep = recklesss.fetchall()
  9427	    fiatprice = float(13)
  9428	    btcprice = searchingfor().convertusd2btc(fiatprice)
  9429	    if not sleeep:
  9430	        address = pycoind.Address.generate(compressed = True)
  9431	        pk = address.private_key
  9432	        btcaddr = address.address
  9433	        pbk = address.public_key.encode('hex') 
  9434	        ghy = db.cursor()
  9435	        ghy.execute('insert into coinz(address, usr, paid, pk, note, pbk, balance) value(%s, %s, %s, %s, %s, %s, %s)', (btcaddr, nick, 'nope', pk, 'Artemis', pbk, '0'))
  9436	        db.commit()
  9437	        address = btcaddr
  9438	    else:
  9439	        address, pk, pbk = sleeep[0][0], sleeep[0][1], sleeep[0][2]
  9440	
  9441	    balance_address = check_b3(address)
  9442	
  9443	    if flask.request.method == 'POST':
  9444	        balance = Decimal(btcprice)
  9445	        ba = Decimal(0.00001)
  9446	        if balance_address < Decimal(balance) - ba:
  9447	            payed = True
  9448	            ship2mothergoose(address, pk, pbk, balance, nick, "Artemis")
  9449	            newt = db.cursor()
  9450	            newt.execute('update coinz set paid="yes" where usr=%s and note=%s and paid=%s and balance=%s', (nick,'Artemis', 'nope', '0'))
  9451	            db.commit()
  9452	    db.close()
  9453	    return flask.render_template('artemis_buy.html', usdprice=fiatprice, btcprice=btcprice, payed=payed, address=address,mess=getmsgs(), entries2=wl_entries_cache().give_me_entries(), balance=balance_address)
  9454	
  9455	
  9456	
  9457	@wl.route('/Artemis/edit/<artid>', methods=['POST', 'GET'])
  9458	@noindex
  9459	@axss
  9460	@adate
  9461	@af
  9462	def artemis_edit(artid):
  9463	
  9464	    if flask.session.has_key('special'):
  9465	        if not vertify_session(flask.session['special']):
  9466	            return flask.redirect(flask.url_for('choice_mode'))
  9467	        pass
  9468	    else:
  9469	        return flask.redirect(flask.url_for('choice_mode')) 
  9470	    nick = decode_session(flask.session["special"])[0]
  9471	    error = False
  9472	    ree = json.load(open('restless.db', 'rt'))
  9473	    ree = ree.get(nick)
  9474	    if not ree:
  9475	        return flask.render_template('artemis_eitem.html', error='item not found')
  9476	    if not ree.__contains__(artid):
  9477	        return flask.render_template('artemis_eitem.html', error='item not found')
  9478	
  9479	
  9480	    db = connectitems()
  9481	    
  9482	    lulls,sully = db.cursor(),db.cursor()
  9483	    sully.execute('select item_id from items where item_id=%s and item_vendor=%s', (artid, nick))
  9484	    sf = sully.fetchone()
  9485	    if not sf:
  9486	        db.close()
  9487	        return flask.render_template('artemis_eitem.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), error='item not found')
  9488	        
  9489	    lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, number_sold from items where item_vendor=%s and item_id=%s', (nick, artid))
  9490	    entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], sold=row[9]) for row in lulls.fetchall()]
  9491	    db.close()
  9492	   
  9493	    entries2=wl_entries_cache().give_me_entries()
  9494	
  9495	    if flask.request.method == 'POST':
  9496	        db = connectitems()
  9497	        myitem = artid
  9498	        uc = db.cursor()
  9499	        uc.execute('select item_name from items where item_id=%s and item_vendor=%s', (myitem,nick))
  9500	        if not uc.fetchone():
  9501	            db.close()
  9502	            return flask.render_template('artemis_eitem.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), error='item not found')
  9503	                
  9504	        de = flask.request.form.get('delete')
  9505	        shipto = flask.request.form.get('Shippingto')   
  9506	        sprice = flask.request.form['sprice']   
  9507	        price = flask.request.form['price']
  9508	        digital = flask.request.form['digital']
  9509	        name = flask.request.form['item name']  
  9510	        des = flask.request.form['des']
  9511	        btc = flask.request.form['btcaddr']
  9512	        file = flask.request.files['file']
  9513	        error = 'item updated'
  9514	        sd, ds,cc,pc,ps,dc,cd,nd,dd,bd = db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor()
  9515	        cat = flask.request.form.get('Category')
  9516	        if de == 'Yes':#if we delete it then there is no need for extra checks
  9517	            sd.execute('delete from items where item_id=%s and item_vendor=%s', (myitem, nick))
  9518	            db.commit()
  9519	            error = 'item deleted'
  9520	        else:
  9521	            if file and allowed_file(file.filename):
  9522	                filename = secure_filename(file.filename)
  9523	                extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
  9524	                filename = extra + filename
  9525	                file.save(wl.config['items_FOLDER'] + '/' + filename)
  9526	                ema = wl.config['items_FOLDER'] + '/' + filename
  9527	                cleans(ema)#newupdate, items.html,d 
  9528	                ds.execute('update items set item_piclink=%s where item_id=%s', (filename,myitem))
  9529	                db.commit()
  9530	                error += ',item picture updated'
  9531	            else:
  9532	                pass
  9533	            
  9534	            if btc:
  9535	                bd.execute('update items set item_btcaddr=%s where item_id=%s and item_vendor=%s', (btc, myitem, nick))
  9536	                db.commit()
  9537	                error += ',bitcoin address set'
  9538	
  9539	            if cat == 'none':
  9540	                pass
  9541	            else:
  9542	                if cat:
  9543	                    cc.execute('update items set item_category=%s where item_id=%s', (cat,myitem))
  9544	                    db.commit()
  9545	                    error += ',category has been updated'
  9546	     
  9547	            if des:    
  9548	                dd.execute('update items set item_des=%s where item_id=%s', (des,myitem))
  9549	                db.commit()
  9550	                error += ',description has been updated'            
  9551	     
  9552	     
  9553	            if name:    
  9554	                nd.execute('update items set item_name=%s where item_id=%s', (name,myitem))
  9555	                db.commit()
  9556	                error += ',name has been updated'           
  9557	     
  9558	            if shipto:    
  9559	                pc.execute('update items set item_shippin_to=%s where item_id=%s', (shipto,myitem))
  9560	                db.commit()
  9561	                error += ',shipping destination has been updated'           
  9562	             
  9563	            if price:    
  9564	                pc.execute('update items set item_price=%s where item_id=%s', (price,myitem))
  9565	                db.commit()
  9566	                error += ',price has been updated'      
  9567	     
  9568	            if sprice:    
  9569	                ps.execute('update items set item_shippin_price=%s where item_id=%s', (sprice,myitem))
  9570	                db.commit()
  9571	                error += ',shipping price has been updated'         
  9572	             
  9573	            if digital:    
  9574	                dc.execute('update items set item_digi=%s where item_id=%s', (digital,myitem))
  9575	                db.commit()
  9576	                error += ',digital link has been updated'                                   
  9577	            
  9578	
  9579	        db.close()
  9580	        return flask.render_template('artemis_eitem.html', error=error, soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), entries=entries, emnick=nick, entries2=entries2, mess=getmsgs() )
  9581	 
  9582	    return flask.render_template('artemis_eitem.html', entries2=wl_entries_cache().give_me_entries(), entries=entries, mess=getmsgs()  )
  9583	
  9584	#You have the power
  9585	@wl.route('/Artemis')
  9586	@noindex
  9587	@axss
  9588	@adate
  9589	@af
  9590	def artemis():
  9591	
  9592	
  9593	    if flask.session.has_key('special'):
  9594	        if not vertify_session(flask.session['special']):
  9595	            return flask.redirect(flask.url_for('choice_mode'))
  9596	        pass
  9597	    else:
  9598	        return flask.redirect(flask.url_for('choice_mode')) 
  9599	    nick = decode_session(flask.session["special"])[0]
  9600	    num = 0
  9601	    db = connectcoinz()
  9602	    ilp = db.cursor()
  9603	    ilp.execute('select count(address) from coinz where usr=%s and note=%s and paid=%s', (nick,'Artemis', 'yes'))
  9604	    wei = ilp.fetchone()
  9605	    db.close()
  9606	    for x in wei:
  9607	        num = x
  9608	    return flask.render_template('artemis.html', entries2=wl_entries_cache().give_me_entries(), emnick=nick, num=num, mess=getmsgs() )
  9609	
  9610	@wl.route('/Artemis/orders')
  9611	@noindex
  9612	@axss
  9613	@adate
  9614	@af
  9615	def artemis_orders():
  9616	    if flask.session.has_key('special'):
  9617	        if not vertify_session(flask.session['special']):
  9618	            return flask.redirect(flask.url_for('choice_mode'))
  9619	        pass
  9620	    else:
  9621	        return flask.redirect(flask.url_for('choice_mode')) 
  9622	    sortby = 'buyer'
  9623	    db = connectorders()
  9624	    entries2 = wl_entries_cache().give_me_entries()
  9625	    nick = decode_session(flask.session["special"])[0]
  9626	    error = False
  9627	    if sortby == 'buyer':
  9628	        op = db.cursor()
  9629	        op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(order_buyer) desc', (nick,))
  9630	        entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
  9631	
  9632	    elif sortby == 'status':
  9633	        op = db.cursor()
  9634	        op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(status) desc', (nick,))
  9635	        entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
  9636	    elif sortby == 'payed':
  9637	        op = db.cursor()
  9638	        op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(payed) desc', (nick,))
  9639	        entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
  9640	
  9641	    
  9642	
  9643	    elif sortby == 'amount':            
  9644	        op = db.cursor()
  9645	        op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(amount) desc', (nick,))
  9646	        entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
  9647	
  9648	    
  9649	
  9650	    elif sortby == 'name':
  9651	        op = db.cursor()
  9652	        op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(order_name) desc', (nick,))
  9653	        entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
  9654	
  9655	
  9656	    elif sortby == 'price':
  9657	        op = db.cursor()
  9658	        op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(btcprice) desc', (nick,))
  9659	        entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
  9660	
  9661	    else:
  9662	        error = 'Wrong sorting!'
  9663	        pass
  9664	    db.close()
  9665	    return flask.render_template('artemis_orders.html', entries2=entries2, entries=entries, error=error, mess=getmsgs() )
  9666	
  9667	
  9668	@wl.route('/Artemis/items')
  9669	@noindex
  9670	@axss
  9671	@adate
  9672	@af
  9673	def artemis_items():
  9674	    if flask.session.has_key('special'):
  9675	        if not vertify_session(flask.session['special']):
  9676	            return flask.redirect(flask.url_for('choice_mode'))
  9677	        pass
  9678	    else:
  9679	        return flask.redirect(flask.url_for('choice_mode')) 
  9680	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  9681	    entries = False
  9682	    ree = json.load(open('restless.db', 'rt'))
  9683	    ree = ree.get(nick)
  9684	    if not ree:
  9685	        return flask.render_template('artemis_items.html', error='You do not have any Artemis items',mess=getmsgs(), entries2=wl_entries_cache().give_me_entries())
  9686	
  9687	    db = connectitems()
  9688	    for cc, kimlarsen in enumerate(ree):
  9689	        ret = db.cursor()
  9690	
  9691	        ret.execute('select item_id, item_name, item_price, number_sold, amount_in_stock, item_piclink from items where item_vendor=%s and item_id=%s', (nick, kimlarsen))
  9692	        if cc == 0:
  9693	            entries = [dict(item_id=row[0], item_name=row[1], item_price=row[2], number_sold=row[3], amount=row[4], piclink=row[5]) for row in ret.fetchall()]
  9694	        else:
  9695	            entries += [dict(item_id=row[0], item_name=row[1], item_price=row[2], number_sold=row[3], amount=row[4], piclink=row[5]) for row in ret.fetchall()]
  9696	
  9697	    db.close()
  9698	    return flask.render_template('artemis_items.html', entries=entries, entries2=wl_entries_cache().give_me_entries(), mess=getmsgs() )
  9699	
  9700	
  9701	
  9702	#generate msg token
  9703	
  9704	#error = 'msg sent'
  9705	
  9706	#fuck anonymz.com, due to datalogginig and selling
  9707	
  9708	@wl.route('/messages/write', methods=['POST', 'GET'])
  9709	@noindex
  9710	@axss
  9711	@adate
  9712	@af
  9713	def writemsg():
  9714	    if not flask.session.has_key("nick"):
  9715		return flask.redirect(flask.url_for('choice_mode'))
  9716	
  9717	    if flask.session.has_key('special') and flask.session:
  9718		if not vertify_session(flask.session['special']):
  9719		    return flask.redirect(flask.url_for('choice_mode'))
  9720		pass
  9721	    else:
  9722		return flask.redirect(flask.url_for('choice_mode')) 
  9723	    anarcho = False
  9724	    db = connectvens()
  9725	
  9726	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  9727	
  9728	    cloaks = cloak().hascloak(nick)
  9729	    entries = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]
  9730	
  9731	    pricetable = searchingfor().getpt()
  9732	
  9733	    mess = getmsgs()    
  9734	
  9735	    ee = db.cursor()
  9736	
  9737	    ee.execute('select role from vens where nick=%s', (nick,))
  9738	
  9739	    role = ee.fetchone()
  9740	
  9741	    role = role[0]    
  9742	
  9743	    error = False
  9744	
  9745	
  9746	
  9747	    if flask.request.method == 'POST':
  9748	
  9749	
  9750		if flask.session.has_key('special') and flask.session:
  9751		    if not vertify_session(flask.session['special']):
  9752			return flask.redirect(flask.url_for('choice_mode'))
  9753		    pass
  9754		else:
  9755		    return flask.redirect(flask.url_for('choice_mode')) 
  9756		
  9757		db = connectvens()
  9758	
  9759		num = random.randint(128,600)
  9760	
  9761		reciever = flask.request.form['to']
  9762	
  9763		reciever = str(reciever)
  9764	
  9765		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  9766	
  9767		title = flask.request.form['title']
  9768	
  9769		title = str(title)
  9770	
  9771		ee = db.cursor()
  9772	
  9773		ee.execute('select role from vens where nick=%s', (nick,))
  9774	
  9775		role = ee.fetchone()
  9776	
  9777		role = role[0]	
  9778	
  9779		msg = flask.request.form['Message'] #replace http with something
  9780	
  9781		msg = str(msg)
  9782	
  9783		#take care of linking to other stuff
  9784	
  9785		msg = msg.replace("http://", "/redir/url/http://")
  9786	
  9787		msg = msg.replace('https://', "/redir/url/https://")
  9788	
  9789	#	msg = msg.replace('<', '')
  9790	
  9791	#	msg  = msg.replace('>', '')
  9792	
  9793		code = str(base64.b64encode(urandom(num))) #token
  9794	
  9795		code = code.replace('/', 'g')
  9796	
  9797		code = code.replace('==', 'zZ')
  9798	
  9799		cull = db.cursor()
  9800	
  9801		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
  9802	
  9803		#nick = str(nick)
  9804	
  9805		stc = db.cursor()
  9806	
  9807		fromm = nick
  9808		if cloaks:
  9809		    fromm = cloaks
  9810	
  9811	
  9812	
  9813		if 'legion of warezloader' in reciever.lower():
  9814		    sendtosupport(reciever, nick, msg, code, title)
  9815		    anarcho = 's'
  9816		else:
  9817		    pass
  9818	
  9819		
  9820	
  9821		if 'Legion of Warezloaders' in reciever:
  9822	
  9823		    sendtosupport(reciever, nick, msg, code, title)
  9824	
  9825		    anarcho = 's'
  9826	
  9827		else:
  9828	
  9829		    pass
  9830	
  9831		
  9832	
  9833		if 'censorednick' in reciever:
  9834	
  9835		    sendtosupport(reciever, nick, msg, code, title)
  9836	
  9837		    anarcho = 's'
  9838	
  9839		else:
  9840	
  9841		    pass
  9842	
  9843		if 'censorednick' in reciever:
  9844	
  9845		    sendtosupport(reciever, nick, msg, code, title)
  9846	
  9847		    anarcho = 's'
  9848	
  9849		else:
  9850	
  9851		    pass
  9852	
  9853		if 'censorednick' in reciever:
  9854	
  9855		    sendtosupport(reciever, nick, msg, code, title)
  9856	
  9857		    anarcho = 's'
  9858	
  9859		else:
  9860	
  9861		    pass
  9862	
  9863		stc.execute('select nick from vens where nick=%s', (reciever,))	
  9864	
  9865		entries	= wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]	    
  9866	
  9867		if anarcho:
  9868		    entries = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]	    
  9869		    return flask.render_template('writemsg.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, mess=getmsgs(), error='msg has been send', entries2=entries)
  9870		    
  9871	
  9872		
  9873		checkii = stc.fetchone()
  9874	
  9875		if not checkii:
  9876		    db.close()
  9877	
  9878		    entries = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]	    
  9879	
  9880		    return flask.render_template('writemsg.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, mess=getmsgs(), error='noone was found with that nick', entries2=entries)
  9881	
  9882		
  9883	
  9884		#elif reciever == "Legion of Warezloaders":
  9885	
  9886		    #sa = db.cursor()
  9887	
  9888		    #sa.execute('insert into support (fr0m, msg, readd, respond, awnserd, token, title) value(%s, %s, %s, %s, %s, %s, %s)', (reciever, msg, 'no', 'no', 'no', code, title))	    
  9889	
  9890		    #error = 'We have got your message';
  9891	
  9892		    #return flask.render_template('writemsg.html', mess=getmsgs(), error='noone was found with that nick', entries2=entries)
  9893	
  9894		
  9895	
  9896		#elif reciever == "Legion of Warezloader":
  9897	
  9898		    #sa = db.cursor()
  9899	
  9900		    #sa.execute('insert into support (fr0m, msg, readd, respond, awnserd, token, title) value(%s, %s, %s, %s, %s, %s, %s)', (reciever, msg, 'no', 'no', 'no', code, title))	    				    	    
  9901	
  9902		    #error = 'We have got your message'
  9903	
  9904		    #return flask.render_template('writemsg.html', mess=getmsgs(), error='noone was found with that nick', entries2=entries)
  9905	
  9906			
  9907	
  9908		#elif reciever == "Support":
  9909	
  9910		    #sa = db.cursor()
  9911	
  9912		    #sa.execute('insert into support (fr0m, msg, readd, respond, awnserd, token, title) value(%s, %s, %s, %s, %s, %s, %s)', (reciever, msg, 'no', 'no', 'no', code, title))	    
  9913	
  9914		    #error = 'We have got your message'
  9915	
  9916		    #return flask.render_template('writemsg.html', mess=getmsgs(), error='noone was found with that nick', entries2=entries)
  9917	
  9918				
  9919	
  9920		
  9921	
  9922		
  9923	
  9924		#elif reciever == "support":
  9925	
  9926		    #sa = db.cursor()
  9927	
  9928		    #sa.execute('insert into support (fr0m, msg, readd, respond, awnserd, token, title) value(%s, %s, %s, %s, %s, %s, %s)', (reciever, msg, 'no', 'no', 'no', code, title))	    
  9929	
  9930		    #error = 'We have got your message'
  9931	
  9932		    #return flask.render_template('writemsg.html', mess=getmsgs(), error='noone was found with that nick', entries2=entries)
  9933	
  9934		
  9935	
  9936		else:
  9937	
  9938		    pass
  9939	
  9940	
  9941	
  9942		sss = db.cursor()
  9943	
  9944		sss.execute('select pgp from vens where nick=%s', (reciever,))
  9945	
  9946		finger = sss.fetchone()
  9947	
  9948		db2 = connectsupport()
  9949		if not finger:
  9950	
  9951		    error = 'Message Sent!'
  9952	
  9953		    pass
  9954	
  9955		else:
  9956		    error = 'Message Sent!'
  9957		    if len(finger[0]) > 3:
  9958	
  9959			signatu = gpg.encrypt(msg, finger[0], always_trust=True) #sign aswell
  9960	
  9961			msg = signatu
  9962	
  9963			error = 'Message Sent Encrypted!'
  9964	
  9965	
  9966	
  9967		if reciever == "Legion of Warezloaders":
  9968	
  9969		    sa = db2.cursor()
  9970	
  9971		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    
  9972	
  9973		    error = 'We have got your message'
  9974		    db2.commit()
  9975	
  9976		else:
  9977	
  9978		    pass
  9979	
  9980	
  9981	
  9982		if reciever == "Legion of Warezloader":
  9983	
  9984		    sa = db2.cursor()
  9985	
  9986		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    				    	    
  9987	
  9988		    error = 'We have got your message'
  9989		    db2.commit()
  9990	
  9991		else:
  9992	
  9993		    pass
  9994	
  9995		if reciever == "Support":
  9996	
  9997		    sa = db2.cursor()
  9998	
  9999		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    
 10000	




10001		    error = 'We have got your message'
 10002		    db2.commit()
 10003	
 10004		else:
 10005	
 10006		    pass
 10007	
 10008		
 10009	
 10010		if reciever == "support":
 10011	
 10012		    sa = db2.cursor()
 10013	
 10014		    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick, msg, 'no', 'no', 'no', code, title))	    
 10015	
 10016		    error = 'We have got your message'
 10017	
 10018		    db2.commit()
 10019	
 10020		else:
 10021	
 10022		    pass
 10023	
 10024		db3 = connectinbox()
 10025	
 10026		ss = db3.cursor()
 10027	
 10028		entries = wl_entries_cache().give_me_entries()#[dict(drugs=getd(), cardin=getcf(), activism=geta(), carded=getci(), clothes=getcj(), services=gets(), weapons=getw(), books=getget(), host=geths(), art=geta(), collect=getc(), computer=getce(), vhpi=getvhpi(), sss=getsss(), co=getco(), lab=getl(), ma=getma(), home=geth(), mus=getm(), orders=geto())]
 10029	
 10030		ss.execute('insert into inbox (sender, send, msg, hread, token, title) values(%s, %s, %s, %s, %s, %s)', (fromm, reciever, msg, 'no', code, title))
 10031	
 10032		db3.commit()
 10033	
 10034		db2.commit()
 10035		db2.close()
 10036		db.close()
 10037		db3.close()
 10038	
 10039		return flask.render_template('writemsg.html', newsentries=wl_html_cache().get_news(), role=role, entries2=entries, soo = searchingfor().latestbtcprice(), mess=mess, pricetable=pricetable, error=error, cloak=cloaks)
 10040	
 10041	    
 10042	    
 10043	    db.close()
 10044	
 10045	    #db2.close()
 10046	    #db3.close()
 10047	    return flask.render_template('writemsg.html', newsentries=wl_html_cache().get_news(), role=role, mess=mess, soo = searchingfor().latestbtcprice(), pricetable=pricetable, error=error, entries2=entries, cloak=cloaks)
 10048	
 10049	    
 10050	
 10051	
 10052	
 10053	@wl.route('/messages/search')
 10054	
 10055	@noindex
 10056	
 10057	@axss
 10058	
 10059	@adate
 10060	
 10061	@af
 10062	
 10063	def searchmsgs():
 10064	
 10065	    if not flask.session.has_key("nick"):
 10066	
 10067		return flask.redirect(flask.url_for('choice_mode'))  
 10068	
 10069	    if flask.session.has_key('special') and flask.session:
 10070		if not vertify_session(flask.session['special']):
 10071		    return flask.redirect(flask.url_for('choice_mode'))
 10072		pass
 10073	    else:
 10074		return flask.redirect(flask.url_for('choice_mode')) 
 10075	
 10076	#fix this!!
 10077	    
 10078	    
 10079	    
 10080	#--------wl's escrow service 
 10081	
 10082	@wl.route('/escrow/<orderid>', methods=['POST', 'GET'])
 10083	
 10084	@noindex
 10085	
 10086	@axss
 10087	
 10088	@adate
 10089	
 10090	@af
 10091	
 10092	def wlescrow(orderid):
 10093	
 10094	    if not flask.session.has_key("nick"):
 10095	
 10096		return flask.redirect(flask.url_for('choice_mode'))  
 10097	
 10098	    if flask.session.has_key('special') and flask.session:
 10099		if not vertify_session(flask.session['special']):
 10100		    return flask.redirect(flask.url_for('choice_mode'))
 10101		pass
 10102	    else:
 10103		return flask.redirect(flask.url_for('choice_mode')) 
 10104	    db = connectvens()
 10105	
 10106	    ee = db.cursor()
 10107	
 10108	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 10109	
 10110	    ee.execute('select role from vens where nick=%s', (nick,))
 10111	
 10112	    role = ee.fetchone()
 10113	
 10114	    role = role[0]    
 10115	
 10116	    return flask.render_template('escrow.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, entries=entries)
 10117	
 10118	
 10119	
 10120	
 10121	
 10122	@wl.route('/testshop')
 10123	
 10124	@noindex
 10125	
 10126	@axss
 10127	
 10128	@af
 10129	
 10130	@adate
 10131	
 10132	def testshop():
 10133	
 10134	    if not flask.session.has_key("nick"):
 10135	
 10136		return flask.redirect(flask.url_for('choice_mode')) 
 10137	    if flask.session.has_key('special') and flask.session:
 10138		if not vertify_session(flask.session['special']):
 10139		    return flask.redirect(flask.url_for('choice_mode'))
 10140		pass
 10141	    else:
 10142		return flask.redirect(flask.url_for('choice_mode'))     
 10143	
 10144	
 10145	    db = connectvens()
 10146	
 10147	    db2 = connectitems()
 10148	    curl = db2.cursor()
 10149	
 10150	    ee = db.cursor()
 10151	
 10152	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 10153	
 10154	    ee.execute('select role from vens where nick=%s', (nick,))
 10155	
 10156	    role = ee.fetchone()
 10157	
 10158	    role = role[0]    
 10159	
 10160	    curl.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items order by item_id')
 10161	
 10162	    entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in curl.fetchall()]
 10163	
 10164	    db.close()
 10165	    db2.close()
 10166	    return flask.render_template('testshop.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, entries=entries)
 10167	
 10168	
 10169	
 10170	@wl.route('/about')
 10171	
 10172	@noindex
 10173	
 10174	@axss
 10175	
 10176	@af
 10177	
 10178	@adate
 10179	
 10180	def about():
 10181	
 10182	    #if flask.session.has_key('special') and flask.session:
 10183		#if not vertify_session(flask.session['special']):
 10184		    #return flask.redirect(flask.url_for('choice_mode'))
 10185		#pass
 10186	    #else:
 10187		#return flask.redirect(flask.url_for('choice_mode'))    
 10188	    #print 'logging handler'
 10189	    #print logging.getLogger().handlers        
 10190	    meh = flask.render_template
 10191	    return wl_html_cache().return_page('about', meh)
 10192	
 10193	
 10194	
 10195	
 10196	
 10197	
 10198	
 10199	#-#TODO!!!!!!!! - done :)
 10200	
 10201	def gen_append(payed, vendor, invitecode):
 10202	   #sprint 'appending it!'
 10203	    db = connectinvite()
 10204	    ew,stc = db.cursor(),db.cursor()
 10205	    ew.execute('update invite set payed=%s where byvendor=%s and invitecode=%s', (payed, vendor, invitecode))
 10206	    db.commit()
 10207	    #print invitecode
 10208	    #print vendor
 10209	    #print payed
 10210	    stc.execute('select magic_code from invite where byvendor=%s and invitecode=%s', (vendor, invitecode))
 10211	    ro = stc.fetchone()[0]
 10212	    message = '''
 10213	    Here is information regarding the Invitation code    
 10214		the url the member need to use to sign up is: 
 10215		/register/invited/signup/''' + ro + '''
 10216	
 10217		You got Invitation code when you bought it
 10218	
 10219		'''
 10220	    senduser2(vendor, 'Warezloader-bot', message, 'invite information')    
 10221	    db.close()
 10222	
 10223	def geninvite(fromvendor, payed, helro=False):
 10224	
 10225	    
 10226	    if helro:
 10227		db = connectinvite()
 10228	#sprint 'got helro!!'
 10229		herro = base64.b64encode(urandom(67)).replace('=', '').replace('/', '')
 10230		#helro = base64.b64encode(urandom(74)).replace('=', '').replace('/', '')
 10231	
 10232		lb = db.cursor()
 10233	
 10234		ro = base64.b64encode(urandom(40)).replace('=', '').replace('/', '')
 10235		today = datetime.date.today()
 10236	
 10237		today = str(today)
 10238	
 10239		lb.execute('insert into invite(byvendor, today, invitecode, payed, used, forwho, magic_code, notes) values(%s, %s, %s, %s, %s, %s, %s, %s)', (fromvendor, today, herro, payed, 'no', 'invite', ro, 'generated by vendor'))
 10240		db.commit()
 10241		db.close()
 10242	    else:
 10243		#print 'passing..'
 10244		db = connectcoinz()
 10245		#append
 10246		ks = db.cursor()
 10247		#print payed
 10248		ks.execute('select notes from coinorder where vendor=%s and item_id=%s', (fromvendor,'invite'))
 10249		herro = ks.fetchone()[0]
 10250		db.close()
 10251		
 10252	    return herro
 10253	
 10254	
 10255	
 10256	#create table invite(
 10257	
 10258	#bya text not null, 
 10259	
 10260	#today date not null, 
 10261	
 10262	#invitecode text not null,
 10263	
 10264	#forwho text not null);
 10265	
 10266	
 10267	#by allowing our members to choice
 10268	#there own salt we make sure that
 10269	#we dont store more data about 
 10270	#members then what we need. 
 10271	#this also secures our database in 
 10272	#case of a database leak
 10273	
 10274	
 10275	
 10276	#add auto encrypt to this
 10277	#senduser2(the_is_nick, sender, message, title)
 10278	
 10279	
 10280	#invite functions
 10281	
 10282	#@wl.route('/getinvite')
 10283	
 10284	#def gi():
 10285	
 10286	    
 10287	
 10288	    #return ''
 10289	
 10290	#more then one invite??
 10291	
 10292	def checkinvitecoin(nick):
 10293	    db = connectcoinz()
 10294	    ck = db.cursor()
 10295	    ck.execute('select amount from coinorder where typeoftrans=%s and vendor=%s', ('invite', nick))
 10296	    pm = ck.fetchone()
 10297	    if not pm:
 10298	#sprint 'createing a coinorder'
 10299		address = pycoind.Address.generate(compressed = True)
 10300		pk = address.private_key
 10301		btcaddr = address.address
 10302		pbk = address.public_key.encode('hex') 
 10303		wer = db.cursor()
 10304		status = 'unpaid'
 10305		paid = 'no'
 10306		helro = base64.b64encode(urandom(74)).replace('=', '').replace('/', '')
 10307		amount = globalvendorprice*0.7
 10308		wer.execute('insert into coinorder(name, address, pk, pbk, amount, status, paid, buyer, item_id, item_amount, vendor, typeoftrans, notes) value(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', ('invite', btcaddr, pk, pbk, amount, status, paid, nick, 'invite', amount, nick, 'invite', helro))
 10309		geninvite(nick, 'no', helro=helro)
 10310		db.commit()
 10311		db.close()
 10312	    else:
 10313		pass
 10314		ds = db.cursor()
 10315		ds.execute('select address from coinorder where typeoftrans=%s and vendor=%s', ('invite', nick))
 10316		btcaddr = ds.fetchone()[0]#assume assume
 10317		db.close()
 10318	    return btcaddr 
 10319	
 10320	
 10321	
 10322	#if invite code is in the database and time is right accept
 10323	
 10324	#if ur magic code is true sign up and remove magic code
 10325	
 10326	
 10327	
 10328	#Buy the invite code
 10329	@wl.route('/order_invite', methods=['POST', 'GET'])
 10330	@noindex
 10331	@axss
 10332	@adate
 10333	@af
 10334	def order_invite():
 10335	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 10336		if not vertify_session(flask.session['special']):
 10337		    return flask.redirect(flask.url_for('choice_mode'))
 10338		pass
 10339	    else:
 10340		return flask.redirect(flask.url_for('choice_mode'))
 10341	   
 10342	    error = False
 10343	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])#remove this
 10344	    btcaddr = checkinvitecoin(nick)
 10345	    oprice = int(globalvendorprice*0.7)
 10346	    #s = 0.00025 #- test - 0.00026212 13NLRmjN9c8VRy5xFtcDJmNeioDPZtBcmR
 10347	    amount = searchingfor().convertusd2btc(oprice)#b.convert_to_btc(oprice, 'USD') #70% of vendor price
 10348	    if flask.request.method == 'POST':
 10349		
 10350		if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 10351		    if not vertify_session(flask.session['special']):
 10352			return flask.redirect(flask.url_for('choice_mode'))
 10353		    pass
 10354		else:
 10355		    return flask.redirect(flask.url_for('choice_mode'))	
 10356	
 10357		#print 'stuffy stuff:'
 10358		#print verify_a_payment(btcaddr, amount)
 10359		if verify_a_payment(btcaddr, amount) == 'yes':
 10360		    error = ['congratz! here is your invite code, it will not be displayed again ']
 10361		    #print '1:'
 10362		    cod = geninvite(nick, 'yes', helro=True)
 10363		    #print '2'
 10364		    #print 'appending invite!'
 10365		   #sprint (cod, nick)
 10366		    gen_append('yes', nick, cod)#todo
 10367		    error.append(str('code: ' + cod))
 10368		    finishinvite(cod, nick)
 10369		else:
 10370		    error = ['Payment not sent']
 10371	    
 10372	    return flask.render_template('order_invite.html', mess=getmsgs(), newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2 = wl_entries_cache().give_me_entries(), oprice=oprice, error=error, amount=amount, btcaddr=btcaddr)
 10373	#verify vendor == vendor
 10374	
 10375	#whut?
 10376	#def validate_invitecode(invitecode, magiccode):
 10377	    #db = connectinvite()
 10378	    #ie = db.cursor()
 10379	    #ie.execute('select byvendor, today, used, payed, forwho, magic_code where magic_code=%s and invitecode=%s', (invitecode, magiccode))
 10380	    #if not ie.fetchone():
 10381		#db.close()
 10382		#return False
 10383	    #db.close()
 10384	    #return ''
 10385	
 10386	def invitecodeused(nick, code, magiccode):
 10387	    db = connectinvite()
 10388	    rb = db.cursor()
 10389	    rb.execute('update invite set used=%s and forwho=%s where invitecode=%s and magic_code=%s', ('yes',nick,code,magiccode))
 10390	   #sprint 'setting invited to used'
 10391	    db.commit()
 10392	    db.close()
 10393	
 10394	def finishinvite(code, nick):
 10395	    db2 = connectinvite()
 10396	    yahoo,gotdo = db2.cursor(),db2.cursor()
 10397	    #print 'finished order!'
 10398	    #print 'code:' + code
 10399	    #print 'nick:' + nick
 10400	    yahoo.execute('select magic_code from invite where byvendor=%s and invitecode=%s', (nick, code))
 10401	    magiccode = yahoo.fetchone()[0]    
 10402	    gotdo.execute('update invite set payed=%s where magic_code=%s and byvendor=%s and invitecode=%s', ('yes', magiccode, nick, code))    
 10403	    db2.commit()
 10404	    db2.close()
 10405	#   #sprint 'magic code: ' + magiccode
 10406	    db = connectcoinz()#move coinz
 10407	    asd,deface = db.cursor(),db.cursor()
 10408	    asd.execute('select address, pk, pbk from coinorder where vendor=%s and typeoftrans=%s', (nick, 'invite'))#, code - should work
 10409	    bewiiz = asd.fetchone()
 10410	    address = bewiiz[0]
 10411	    pk = bewiiz[1]
 10412	    pbk = bewiiz[2]
 10413	    typeof = 'invite'
 10414	    balance = globalvendorprice*0.7
 10415	    #do maintinance and remove invitecode and expired older then -> | cache cron?
 10416	    #asd.execute('update invite set used=%')
 10417	    #print 'finished invite called, shipping to mothergoose'
 10418	    ship2mothergoose(address, pk, pbk, balance, nick, typeof)
 10419	    #print 'removeing it'
 10420	    deface.execute('delete from coinorder where vendor=%s and typeoftrans=%s', (nick, 'invite'))
 10421	  # #sprint 'removed from coinorder!'
 10422	    db.commit()
 10423	    db.close()
 10424	
 10425	def updateinvite(invitecode, magiccode, nick):
 10426	    db = connectinvite()
 10427	    sd,ssd = db.cursor(),db.cursor()
 10428	    sd.execute('update invite set used=%s where magic_code=%s and invitecode=%s', ('yes', magiccode, invitecode))
 10429	    ssd.execute('update invite set forwho=%s where magic_code=%s and invitecode=%s', (nick, magiccode, invitecode))
 10430	    
 10431	    db.commit()
 10432	    db.close()
 10433	   #sprint 'updated all is well!'
 10434	
 10435	#todo redirect signup uri's
 10436	
 10437	#signup
 10438	
 10439	@wl.route('/register/invited/signup/<codeofmagic>', methods=['POST', 'GET'])#<magiccode>')
 10440	
 10441	@noindex
 10442	
 10443	@axss
 10444	
 10445	@adate
 10446	
 10447	@af
 10448	
 10449	def inviteregister(codeofmagic):
 10450	
 10451	    #if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 10452		#if not vertify_session(flask.session['special']):
 10453		    #return flask.redirect(flask.url_for('choice_mode'))
 10454		#pass
 10455	    #else:
 10456		#return flask.redirect(flask.url_for('choice_mode'))
 10457	
 10458	    db = connectinvite()
 10459	    gjl = db.cursor()   
 10460	    gjl.execute('select magic_code from invite where magic_code=%s and used=%s', (codeofmagic, 'no'))
 10461	   ##sprint 'magic'
 10462	    op = gjl.fetchone()
 10463	    db.close()
 10464	    error = False
 10465	
 10466	    if not op:	
 10467		return flask.redirect(flask.url_for('signup'))
 10468	    
 10469	    
 10470	    if flask.request.method == 'POST':
 10471		db = connectinvite()
 10472			
 10473		privnicks = ['censorednick', 'censorednicklovin', '', 'warezloader']
 10474		nickname = flask.request.form['nickname']
 10475		password = flask.request.form['Password']
 10476		vpassword = flask.request.form['vPassword']
 10477		greetings_phrase = flask.request.form['grtz']
 10478		salt = flask.request.form['salt']
 10479		email = flask.request.form['Email']
 10480		pgp = flask.request.form['pgpkey']	
 10481		invcode = flask.request.form['Invite']
 10482	
 10483		error = False
 10484		
 10485		gjl = db.cursor()   
 10486	        gjl.execute('select magic_code from invite where magic_code=%s and invitecode=%s and used=%s', (codeofmagic, invcode, 'no'))
 10487		#print 'magic'
 10488		op = gjl.fetchone()
 10489		db.close()
 10490		error = False
 10491		if not op:
 10492		    error = 'invalid invite code'
 10493		    return flask.render_template('invite.html', error=error)	
 10494	
 10495		for line in privnicks:
 10496		    if line in nickname.lower():
 10497			error = 'nickname taken try again'
 10498			return flask.render_template('invite.html', error=error)
 10499		    
 10500		if vpassword == password:
 10501		    orighash = generate_password_hash(password, salt)
 10502		    hashone = generate_password_hash(orighash, hash1)
 10503		    hashtwo = generate_password_hash(hashone, hash2)
 10504		    hashthree = generate_password_hash(hashtwo, hash3)
 10505		    hashedpasswd = hashthree
 10506		
 10507		    db = connectvens()
 10508		    db2 = connectinbox()	
 10509		    ll = db.cursor()
 10510		    ll.execute('select role from vens where nick=%s', (nickname,))
 10511		    veri = ll.fetchall()    
 10512		    finger = '0'
 10513		    if pgp:
 10514			if pgp.upper().endswith('-----END PGP PUBLIC KEY BLOCK-----') and pgp.upper().startswith('-----BEGIN PGP PUBLIC KEY BLOCK-----'):
 10515			    #import_result = gpg.import_keys(pgp)
 10516			    finger = gpg.import_keys(pgp).fingerprints[0]#import_result.fingerprints[0]
 10517			    pass
 10518			else:
 10519			    error = 'invalid pgp key: ' + str(pgp)
 10520			    db.close()
 10521			    return flask.render_template('invite.html', error=error)
 10522		    else:
 10523			pass
 10524		    if not finger:
 10525			finger = '0'
 10526		    else:
 10527			pass
 10528		    if veri:
 10529			db.close()
 10530			error = 'nickname taken try again'
 10531			return flask.render_template('invite.html', error=error)
 10532		    today = datetime.date.today() #cuz CURDATE() dont want to work
 10533		    role = 'user'
 10534		    cur = db.cursor()
 10535		    am = '0'
 10536		    cur.execute('insert into vens (nick, password, email, role, joined, amountitemsbought, p_phrase, pgp, holidaymode) values (%s, %s, %s, %s, %s, %s, %s, %s, %s)', (nickname,  hashedpasswd, email, 'vendor', today, am, greetings_phrase, finger, 'nope'))
 10537		    #welcome to wl msg
 10538		    addbtc(nickname, nots='signup')
 10539		    db.commit()	
 10540		    cuuu = db2.cursor()
 10541		    messs = '''
 10542		    Welcome to Warezloader!
 10543		    The legion of Warezloaders Welcomes you to Warezloader.
 10544		    If you need any help dont hesitate to contact /support.
 10545		    
 10546		    We see that you have been invited and we have added you as a vendor.
 10547		    Welcome to the vendor league!
 10548		    
 10549		    some quick security tips:
 10550		    by adding a pgp key to your account you automaticly enable: 2factor pgp authentication and message inbox encryption
 10551		    if you decide to leave due to something. Go in to /Settings and press shred. 
 10552		    to permanently delete all information about you.
 10553		    if you never have used WarezLoader before and you feel lost in the void, we recommend that you check out /get_started
 10554		    
 10555			We hope that you will have a long and happy stay.
 10556		    
 10557			    Sincerly ~The Legion of Warezloaders		
 10558			                    '''
 10559		    tok = gettoken()
 10560		    cuuu.execute('insert into inbox (sender, send, msg, title, hread, token) values (%s, %s, %s, %s, %s, %s)', ('Legion of Warezloaders', nickname, messs, 'Welcome to Warezloader', 'no', tok))
 10561		    db.commit()
 10562		    db2.commit()
 10563		    db2.close()
 10564		    db.close()
 10565		   #sprint 'updating'
 10566		    updateinvite(invcode, codeofmagic, nickname)
 10567		   #sprint 'all is well - check db '
 10568		    return '''
 10569		<html> <head><title>Welcome</title></head><center>			
 10570			                Welcome to Warezloader '''+ nickname + ''' 
 10571			                 <br>Welcome home<br>
 10572			                 <a href='/login'>Login</a> and start your adventure
 10573			                </html>
 10574			                '''	
 10575		else:
 10576		    error = 'Your password doesnt match'
 10577		    return flask.render_template('invite.html', error=error)	    
 10578	    #today = datetime.date.today()
 10579	
 10580	    #t2 = ''
 10581	
 10582	    #if t2 > str(today):
 10583	
 10584		#enter = True
 10585	
 10586	    #else:
 10587	
 10588		#enter = False
 10589	
 10590	    
 10591	
 10592	    #db = connect()
 10593	
 10594	    #lll = db.cursor()
 10595	
 10596	    #lll.execute('select vendor_id, role from db where')
 10597	
 10598	    #test = lll.fetchone()
 10599	
 10600	    
 10601	
 10602	 #   if not test:
 10603	
 10604	#	error = 'wrong code'
 10605	
 10606	   # else:
 10607	
 10608	   #	error = 'welcome'
 10609	
 10610	
 10611	    meh = flask.render_template
 10612	    return flask.render_template('invite.html', error=error)
 10613	    #return wl_html_cache().return_page('invite', meh)    
 10614	
 10615	    #return #flask.render_template('invite.html', pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, error=error)
 10616	
 10617	
 10618	@wl.route('/mastermind/')
 10619	@wl.route('/mastermind')
 10620	@noindex
 10621	@axss
 10622	@adate
 10623	@af
 10624	def masterdumb():
 10625	
 10626	    return '''
 10627	
 10628	
 10629	
 10630	i like ur mom    
 10631	
 10632	'''
 10633	
 10634	
 10635	
 10636	
 10637	
 10638	
 10639	
 10640	
 10641	
 10642	def gencloak(nick, expiredate):
 10643	    prefix = 'cloaked_'  
 10644	
 10645	
 10646	
 10647	
 10648	
 10649	
 10650	
 10651	
 10652	@wl.route('/cloak', methods=['POST', 'GET'])
 10653	@noindex
 10654	@axss
 10655	@adate
 10656	@af
 10657	def cloaks():
 10658	    if not flask.session.has_key("nick"):
 10659		return flask.redirect(flask.url_for('choice_mode'))  
 10660	    if flask.session.has_key('special') and flask.session:
 10661		if not vertify_session(flask.session['special']):
 10662		    return flask.redirect(flask.url_for('choice_mode'))
 10663		pass
 10664	    else:
 10665		return flask.redirect(flask.url_for('choice_mode'))     
 10666	    
 10667	    if flask.request.method == 'POST':
 10668		if flask.session.has_key('special') and flask.session:
 10669		    if not vertify_session(flask.session['special']):
 10670			return flask.redirect(flask.url_for('choice_mode'))
 10671		    pass
 10672		else:
 10673		    return flask.redirect(flask.url_for('choice_mode')) 	
 10674		nick = decode_session(flask.session["special"])[0]	
 10675		
 10676		if cloak().hascloak(nick):
 10677		    cloak().shred_cloak(nick)
 10678		else:
 10679		    cloak().gencloak(nick)
 10680	
 10681	    error = False
 10682	    nick = decode_session(flask.session["special"])[0]
 10683	    entries2 = wl_entries_cache().give_me_entries()
 10684	    cloaks = cloak().get_cloak(nick)
 10685	    mess = getmsgs()
 10686	    return flask.render_template('cloak.html', newsentries=wl_html_cache().get_news(), entries2=entries2,emnick=nick, error=error, mess=mess, pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice(), cloak=cloaks)
 10687	
 10688	
 10689	
 10690	
 10691	
 10692	
 10693	
 10694	
 10695	
 10696	
 10697	
 10698	#fancy dumb syntax - sessions? yea yeah
 10699	
 10700	@wl.route('/new_settings', methods=['POST', 'GET'])
 10701	@wl.route('/settings_new', methods=['POST', 'GET'])
 10702	@noindex
 10703	@axss
 10704	@adate
 10705	@af
 10706	def newsettings():
 10707	    if not flask.session.has_key("nick"):
 10708		return flask.redirect(flask.url_for('choice_mode'))  
 10709	
 10710	    if flask.session.has_key('special') and flask.session:
 10711		if not vertify_session(flask.session['special']):
 10712		    return flask.redirect(flask.url_for('choice_mode'))
 10713		pass
 10714	    else:
 10715		return flask.redirect(flask.url_for('choice_mode'))     
 10716	
 10717	    
 10718	    if flask.request.method == 'POST':
 10719		if flask.session.has_key('special') and flask.session:
 10720		    if not vertify_session(flask.session['special']):
 10721			return flask.redirect(flask.url_for('choice_mode'))
 10722		    pass
 10723		else:
 10724		    return flask.redirect(flask.url_for('choice_mode')) 	
 10725	
 10726		error = 'updated | '
 10727		nick = decode_session(flask.session["special"])[0]	
 10728		
 10729		pkey = flask.request.form['pgpkey']
 10730		destt = flask.request.form['deso']
 10731		if len(pkey) < 20:
 10732		    error += 'no pgp key changed'
 10733		    pass
 10734	
 10735		else:
 10736	
 10737		    import_result = gpg.import_keys(pkey)
 10738		    finger = import_result.fingerprints[0]
 10739		    error += 'pgpkey added'
 10740		    db = connectvens()
 10741	
 10742		    tr = db.cursor()
 10743	
 10744		    tr.execute('update vens set pgp=%s where nick=%s', (finger, nick))
 10745	
 10746		    db.commit()
 10747	
 10748		    db.close()	    
 10749	
 10750		    pass
 10751	
 10752	
 10753		if destt:
 10754		#   #sprint 'got destt'
 10755		    dbbb = connectvens()
 10756		    mkmm = dbbb.cursor()
 10757		    mkmm.execute('update vens set about_me=%s where nick=%s', (destt, nick))
 10758		    dbbb.commit()
 10759		    dbbb.close()
 10760		    error += ' updated description '
 10761		if not destt:
 10762		    pass
 10763		    #print 'did not get destt'
 10764		
 10765		
 10766	
 10767		db = connectvens()
 10768	
 10769		cl = db.cursor()
 10770	
 10771		mess = getmsgs()
 10772	
 10773		sdfs = db.cursor()
 10774	
 10775		sdfs.execute('select pgp from vens where nick=%s', (nick,))
 10776	
 10777		finger = sdfs.fetchone()
 10778	
 10779		ee = db.cursor()
 10780	
 10781		ee.execute('select role from vens where nick=%s', (nick,))
 10782	
 10783		role = ee.fetchone()
 10784	
 10785		role = role[0]    
 10786	
 10787		if not finger:
 10788	
 10789		    finger = False
 10790	
 10791		    pass
 10792	
 10793		else:
 10794	
 10795		    if len(finger) < 5:
 10796	
 10797			finger = False#'no pgp key'
 10798	
 10799			pass
 10800	
 10801		    else:
 10802	
 10803			finger = gpg.export_keys(finger)
 10804	
 10805			if not finger:
 10806	
 10807			    finger = False#'no pgp key'
 10808	
 10809			    pass
 10810	
 10811			else:
 10812	
 10813			    pass
 10814	
 10815		ee = db.cursor()
 10816	
 10817		ee.execute('select role from vens where nick=%s', (nick,))
 10818	
 10819		role = ee.fetchone()
 10820		role = role[0]	
 10821	
 10822		cl.execute('select role, about_me from vens where nick=%s', (nick,))
 10823	
 10824		entries = [dict(role=row[0], des=row[1]) for row in cl.fetchall()]
 10825	
 10826		db.close()
 10827	
 10828		return flask.render_template('new/settings.html', error=error, finger=finger, nick=nick, mess=mess, entries=entries)
 10829	
 10830	
 10831	
 10832	    db = connectvens()
 10833	    error = False
 10834	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 10835	    cl = db.cursor()
 10836	    mess = getmsgs()
 10837	    sdfs = db.cursor()
 10838	    sdfs.execute('select pgp from vens where nick=%s', (nick,))
 10839	    finger = sdfs.fetchone()
 10840	    ee = db.cursor()
 10841	    ee.execute('select role from vens where nick=%s', (nick,))
 10842	
 10843	    role = ee.fetchone()
 10844	    role = role[0]    
 10845	    if len(finger[0]) < 6:
 10846		finger = False
 10847	
 10848	    else:
 10849	
 10850		finger = gpg.export_keys(finger)
 10851	
 10852	    ee = db.cursor()
 10853	    ee.execute('select role from vens where nick=%s', (nick,))
 10854	    role = ee.fetchone()
 10855	    role = role[0]	
 10856	    cl.execute('select role, about_me from vens where nick=%s', (nick,))
 10857	    entries = [dict(role=row[0], des=row[1]) for row in cl.fetchall()]
 10858	
 10859	
 10860	    db.close()
 10861	    return flask.render_template('new/settings.html', finger=finger, entries=entries, nick=nick, error=error, mess=mess)
 10862	
 10863	
 10864	
 10865	
 10866	
 10867	
 10868	#todo!!
 10869	#change nick get from nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 10870	#to decrypt the blake hash
 10871	
 10872	
 10873	
 10874	#user settings
 10875	
 10876	#change avatar, des, remove account , etc..
 10877	
 10878	@wl.route('/Settings', methods=['POST', 'GET'])
 10879	@noindex
 10880	@axss
 10881	@adate
 10882	@af
 10883	def settings():
 10884	    if not flask.session.has_key("nick"):
 10885		return flask.redirect(flask.url_for('choice_mode'))  
 10886	
 10887	    if flask.session.has_key('special') and flask.session:
 10888		if not vertify_session(flask.session['special']):
 10889		    return flask.redirect(flask.url_for('choice_mode'))
 10890		pass
 10891	    else:
 10892		return flask.redirect(flask.url_for('choice_mode'))     
 10893	
 10894	    
 10895	    if flask.request.method == 'POST':
 10896		if flask.session.has_key('special') and flask.session:
 10897		    if not vertify_session(flask.session['special']):
 10898			return flask.redirect(flask.url_for('choice_mode'))
 10899		    pass
 10900		else:
 10901		    return flask.redirect(flask.url_for('choice_mode')) 	
 10902	
 10903		error = 'updated | '
 10904		nick = decode_session(flask.session["special"])[0]	
 10905		
 10906		pkey = flask.request.form['pgpkey']
 10907		destt = flask.request.form['deso']
 10908		if len(pkey) < 20:
 10909		    error += 'no pgp key changed'
 10910		    pass
 10911	
 10912		else:
 10913	
 10914		    import_result = gpg.import_keys(pkey)
 10915		    finger = import_result.fingerprints[0]
 10916		    error += 'pgpkey added'
 10917	
 10918		    db = connectvens()
 10919	
 10920		    tr = db.cursor()
 10921	
 10922		    tr.execute('update vens set pgp=%s where nick=%s', (finger, nick))
 10923	
 10924		    db.commit()
 10925	
 10926		    db.close()	    
 10927	
 10928		    pass
 10929	
 10930	
 10931		if destt:
 10932		#   #sprint 'got destt'
 10933		    dbbb = connectvens()
 10934		    mkmm = dbbb.cursor()
 10935		    mkmm.execute('update vens set about_me=%s where nick=%s', (destt, nick))
 10936		    dbbb.commit()
 10937		    dbbb.close()
 10938		    error += ' updated description '
 10939		if not destt:
 10940		    pass
 10941		    #print 'did not get destt'
 10942		
 10943		
 10944	
 10945		db = connectvens()
 10946	
 10947		cl = db.cursor()
 10948	
 10949		mess = getmsgs()
 10950	
 10951		sdfs = db.cursor()
 10952	
 10953		sdfs.execute('select pgp from vens where nick=%s', (nick,))
 10954	
 10955		finger = sdfs.fetchone()
 10956	
 10957		ee = db.cursor()
 10958	
 10959		ee.execute('select role from vens where nick=%s', (nick,))
 10960	
 10961		role = ee.fetchone()
 10962	
 10963		role = role[0]    
 10964	
 10965		if not finger:
 10966	
 10967		    finger = False
 10968	
 10969		    pass
 10970	
 10971		else:
 10972	
 10973		    if len(finger) < 5:
 10974	
 10975			finger = False#'no pgp key'
 10976	
 10977			pass
 10978	
 10979		    else:
 10980	
 10981			finger = gpg.export_keys(finger)
 10982	
 10983			if not finger:
 10984	
 10985			    finger = False#'no pgp key'
 10986	
 10987			    pass
 10988	
 10989			else:
 10990	
 10991			    pass
 10992	
 10993		ee = db.cursor()
 10994	
 10995		ee.execute('select role from vens where nick=%s', (nick,))
 10996	
 10997		role = ee.fetchone()
 10998	
 10999		role = role[0]	
 11000	
 11001		cl.execute('select role, about_me from vens where nick=%s', (nick,))
 11002	
 11003		entries = [dict(role=row[0], des=row[1]) for row in cl.fetchall()]
 11004	
 11005		entries2 = wl_entries_cache().give_me_entries()
 11006	
 11007		db.close()
 11008	
 11009		return flask.render_template('settings.html', newsentries=wl_html_cache().get_news(), error=error, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2, role=role, finger=finger, entries=entries, emnick=nick, mess=mess)
 11010	
 11011	
 11012	
 11013	    db = connectvens()
 11014	
 11015	    error = False
 11016	
 11017	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11018	
 11019	    cl = db.cursor()
 11020	
 11021	    mess = getmsgs()
 11022	
 11023	    sdfs = db.cursor()
 11024	
 11025	    sdfs.execute('select pgp from vens where nick=%s', (nick,))
 11026	
 11027	    finger = sdfs.fetchone()
 11028	
 11029	    ee = db.cursor()
 11030	
 11031	    ee.execute('select role from vens where nick=%s', (nick,))
 11032	
 11033	    role = ee.fetchone()
 11034	
 11035	    role = role[0]    
 11036	
 11037	    if len(finger[0]) < 6:
 11038	
 11039		finger = False
 11040	
 11041	    else:
 11042	
 11043		finger = gpg.export_keys(finger)
 11044	
 11045	    #if not finger:
 11046	
 11047		#finger = False
 11048	
 11049		#pass
 11050	
 11051	    
 11052	
 11053	    #else:
 11054	
 11055		#finger = gpg.export_keys(finger)
 11056	
 11057		#pass
 11058	
 11059	    
 11060	
 11061	    #if len(finger) < 6:
 11062	
 11063		#finger = False
 11064	
 11065		#pass
 11066	
 11067	    #else:
 11068	
 11069		#finger = gpg.export_keys(finger)
 11070	
 11071		#pass
 11072	
 11073		
 11074	
 11075		
 11076	
 11077		##if len(finger) < 5:
 11078	
 11079		    #finger = False#'no pgp key'
 11080	
 11081		    #pass
 11082	
 11083		#else:
 11084	
 11085		    #finger = gpg.export_keys(finger)
 11086	
 11087		    #if not finger:
 11088	
 11089			#finger = False#'no pgp key'
 11090	
 11091			#pass
 11092	
 11093		    #else:
 11094	
 11095			#finger = gpg.export_keys(finger)
 11096	
 11097			#pass
 11098	
 11099	    ee = db.cursor()
 11100	
 11101	    ee.execute('select role from vens where nick=%s', (nick,))
 11102	
 11103	    role = ee.fetchone()
 11104	
 11105	    role = role[0]	
 11106	
 11107	    cl.execute('select role, about_me from vens where nick=%s', (nick,))
 11108	
 11109	
 11110	
 11111	    entries = [dict(role=row[0], des=row[1]) for row in cl.fetchall()]
 11112	
 11113	    entries2 = wl_entries_cache().give_me_entries()
 11114	
 11115	    db.close()
 11116	    return flask.render_template('settings.html', newsentries=wl_html_cache().get_news(), entries2=entries2, role=role, finger=finger, entries=entries, emnick=nick, error=error, mess=mess, pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice())
 11117	
 11118	    #, orders=orders, pricetable = getpt(), soo = b.get_latest_price('USD')
 11119	
 11120	
 11121	
 11122	
 11123	
 11124	#goin a wall
 11125	
 11126	@wl.route('/awall', methods=['POST', 'GET'])
 11127	
 11128	@noindex
 11129	
 11130	@axss
 11131	
 11132	@af
 11133	
 11134	@adate
 11135	
 11136	def awall():
 11137	
 11138	    if not flask.session.has_key("nick"):
 11139	
 11140		return flask.redirect(flask.url_for('choice_mode'))  
 11141	
 11142	    if flask.session.has_key('special') and flask.session:
 11143		if not vertify_session(flask.session['special']):
 11144		    return flask.redirect(flask.url_for('choice_mode'))
 11145		pass
 11146	    else:
 11147		return flask.redirect(flask.url_for('choice_mode'))     
 11148	
 11149	    
 11150	
 11151	    if flask.request.method == 'POST':
 11152	
 11153		if flask.session.has_key('special') and flask.session:
 11154		    if not vertify_session(flask.session['special']):
 11155			return flask.redirect(flask.url_for('choice_mode'))
 11156		    pass
 11157		else:
 11158		    return flask.redirect(flask.url_for('choice_mode')) 
 11159		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick']) 
 11160	
 11161		#nick2 = flask.escape(flask.session['nick2'])
 11162	
 11163		#if verify(nick):#nick
 11164	
 11165		#verify special token    
 11166	
 11167		db = connectvens()
 11168	
 11169		db2 = connectinbox()
 11170		db3 = connecttrade()
 11171		db4 = connectitems()
 11172		ert = db.cursor()
 11173	
 11174		ert.execute('delete from vens where nick=%s', (nick,))
 11175	
 11176		rt = db2.cursor()
 11177	
 11178		oi = db2.cursor()
 11179	
 11180		ois = db4.cursor()
 11181	
 11182		pq = ois
 11183	
 11184		pe = db3.cursor()
 11185	
 11186		ps = pe# todo delete from coinz where usr=%s
 11187	
 11188		rt.execute('delete from inbox where sender=%s', (nick,))
 11189	
 11190		oi.execute('delete from inbox where send=%s', (nick,))
 11191	
 11192		ois.execute('delete from items where item_vendor=%s', (nick,))
 11193	
 11194		pe.execute('delete from trade where trade_t0=%s', (nick,))
 11195	
 11196		ps.execute('delete from trade where trade_fr0m=%s', (nick,))
 11197	
 11198		
 11199	
 11200		vaultshred(nick)
 11201	
 11202		db.commit()
 11203	
 11204		db.close()
 11205	
 11206	
 11207		db2.commit()
 11208		db2.close()
 11209	
 11210		db3.commit()
 11211		db3.close()
 11212		db4.commit()
 11213		db4.close()
 11214													
 11215		flask.session["present"] = False
 11216	
 11217		flask.session['online'] = False
 11218	
 11219		flask.session.pop('nick', None)
 11220	
 11221		flask.session.pop("nick", None)
 11222	
 11223		flask.session.pop("role", None)
 11224	
 11225		flask.session.pop('2faw', None)
 11226	
 11227		flask.session.pop('2fa', None)    
 11228	
 11229		flask.session.pop("nick2", None)	    
 11230	
 11231		return 'All data deleted about you, thanks for useing warezloader, may we recommend looking for help in the Garden of Lentil?, walk in peace - Legion of Warezloaders'
 11232	
 11233	    
 11234	
 11235	    entries2 = wl_entries_cache().give_me_entries()
 11236	
 11237	    entries2 = wl_entries_cache().give_me_entries()
 11238	
 11239	    #db.close()
 11240	
 11241	    #db2.close()
 11242	    #db3.close()
 11243	    #db4.close()
 11244	    return flask.render_template('awall.html', newsentries=wl_html_cache().get_news(), mess=getmsgs(), entries2=entries2)
 11245	
 11246	    
 11247	
 11248	#btc price
 11249	
 11250	#
 11251	
 11252	#doillars to btc gen in /item/
 11253	
 11254	#
 11255	
 11256	
 11257	
 11258	
 11259	
 11260	#shred from vault
 11261	
 11262	def vaultshred(user):
 11263	
 11264	    db1 = connectvault1()
 11265	
 11266	    db2 = connectvault2()
 11267	
 11268	    db3 = connectvault3()
 11269	
 11270	    db4 = connectvault4()
 11271	
 11272	    c1 = db1.cursor()
 11273	
 11274	    c2 = db2.cursor()
 11275	
 11276	    c3 = db3.cursor()
 11277	
 11278	    c4 = db4.cursor()
 11279	
 11280	    
 11281	
 11282	    c1.execute('delete from v1 where nicko=%s', (user,))
 11283	
 11284	    c2.execute('delete from v2 where nicko=%s', (user,))    
 11285	
 11286	    c3.execute('delete from v3 where nicko=%s', (user,))        
 11287	
 11288	    c4.execute('delete from v4 where nicko=%s', (user,))
 11289	
 11290	    
 11291	
 11292	    db1.commit()
 11293	
 11294	    db2.commit()
 11295	
 11296	    db3.commit()
 11297	
 11298	    db4.commit()    
 11299	
 11300	    db1.close()
 11301	
 11302	    db2.close()
 11303	
 11304	    db3.close()
 11305	
 11306	    db4.close()    
 11307	    return 'ok'
 11308	
 11309	
 11310	
 11311	
 11312	def validateaddress(btcaddr):
 11313	    if len(btcaddr) == 34 and re.match(r'([a-zA-Z-0-9]{34})', btcaddr) and str(btcaddr)[:1] == '1' or str(btcaddr)[:1] == '3':
 11314		return True
 11315	
 11316	
 11317	#a2
 11318	@wl.route('/additem', methods=['POST', 'GET'])
 11319	@noindex
 11320	@adate
 11321	@axss
 11322	@af
 11323	def a2():
 11324	    btcheck = False
 11325	
 11326	    error = False
 11327	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
 11328	    
 11329	    if flask.request.method == 'POST':
 11330	
 11331	
 11332	#check if vendor has a monero address connected to its account
 11333	       #sprint 'post called'
 11334	
 11335		db = connectitems()
 11336		title = flask.request.form['title']
 11337		Price = flask.request.form['Price']
 11338		des = flask.request.form.get('description')
 11339		#buytype = flask.request.form['Selling']	
 11340		#<label for="Selling" class="sr-only"><p>Auction or regular selling:</p></label>
 11341		#<br>
 11342		#<select name="Selling">
 11343		#<option value="regular">Regular listed</option>
 11344		#<option value="auction">Auction</option>
 11345		#</select>        
 11346		sp = flask.request.form['shippingprice']
 11347		cat1 =flask.request.form['Category1']
 11348		cat3 = flask.request.form['Category3']
 11349		cat2 = flask.request.form['Category2']
 11350		digital = flask.request.form['digital']
 11351		amount = flask.request.form['amount']
 11352		autoresponse = flask.request.form['Autoresponse']
 11353		btcaddr = flask.request.form.get('btcaddr')
 11354		file = flask.request.files['file']
 11355		shipto = flask.request.form['Shippingto']
 11356		if digital:
 11357		    pass
 11358		else:
 11359		    digital = 'no'
 11360		   
 11361		if file and allowed_file(file.filename):
 11362		    filename = secure_filename(file.filename)
 11363		    extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
 11364		    filename = extra + filename
 11365		    file.save(wl.config['items_FOLDER'] + '/' + filename)
 11366		    ema = wl.config['items_FOLDER'] + '/' + filename
 11367		    cleans(ema)
 11368		else:
 11369		    filename = 'default.png'
 11370		  #filename = wl.config['items_FOLDER'] + '/' + filename
 11371		
 11372		entries2 = wl_entries_cache().give_me_entries()
 11373		
 11374		if not sp:
 11375		    sp = 'free'
 11376		if not btcaddr:
 11377		    btcaddr = 'nope'
 11378		if btcaddr and btcaddr !='nope':
 11379		    if not validateaddress(btcaddr):
 11380		#sprint 'not validated address'
 11381			error = 'invalid bitcoin address'
 11382			return flask.render_template('additem.html', newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
 11383		    else:
 11384			btcheck = True# not needed
 11385			pass
 11386	
 11387		lir = db.cursor()
 11388		cate = cat1 + '' + cat2 + '' + cat3
 11389		#nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11390		today = datetime.date.today()
 11391		lir.execute('insert into items(item_name, item_des, item_price, item_vendor, item_shippin_to, item_shippin_price, item_digi, item_category, item_time, item_piclink, amount_in_stock, number_sold, item_btcaddr, autoresponse) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',  (title, des, Price, nick, shipto, sp, digital, cate, today, filename, amount, 0, btcaddr, db.escape_string(autoresponse)))  
 11392		#lir.execute('insert into items(item_name, item_des, item_price, item_vendor, item_shippin_to, item_shippin_price, item_digi, item_category, item_time, item_piclink, amount_in_stock, number_sold) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',  (title, des, Price, nick, shipto, sp, digital, cate, today, filename, amount, 0))  
 11393		db.commit()
 11394		
 11395		
 11396		hee = db.cursor()
 11397		hee.execute('select item_id from items where item_name=%s and item_vendor=%s', (title, nick))
 11398		dd = hee.fetchone()
 11399		dee = dd[0]
 11400		error = '/itemz/' + str(dee)
 11401		db.close()
 11402		return flask.render_template('a2.html', newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
 11403	    entries2 = wl_entries_cache().give_me_entries()
 11404	#    db.close()
 11405	   # meh = flask.render_template
 11406	    return flask.render_template('a2.html', newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')#wl_html_cache().return_page('additem', meh)#flask.render_template('additem.html', error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
 11407	
 11408	
 11409	
 11410	
 11411	
 11412	
 11413	#mysql> alter table items add column autoresponse text not null;
 11414	
 11415	
 11416	#@wl.route('/additem', methods=['POST', 'GET'])
 11417	
 11418	#@noindex
 11419	
 11420	#@adate
 11421	
 11422	#@axss
 11423	
 11424	#@af
 11425	
 11426	#def additem():
 11427	
 11428	    #btcheck = False
 11429	
 11430	    #if not flask.session.has_key("nick"):
 11431	
 11432		#return flask.redirect(flask.url_for('choice_mode'))
 11433	
 11434	
 11435	    #if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 11436		#if not vertify_session(flask.session['special']):
 11437		    #return flask.redirect(flask.url_for('choice_mode'))
 11438		#pass
 11439	    #else:
 11440		#return flask.redirect(flask.url_for('choice_mode'))
 11441	
 11442	    #error = False
 11443	
 11444	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
 11445	
 11446	    
 11447	
 11448	    
 11449	
 11450	    #if flask.request.method == 'POST':
 11451	
 11452	
 11453		#if flask.session.has_key('special') and decode_session(flask.session["special"])[1]:
 11454		    #if not vertify_session(flask.session['special']):
 11455			#return flask.redirect(flask.url_for('choice_mode'))
 11456		    #pass
 11457		#else:
 11458		    #return flask.redirect(flask.url_for('choice_mode')) 
 11459	
 11460	##check if vendor has a monero address connected to its account
 11461	        #print 'post called'
 11462	
 11463		#db = connectitems()
 11464	
 11465		#title = flask.request.form['title']
 11466	
 11467		#des = flask.request.form['description']
 11468	
 11469		#Price = flask.request.form['Price']
 11470	
 11471		#shipto = flask.request.form['Shippingto']
 11472	
 11473		##buytype = flask.request.form['Selling']	
 11474	
 11475		##<label for="Selling" class="sr-only"><p>Auction or regular selling:</p></label>
 11476	
 11477		##<br>
 11478	
 11479		##<select name="Selling">
 11480	
 11481		##<option value="regular">Regular listed</option>
 11482	
 11483		##<option value="auction">Auction</option>
 11484	
 11485		##</select>        
 11486	
 11487		#sp = flask.request.form['shippingprice']
 11488	
 11489		#cat1 = flask.request.form['Category1']
 11490	
 11491		#cat2 = flask.request.form['Category2']
 11492	
 11493		#cat3 = flask.request.form['Category3']
 11494	
 11495		#digital = flask.request.form['digital']
 11496	
 11497		#amount = flask.request.form['amount']
 11498	
 11499		#file = flask.request.files['file']
 11500	
 11501		##autoresponse = flask.request.form['Autoresponse']
 11502		#if digital:
 11503	
 11504		    #pass
 11505	
 11506		#else:
 11507	
 11508		    #digital = 'no'
 11509	
 11510		#if file and allowed_file(file.filename):
 11511	
 11512		    #filename = secure_filename(file.filename)
 11513	
 11514		    #extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
 11515	
 11516		    #filename = extra + filename
 11517	
 11518		    #file.save(wl.config['items_FOLDER'] + '/' + filename)
 11519		    #ema = wl.config['items_FOLDER'] + '/' + filename
 11520		    #cleans(ema)
 11521	
 11522		#else:
 11523	
 11524		    #filename = 'default.png'
 11525	
 11526		    ##filename = wl.config['items_FOLDER'] + '/' + filename
 11527	
 11528		
 11529	
 11530		#btcaddr = flask.request.form['btcaddr']
 11531	
 11532		#entries2 = wl_entries_cache().give_me_entries()
 11533		
 11534	
 11535		#if not sp:
 11536	
 11537		    #sp = 'free'
 11538	
 11539		#if not btcaddr:
 11540	
 11541		    #btcaddr = 'nope'
 11542	
 11543		#if btcaddr and btcaddr !='nope':
 11544		    #print btcaddr
 11545		    #print 'got btcaddr'
 11546		    #if not validateaddress(btcaddr):
 11547			#print 'not validated address'
 11548			#error = 'invalid bitcoin address'
 11549			#return flask.render_template('additem.html', newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
 11550		    #else:
 11551			#btcheck = True# not needed
 11552			#pass
 11553		#print 'gone throw'
 11554		#lir = db.cursor()
 11555	
 11556		#cate = cat1 + '' + cat2 + '' + cat3
 11557	
 11558		#nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11559	
 11560		#today = datetime.date.today()
 11561	
 11562		#lir.execute('insert into items(item_name, item_des, item_price, item_vendor, item_shippin_to, item_shippin_price, item_digi, item_category, item_time, item_piclink, amount_in_stock, number_sold, item_btcaddr, autoresponse) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',  (title, des, Price, nick, shipto, sp, digital, cate, today, filename, amount, 0, btcaddr, db.escape_string(autoresponse)))  
 11563		##lir.execute('insert into items(item_name, item_des, item_price, item_vendor, item_shippin_to, item_shippin_price, item_digi, item_category, item_time, item_piclink, amount_in_stock, number_sold) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)',  (title, des, Price, nick, shipto, sp, digital, cate, today, filename, amount, 0))  
 11564	
 11565		#db.commit()
 11566	
 11567		
 11568	
 11569		
 11570	
 11571		#hee = db.cursor()
 11572	
 11573		#hee.execute('select item_id from items where item_name=%s and item_vendor=%s', (title, nick))
 11574	
 11575		#dd = hee.fetchone()
 11576	
 11577		#dee = dd[0]
 11578	
 11579		#error = '/itemz/' + str(dee)
 11580	
 11581		#db.close()
 11582	
 11583		#return flask.render_template('additem.html', newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
 11584	
 11585	    #entries2 = wl_entries_cache().give_me_entries()
 11586	
 11587	##    db.close()
 11588	   ## meh = flask.render_template
 11589	
 11590	    #return flask.render_template('additem.html', newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')#wl_html_cache().return_page('additem', meh)#flask.render_template('additem.html', error=error, mess=getmsgs(), entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice())#, pricetable = getpt(), soo = b.get_latest_price('USD')
 11591	
 11592	
 11593	
 11594	
 11595	
 11596	
 11597	
 11598	
 11599	@wl.route('/submitezine', methods=['POST', 'GET'])
 11600	@noindex
 11601	@axss
 11602	@adate
 11603	@af
 11604	def submitezine():
 11605	    error = False
 11606	    if not flask.session.has_key("nick"):
 11607		return flask.redirect(flask.url_for('choice_mode')) 
 11608	    if flask.session.has_key('special') and flask.session:
 11609		if not vertify_session(flask.session['special']):
 11610		    return flask.redirect(flask.url_for('choice_mode'))
 11611		pass
 11612	    else:
 11613		return flask.redirect(flask.url_for('choice_mode'))     
 11614	    if flask.request.method == 'POST':
 11615		if not flask.session.has_key("nick"):
 11616		    return flask.redirect(flask.url_for('choice_mode')) 
 11617		if flask.session.has_key('special') and flask.session:
 11618		    if not vertify_session(flask.session['special']):
 11619			return flask.redirect(flask.url_for('choice_mode'))
 11620		    pass
 11621		else:
 11622		    return flask.redirect(flask.url_for('choice_mode')) 	
 11623		nick = decode_session(flask.session["special"])[0]
 11624		title = flask.request.form.get('title')
 11625		zine = flask.request.form.get('Message')
 11626		bake = 'title:'+title+"-newline-"+'  zine:  '+zine
 11627		db = connectsupport()
 11628		gd = db.cursor()
 11629		token = gettoken()
 11630		ttitle = 'ezine from '+nick
 11631		gd.execute('insert into support(title, msg, respond, awnserd, readd, token, fr0m) value(%s, %s, %s, %s, %s, %s, %s)', (ttitle, bake, 'no', 'no', 'no', token, nick))
 11632		db.commit()	
 11633		db.close()
 11634		error = 'Your zine has been submited and will be looked at shortly'
 11635	    
 11636	    return flask.render_template('submit_ezine.html', entries2=wl_entries_cache().give_me_entries(), mess=getmsgs(), newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), error=error, soo = searchingfor().latestbtcprice())
 11637	
 11638	
 11639	
 11640	
 11641	
 11642	
 11643	
 11644	
 11645	
 11646	
 11647	@wl.route('/chargen')    
 11648	
 11649	@noindex
 11650	
 11651	@axss
 11652	
 11653	@adate
 11654	
 11655	@af
 11656	
 11657	def chargen():
 11658	
 11659	    le = base64.b64encode(urandom(57)).replace('/', '').replace('=', '')
 11660	
 11661	
 11662	
 11663	    return '''
 11664	
 11665	<html>    
 11666	
 11667	<head>
 11668	
 11669	        <title>Chargen</title>
 11670	
 11671	  
 11672	
 11673	       </head>
 11674	
 11675	    <center>
 11676	
 11677	 <h2>Warezloader's character generation</h2>
 11678	
 11679	<br>
 11680	
 11681	<br>
 11682	
 11683	<br>
 11684	
 11685	<pre> 57 bytes randomly generated =
 11686	
 11687	     ''' + le
 11688	
 11689	
 11690	
 11691	
 11692	
 11693	#ur btc addresses
 11694	
 11695	
 11696	
 11697	
 11698	
 11699	#
 11700	
 11701	#send in bugs
 11702	
 11703	#@wl.route('/submit/bugs', methods=['GET', 'POST'])
 11704	
 11705	#def bugssubmit():
 11706	
 11707	# if flask.request.method == 'POST':
 11708	
 11709	#        error = 'Bug Submited, thank you!'
 11710	
 11711	#        nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11712	
 11713	#        title = 'Bug from: ' + nick #send to support
 11714	
 11715	#
 11716	
 11717	#        return flask.render_template('', mess=getmsgs(), entries2=entries2, error=error)
 11718	
 11719	#
 11720	
 11721	# return flask.render_template('', mess=getmsgs(), entries2=entries2)
 11722	
 11723	
 11724	
 11725	
 11726	
 11727	#chmod a special usr
 11728	def connectwault():
 11729	    return MySQLdb.connect(host='localhost', user='wkeepr', passwd='lGNfCyK97pKk2NnGgObJl0tfDx72A+IY6CmN6HBPqo5hVaaYfnjpgm4ZrvUUHAxsWRCvV2kT6st', db='w_vault')
 11730	
 11731	
 11732	def push2wault(nick):
 11733	    db = connectwault()
 11734	    s1, s2, s3, s4, s5, s6 = db.cursor()*6
 11735	    s1.execute('select address from coinz where usr=%s', (nick,))
 11736	    s2.execute('select paid from coinz where usr=%s', (nick,))
 11737	    s3.execute('select pk from coinz where usr=%s', (nick,))
 11738	    s4.execute('select pbk from coinz where usr=%s', (nick,))
 11739	    addr = s1.fetchone()[0] 
 11740	    paid = s2.fetchone()[0]
 11741	    pk = s3.fetchone()[0]
 11742	    pbk = s4.fetchone()[0]
 11743	    s5.execute("insert into w(nicko, pbk, pk, payed, btcaddr) value(%s, %s, %s, %s, %s)", (nick, pbk, pk, paid, addr))
 11744	    db.commit()
 11745	    logit = logging.getLogger(name='push2wault')
 11746	    s6.execute('delete from coinz where address=%s and nick=%s', (addr, nick))
 11747	    logit.debug('pushed coins to wault!')
 11748	    db.commit()
 11749	    db.close()
 11750	
 11751	
 11752	def ship2mothergoose(address, pk, pbk, balance, nick, typeof):
 11753	    typeof = typeof + '_from_' + nick
 11754	    db = connectmycoinz()
 11755	    blerp = db.cursor()
 11756	    blerp.execute('insert into mycoinz(address, typeof, pk, pbk, balance) value(%s, %s, %s, %s, %s)', (address, typeof, pk, pbk, balance))
 11757	    db.commit()
 11758	   #sprint 'mother goose got some coinz!!!!!!'
 11759	    db.close()
 11760	
 11761	
 11762	def validate_discount(discountcode):
 11763	    P = False
 11764	    db = connectdis()
 11765	    o = db.cursor()
 11766	    o.execute('select amounts, active_until, amounts, used_amount from dicount_codes where the_code=%s', (discountcode,))
 11767	    m = o.fetchone()
 11768	   #sprint m
 11769	    if not m:
 11770		P = False
 11771	    else:
 11772		r,d = db.cursor(),db.cursor()
 11773		if datetime.date.today() < m[1]:
 11774		   #sprint 'date is good'
 11775		    r.execute('update dicount_codes set used_amount=used_amount+1 where the_code=%s', (discountcode,))
 11776		    P = True
 11777		    if m[2] == 'unlimited':
 11778			print 'unlimited token'
 11779		    else:
 11780		#sprint 'not ulimited!'
 11781			if int(m[2]) < int(m[3]):
 11782			#sprint 'amounts:' + m[2]
 11783			#sprint 'used:' + m[3]
 11784				d.execute('update dicount_codes set used_amount=used_amount+1 where the_code=%s', (discountcode,))
 11785				P = True
 11786		else:
 11787		   #sprint 'removing it - bad date'
 11788		    r.execute('delete from dicount_codes where the_code=%s', (discountcode,))
 11789		    P = False
 11790		db.commit()
 11791	    db.close()
 11792	    return P
 11793	
 11794	#todo!!!
 11795	#change b.convert_to_btc(btcprice, 'USD') to a pure cache function
 11796	
 11797	
 11798	#enter disount code if any
 11799	
 11800	#establish special session, get account balance, if account balance is x or more return vendor account
 11801	
 11802	#upgrade usr account
 11803	
 11804	@wl.route('/upgrade', methods=['POST', 'GET'])
 11805	@wl.route('/upgradeaccount', methods=['POST', 'GET'])
 11806	@noindex
 11807	
 11808	@adate
 11809	
 11810	@axss
 11811	
 11812	@af
 11813	
 11814	def upgrade_ac():    
 11815	
 11816	    if not flask.session.has_key("nick"): # and role = user
 11817	
 11818		return flask.redirect(flask.url_for('choice_mode'))     
 11819	
 11820	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == "user":
 11821		if not vertify_session(flask.session['special']):
 11822		    return flask.redirect(flask.url_for('choice_mode'))
 11823		pass
 11824	    else:
 11825		return flask.redirect(flask.url_for('choice_mode'))     
 11826	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11827	
 11828	    db = connectcoinz()
 11829	
 11830	    db2 = connectvens()
 11831	
 11832	    sd = db.cursor()
 11833	
 11834	    sd.execute('select address, pk, pbk from coinz where usr=%s', (nick,))
 11835	
 11836	    address = sd.fetchone()
 11837	
 11838	    address = address[0]
 11839	
 11840	    mess = getmsgs() 
 11841	
 11842	    price = globalvendorprice#100
 11843	
 11844	    btcprice = float(price)
 11845	
 11846	    btcprice = searchingfor().convertusd2btc(btcprice)#b.convert_to_btc(btcprice, 'USD') 
 11847	
 11848	    ee = db2.cursor()
 11849	
 11850	    ee.execute('select role from vens where nick=%s', (nick,))
 11851	
 11852	    role = ee.fetchone()
 11853	
 11854	    role = role[0]    
 11855	
 11856	    entries2 = wl_entries_cache().give_me_entries()
 11857	
 11858	    
 11859	
 11860	    if flask.request.method == 'POST':
 11861	
 11862		if flask.session.has_key('special') and flask.session:
 11863		    if not vertify_session(flask.session['special']):
 11864			return flask.redirect(flask.url_for('choice_mode'))
 11865		    pass
 11866		else:
 11867		    return flask.redirect(flask.url_for('choice_mode')) 
 11868		bler = False
 11869		error = False
 11870		db = connectcoinz()
 11871	
 11872		db2 = connectvens()
 11873		#progress = 'balance '
 11874	
 11875		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11876	
 11877		sa = flask.request.form['discount']
 11878	
 11879		ss = db.cursor()
 11880	
 11881		sw = db2.cursor()
 11882	
 11883		ss.execute('select address from coinz where usr=%s', (nick,))
 11884	
 11885		bla = ss.fetchone()
 11886	
 11887		bla = bla[0]
 11888	
 11889		bla = str(bla)
 11890	
 11891		#bla = ''
 11892	
 11893		#verify that user has a pgp key
 11894	
 11895	
 11896	
 11897		sw.execute('select pgp from vens where nick=%s', (nick,))
 11898	
 11899		pver = sw.fetchone()
 11900	
 11901		if pver:
 11902	
 11903		    pver = pver[0]
 11904	
 11905		else:
 11906	
 11907		    pver = 0
 11908	
 11909		if len(pver) < 5:#pgpkey:
 11910	
 11911		   #sprint 'no pgp key...'
 11912		    if not error:	
 11913			error = 'you need a pgp key to becomme a vendor'
 11914		    else:
 11915			error = ', you need a pgp key to becomme a vendor'
 11916		    return flask.render_template('upgrade.html', newsentries=wl_html_cache().get_news(), entries2=entries2, mess=getmsgs(), error=error)
 11917	
 11918	#nono	
 11919		#if sa:
 11920		    #if not validate_discount(sa):
 11921			#error = 'invalid discount code'
 11922		    #else:
 11923			#print 'bler set!'
 11924			#bler = True
 11925			#error = 'ur account has been upgraded'
 11926			#pass	
 11927		ee = db2.cursor()
 11928	
 11929		mess = getmsgs() 
 11930	
 11931		ee.execute('select role from vens where nick=%s', (nick,))
 11932	
 11933		role = ee.fetchone()
 11934	
 11935		role = role[0]	
 11936	
 11937	#sprint 'bla: ', bla
 11938	#sprint len(bla)
 11939		error = 'calm down neals'#check_b3(bla)
 11940	
 11941		entries2 = wl_entries_cache().give_me_entries()
 11942	
 11943		#stcc = lkk - Decimal(0.00001)
 11944	
 11945		#error = 'un'
 11946	
 11947		#progress = ''
 11948		db.close()
 11949		db2.close()
 11950		if bler:
 11951		    progress = 'yupp'
 11952		   #sprint 'progress set!'
 11953		else:
 11954	
 11955		    progress = verify_payment(bla)#, btcprice)#:'yupp'#
 11956		    
 11957	#sprint progress
 11958	
 11959		if progress == "yupp":
 11960		   #sprint 'upgradeing the account!'
 11961		    db = connectcoinz()
 11962		    db2 = connectvens()	    
 11963	
 11964		    dgcom = db2.cursor()
 11965	
 11966		    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 11967	
 11968		    entries2 = wl_entries_cache().give_me_entries()
 11969	
 11970		    dgcom.execute('update vens set role=%s where nick=%s', ('vendor', nick))
 11971	
 11972		    db.commit()
 11973	
 11974		    db.close()
 11975		    db2.commit()
 11976	
 11977		    db = connectmycoinz()
 11978		    bl = db.cursor()
 11979		    bl.execute('select address, pk, pbk from coinz where usr=%s', (nick,))
 11980		    weq = bl.fetchall()
 11981		    for line in weq:
 11982			sd = db.cursor()
 11983			sd.execute('insert into mycoinz(address, pk, pbk) value(%s, %s, %s)', (line[0], line[1], line[2]))
 11984			db.commit()	    
 11985	
 11986		    bal = db.cursor()
 11987		    bal.execute('delete from coinz where usr=%s', (nick,))
 11988		    db.commit()
 11989		    db.close()
 11990		    db2.close()
 11991		    l = logging.getLogger('info')
 11992		    l.info('new vendor, new coinz')
 11993		    mess = getmsgs() 
 11994	
 11995		    return flask.render_template('vwelcome.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), mess=mess, entries2=entries2)
 11996	
 11997		else:
 11998	
 11999		    error = 'not paid'
 12000	
 12001		    #error = "yes"
 12002	
 12003		    #pass
 12004	
 12005		#else:
 12006	
 12007		    #error = 'nope'	    
 12008		    #pass
 12009	#	db.close()
 12010	#	db2.close()
 12011	
 12012		return flask.render_template('upgrade.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), mess=mess, role=role, progress=progress, address=address, btcprice=btcprice, price=price, entries2=entries2, error=error)
 12013	
 12014		  #    if not flask.session.has_key("nick"):
 12015	
 12016	#	return flask.redirect(flask.url_for('choice_mode'))  
 12017	
 12018	    
 12019	
 12020	 #   elif flask.session.has_key('role') and flask.session['role'] == 'user':
 12021	
 12022	#	error = False
 12023	
 12024		
 12025	
 12026		
 12027	
 12028		#generate a address when user signs up and destroy it when payment is successfull
 12029	
 12030		
 12031	
 12032	#	return flask.render_template('upgrade.html', emnick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick']),)
 12033	
 12034	    
 12035	
 12036	 #   elif flask.session.has_key('role') and flask.session['role'] == 'venor':
 12037	
 12038	#	return flask.redirect(flask.url_for(str(flask.session["role"])))
 12039	
 12040	    #return flask.render_template('upgrade.html', emnick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick']),)
 12041	
 12042	    db.close()
 12043	    db2.close()
 12044	    return flask.render_template('upgrade.html', newsentries=wl_html_cache().get_news(), entries2=entries2, pricetable=searchingfor().getpt(), soo = searchingfor().latestbtcprice(),  mess=mess, role=role, address=address, btcprice=btcprice, price=price)
 12045	
 12046		  
 12047	
 12048	    
 12049	
 12050	#buy sign in token    
 12051	
 12052	    
 12053	
 12054	    
 12055	
 12056	    
 12057	
 12058	#state ur buisness
 12059	
 12060	
 12061	
 12062	@wl.route('/support', methods=['POST', 'GET'])
 12063	@noindex
 12064	@axss
 12065	@adate
 12066	@af
 12067	def support():
 12068	
 12069	    if not flask.session.has_key("nick"):
 12070	
 12071		return flask.redirect(flask.url_for('choice_mode')) 
 12072	
 12073	    if flask.session.has_key('special') and flask.session:
 12074		if not vertify_session(flask.session['special']):
 12075		    return flask.redirect(flask.url_for('choice_mode'))
 12076		pass
 12077	    else:
 12078		return flask.redirect(flask.url_for('choice_mode')) 
 12079	    db = connectvens()
 12080	
 12081	    ee = db.cursor()
 12082	
 12083	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 12084	
 12085	    ee.execute('select role from vens where nick=%s', (nick,))
 12086	
 12087	    role = ee.fetchone()
 12088	
 12089	    role = role[0]    
 12090	
 12091	    if flask.request.method == 'POST':
 12092	
 12093		if flask.session.has_key('special') and flask.session:
 12094		    if not vertify_session(flask.session['special']):
 12095			return flask.redirect(flask.url_for('choice_mode'))
 12096		    pass
 12097		else:
 12098		    return flask.redirect(flask.url_for('choice_mode')) 
 12099		db = connectsupport()
 12100	
 12101		db2 = connectvens()
 12102		title = flask.request.form.get('title')
 12103	
 12104		msg = flask.request.form.get('Message')
 12105	
 12106		gd = db.cursor()
 12107	
 12108		token = gettoken()
 12109	
 12110		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 12111	
 12112		gd.execute('insert into support(title, msg, respond, awnserd, readd, token, fr0m) value(%s, %s, %s, %s, %s, %s, %s)', (title, msg, 'no', 'no', 'no', token, nick))
 12113	
 12114		db.commit()
 12115	
 12116		#db.close()
 12117	
 12118		
 12119	
 12120		msg = getmsgs()
 12121	
 12122		ee = db2.cursor()
 12123	
 12124		ee.execute('select role from vens where nick=%s', (nick,))
 12125	
 12126		role = ee.fetchone()
 12127	
 12128	
 12129		role = role[0]	
 12130	
 12131		error = 'support have been reached we will reply shortly'
 12132	
 12133		db.close()
 12134		db2.close()
 12135		return flask.render_template('support.html', newsentries=wl_html_cache().get_news(), entries2=wl_entries_cache().give_me_entries(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, error=error, mess=msg)
 12136	
 12137	    
 12138	
 12139	    
 12140	
 12141	    error = False
 12142	
 12143	    entries2 = wl_entries_cache().give_me_entries()
 12144	    
 12145	
 12146	    #no error, only on nonstatic post
 12147	    mess = getmsgs()    
 12148	    db.close()
 12149	    #db2.close()
 12150	
 12151	    return flask.render_template('support.html', newsentries=wl_html_cache().get_news(), emnick=nick, entries2=entries2, pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, error=error, mess=mess)
 12152	
 12153	    
 12154	
 12155	#info n contact
 12156	
 12157	
 12158	
 12159	#@wl.route('/contact')
 12160	
 12161	#@noindex
 12162	
 12163	#@axss
 12164	
 12165	#@adate
 12166	
 12167	#@af
 12168	
 12169	#def contact():
 12170	
 12171	    #if not flask.session:
 12172	
 12173		#return flask.redirect(flask.url_for('choice_mode'))    
 12174	
 12175	
 12176	
 12177	    #pricetable = getpt()
 12178	
 12179	    #mess = getmsgs()    
 12180	
 12181	    #return flask.render_template('contact.html', mess=mess, pricetable=pricetable) #return redir to info?
 12182	
 12183	    
 12184	
 12185	    
 12186	
 12187	    
 12188	
 12189	    
 12190	
 12191	@wl.route('/freeross')
 12192	
 12193	@noindex
 12194	
 12195	@adate
 12196	
 12197	@axss
 12198	
 12199	@af
 12200	
 12201	def freeross():
 12202	
 12203	    return '''
 12204	
 12205	<html>    
 12206	
 12207	    <head>
 12208	
 12209	    <title>Free Ross</title></head>
 12210	
 12211	    <center><body  text="00FF00" bgcolor="#000000">
 12212	
 12213	    
 12214	
 12215	    <code>
 12216	
 12217	Some of us rember how we fought for kevin mitnick<br>
 12218	
 12219	the free kevin movement<br>
 12220	
 12221	we defaced sites in protest!<br>
 12222	
 12223	We are reclaiming this action<br>
 12224	
 12225	We are demanding that the united states goverment to drop<br>
 12226	
 12227	all charges and release Ross Ulbricht<br>
 12228	
 12229	    
 12230	
 12231	    </code>
 12232	
 12233	    </body>
 12234	
 12235	    <html>
 12236	
 12237	    '''
 12238	
 12239	
 12240	
 12241	@wl.route('/get_started', methods=['GET'])
 12242	@noindex
 12243	@adate
 12244	@axss
 12245	@af    
 12246	
 12247	def get_started():
 12248	    if flask.session.has_key('special') and flask.session:
 12249		if not vertify_session(flask.session['special']):
 12250		    return flask.redirect(flask.url_for('choice_mode'))
 12251		pass
 12252	    else:
 12253		return flask.redirect(flask.url_for('choice_mode')) 
 12254	
 12255	    entries2 = wl_entries_cache().give_me_entries()
 12256	    meh = flask.render_template
 12257	    return wl_html_cache().return_page('get_started', meh)#flask.render_template('get_started.html', pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), entries2=entries2)
 12258	    
 12259	
 12260	    
 12261	
 12262	    
 12263	
 12264	    
 12265	
 12266	    
 12267	
 12268	@wl.route('/contact')
 12269	
 12270	@wl.route('/info')
 12271	
 12272	@noindex
 12273	
 12274	@adate
 12275	
 12276	#@cache.cached(timeout=50)
 12277	
 12278	@axss
 12279	
 12280	@af
 12281	
 12282	def info():
 12283	
 12284	    if flask.session.has_key('special') and flask.session:
 12285		if not vertify_session(flask.session['special']):
 12286		    return flask.redirect(flask.url_for('choice_mode'))
 12287		pass
 12288	    else:
 12289		return flask.redirect(flask.url_for('choice_mode')) 
 12290	    if not flask.session.has_key("nick"):
 12291	
 12292		return flask.redirect(flask.url_for('choice_mode'))    
 12293	
 12294	    
 12295	
 12296	    #db = connect()
 12297	
 12298	    ##pricetable = getpt()
 12299	
 12300	    #mess = getmsgs()    
 12301	
 12302	    #ee = db.cursor()
 12303	
 12304	    #nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 12305	
 12306	    #ee.execute('select role from vens where nick=%s', (nick,))
 12307	
 12308	    #role = ee.fetchone()
 12309	
 12310	    #role = role[0]    
 12311	
 12312	    #entries2 = wl_entries_cache().give_me_entries()
 12313	
 12314	    #return flask.render_template('info.html', pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, entries2=entries2, mess=mess)
 12315	
 12316	    meh = flask.render_template
 12317	    return wl_html_cache().return_page('info', meh)
 12318	
 12319	
 12320	
 12321	#stats
 12322	
 12323	#we are currently x active members
 12324	
 12325	#@wl.route('/stats')
 12326	
 12327	#@noindex
 12328	
 12329	#@axss
 12330	
 12331	#@adate
 12332	
 12333	#@af
 12334	
 12335	#def statss():
 12336	
 12337	    #if not flask.session.has_key("nick"):
 12338	
 12339		#return flask.redirect(flask.url_for('choice_mode')) 
 12340	    #if flask.session.has_key('special') and flask.session:
 12341		#if not vertify_session(flask.session['special']):
 12342		    #return flask.redirect(flask.url_for('choice_mode'))
 12343		#pass
 12344	    #else:
 12345		#return flask.redirect(flask.url_for('choice_mode'))     
 12346	
 12347	    
 12348	
 12349	    #return flask.render_template('stats.html')
 12350	
 12351	
 12352	
 12353	#blakey
 12354	
 12355	
 12356	
 12357	
 12358	
 12359	
 12360	
 12361	def sign(cookie):
 12362	
 12363	    cookie = str(cookie).encode('utf-8')
 12364	
 12365	    SK5 = wl_entries_cache().get_s5()
 12366	    h = blake2b(data=cookie, digest_size=64, key=SK5)
 12367	
 12368	    return h.hexdigest()
 12369	
 12370	
 12371	
 12372	def verify(cookie, sig):
 12373	
 12374	    good_sig = sign(cookie)
 12375	
 12376	    if len(sig) != len(good_sig):
 12377	
 12378		return False
 12379	
 12380	    # Use constant-time comparison to avoid timing attacks.
 12381	
 12382	    result = 0
 12383	
 12384	    for x, y in zip(sig, good_sig):
 12385	
 12386		result |= ord(x) ^ ord(y)
 12387	
 12388	    return result == 0
 12389	
 12390	
 12391	
 12392	
 12393	
 12394	#todo?  - will generate more value , defined as trust
 12395	
 12396	@wl.route('/top10')
 12397	@noindex
 12398	@axss
 12399	@adate
 12400	@af
 12401	def topvendors():
 12402	
 12403	    #if not flask.session.has_key("nick"):
 12404	
 12405		#return flask.redirect(flask.url_for('choice_mode'))  
 12406	
 12407	    #if flask.session.has_key('special') and flask.session:
 12408		#if not vertify_session(flask.session['special']):
 12409		    #return flask.redirect(flask.url_for('choice_mode'))
 12410		#pass
 12411	    #else:
 12412		#return flask.redirect(flask.url_for('choice_mode'))     
 12413	
 12414	    #db = connect()
 12415	
 12416	    db = connectvens()
 12417	    db2 = connectitems()
 12418	    lg,gl = db.cursor(),db2.cursor()#view vendors shop
 12419	
 12420	#    lg.execute('select nick, amountitems, ven_rate from vens')
 12421	    gl.execute('select item_id, item_name, number_sold, item_vendor from items order by convert(number_sold, unsigned integer) desc limit 7')
 12422	    entries = [dict(theid=row[0], name=row[1], numbersold=row[2], vendor=row[3]) for row in gl.fetchall()]
 12423	    meh = flask.render_template
 12424	    db2.close()
 12425	    db.close()
 12426	
 12427	    return meh('toplist.html', entries=entries, soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), mess=getmsgs(), entries2 = wl_entries_cache().give_me_entries())#wl_html_cache().return_page('toplist.html', meh)
 12428	
 12429	
 12430	
 12431	
 12432	
 12433	
 12434	
 12435	def senduser(thenick, sender, message):
 12436	
 12437	    ton = str(thenick)
 12438	
 12439	    fron = str(sender)
 12440	
 12441	    msg = str(message)
 12442	
 12443	    db = connectinbox()
 12444	
 12445	    title = 'Order Message from:' + fron
 12446	
 12447	    token = gimmetoken()
 12448	
 12449	    thel = db.cursor()
 12450	
 12451	    #print 'thenick is' + thenick
 12452	    thel.execute('insert into inbox (sender, send, msg, hread, token, title) values(%s, %s, %s, %s, %s, %s)', (fron, ton, msg, 'no', token, title))
 12453	
 12454	    db.commit()
 12455	
 12456	    db.close()
 12457	
 12458	    
 12459	
 12460	
 12461	
 12462	def senduser2(the_is_nick, sender, message, title, note='empty'):
 12463	
 12464	   #sprint 'msg input from ' + the_is_nick
 12465	   #sprint (message, the_is_nick)
 12466	    ton = str(the_is_nick)
 12467	
 12468	    fron = str(sender)
 12469	
 12470	    msg = str(message)
 12471	
 12472	    title = str(title)
 12473	
 12474	    db = connectinbox()
 12475	
 12476	    #title = 'Order Message from:' + fron
 12477	
 12478	    token = gimmetoken()
 12479	
 12480	    thel = db.cursor()
 12481	
 12482	    thel.execute('insert into inbox (sender, send, msg, hread, token, title, note) values(%s, %s, %s, %s, %s, %s, %s)', (fron, ton, msg, 'no', token, title, note))
 12483	
 12484	   #sprint 'sent msg to' + str(the_is_nick)
 12485	    db.commit()
 12486	
 12487	    db.close()
 12488	
 12489	    
 12490	
 12491	    return True
 12492	
 12493	
 12494	
 12495	#items edit
 12496	
 12497	@wl.route('/vendorpanel/itemz/<myitem>/')
 12498	
 12499	@wl.route('/vendorpanel/itemz/<myitem>', methods=['POST', 'GET'])
 12500	
 12501	@noindex
 12502	
 12503	@axss
 12504	
 12505	@adate
 12506	
 12507	@af
 12508	
 12509	def edititem(myitem):
 12510	    error = False
 12511	
 12512	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 12513		if not vertify_session(flask.session['special']):
 12514		    return flask.redirect(flask.url_for('choice_mode'))
 12515		pass
 12516	    else:
 12517		return flask.redirect(flask.url_for('choice_mode'))
 12518	   
 12519	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 12520	    
 12521	    db = connectitems()
 12522	    
 12523	    lulls,sully = db.cursor(),db.cursor()
 12524	    sully.execute('select item_id from items where item_id=%s and item_vendor=%s', (myitem,nick))
 12525	    sf = sully.fetchone()
 12526	    #print 'sf:'
 12527	    if not sf:
 12528		db.close()
 12529		return flask.render_template('manageitem.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), error='item not found')
 12530		
 12531	    lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, number_sold from items where item_vendor=%s and item_id=%s', (nick, myitem))
 12532	    entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], sold=row[9]) for row in lulls.fetchall()]
 12533	    entries2 = wl_entries_cache().give_me_entries()
 12534	    
 12535	    if flask.request.method == 'POST':
 12536	
 12537		if flask.session.has_key('special') and flask.session:
 12538		    if not vertify_session(flask.session['special']):
 12539			return flask.redirect(flask.url_for('choice_mode'))
 12540		    pass
 12541		else:
 12542			return flask.redirect(flask.url_for('choice_mode'))	
 12543		
 12544		    
 12545		nick = decode_session(flask.session["special"])[0]	    
 12546		db = connectitems()
 12547	
 12548		#verify that user owns item
 12549		uc = db.cursor()
 12550		uc.execute('select item_name from items where item_id=%s and item_vendor=%s', (myitem,nick))
 12551		if not uc.fetchone():
 12552		    db.close()
 12553		    return flask.render_template('manageitem.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), error='item not found')
 12554		 	
 12555		
 12556		de = flask.request.form.get('delete')
 12557		shipto = flask.request.form.get('Shippingto')	
 12558		sprice = flask.request.form['sprice']	
 12559		price = flask.request.form['price']
 12560		digital = flask.request.form['digital']
 12561		name = flask.request.form['item name']	
 12562		des = flask.request.form['des']
 12563		btc = flask.request.form['btcaddr']
 12564		
 12565		file = flask.request.files['file']
 12566		error = 'item updated'
 12567	
 12568		sd, ds,cc,pc,ps,dc,cd,nd,dd,bd = db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor(),db.cursor()
 12569		cat = flask.request.form.get('Category')
 12570		
 12571		if de == 'Yes':#if we delete it then there is no need for extra checks
 12572		    sd.execute('delete from items where item_id=%s and item_vendor=%s', (myitem, nick))
 12573		    db.commit()
 12574		    error = 'item deleted'
 12575		else:
 12576		    if file and allowed_file(file.filename):
 12577			filename = secure_filename(file.filename)
 12578			extra = str(base64.b64encode(urandom(20))).replace('=', '').replace('+', '').replace('/', '')
 12579			filename = extra + filename
 12580			file.save(wl.config['items_FOLDER'] + '/' + filename)
 12581			ema = wl.config['items_FOLDER'] + '/' + filename
 12582			cleans(ema)#newupdate, items.html,d 
 12583			ds.execute('update items set item_piclink=%s where item_id=%s', (filename,myitem))
 12584			db.commit()
 12585			error += ',item picture updated'
 12586		    else:
 12587			pass
 12588		    
 12589		    if btc:
 12590			bd.execute('update items set item_btcaddr=%s where item_id=%s and item_vendor=%s', (btc, myitem, nick))
 12591			db.commit()
 12592			error += ',bitcoin address set'
 12593	    
 12594		    if cat == 'none':
 12595			pass
 12596		    else:
 12597			if cat:
 12598			    cc.execute('update items set item_category=%s where item_id=%s', (cat,myitem))
 12599			    db.commit()
 12600			    error += ',category has been updated'
 12601	    
 12602		    if des:    
 12603			dd.execute('update items set item_des=%s where item_id=%s', (des,myitem))
 12604			db.commit()
 12605			error += ',description has been updated'	    
 12606	    
 12607	    
 12608		    if name:    
 12609			nd.execute('update items set item_name=%s where item_id=%s', (name,myitem))
 12610			db.commit()
 12611			error += ',name has been updated'	    
 12612	    
 12613		    if shipto:    
 12614			pc.execute('update items set item_shippin_to=%s where item_id=%s', (shipto,myitem))
 12615			db.commit()
 12616			error += ',shipping destination has been updated'	    
 12617		    
 12618		    if price:    
 12619			pc.execute('update items set item_price=%s where item_id=%s', (price,myitem))
 12620			db.commit()
 12621			error += ',price has been updated'	
 12622	    
 12623		    if sprice:    
 12624			ps.execute('update items set item_shippin_price=%s where item_id=%s', (sprice,myitem))
 12625			db.commit()
 12626			error += ',shipping price has been updated'	    
 12627		    
 12628		    if digital:    
 12629			dc.execute('update items set item_digi=%s where item_id=%s', (digital,myitem))
 12630			db.commit()
 12631			error += ',digital link has been updated'				    
 12632		    
 12633	#		    filename = 'TUQ8Z52H2i98nYA4UNmWLxPC5O0default.png	    
 12634		    
 12635		#error += ', item has been successfully updated' 
 12636		db.close()
 12637		return flask.render_template('manageitem.html', error=error, soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), entries=entries, emnick=nick, mess=getmsgs(), entries2=entries2)
 12638		
 12639	    #add condom
 12640	
 12641	    
 12642	
 12643	    #lulls = db.cursor()
 12644	
 12645	    #lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, number_sold from items where item_vendor=%s and item_id=%s', (nick, myitem))
 12646	
 12647	    #entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], sold=row[9]) for row in lulls.fetchall()]
 12648	
 12649		    
 12650	    db.close()
 12651	
 12652	    return flask.render_template('manageitem.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), entries=entries, emnick=nick, mess=getmsgs(), entries2=entries2)
 12653	
 12654	
 12655	
 12656	
 12657	
 12658	#my items
 12659	
 12660	@wl.route('/vendorpanel/itemz')
 12661	
 12662	@wl.route('/vendorpanel/itemz/', methods=['POST', 'GET'])
 12663	
 12664	@noindex
 12665	
 12666	@axss
 12667	
 12668	@adate
 12669	
 12670	@af
 12671	
 12672	def myitems():
 12673	
 12674	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == "vendor":
 12675		if not vertify_session(flask.session['special']):
 12676		    return flask.redirect(flask.url_for('choice_mode'))
 12677		pass
 12678	    else:
 12679		return flask.redirect(flask.url_for('choice_mode'))     
 12680	    entries2 = wl_entries_cache().give_me_entries()
 12681	
 12682	    db = connectitems()
 12683	
 12684	    ret = db.cursor()
 12685	
 12686	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 12687	
 12688	    ret.execute('select item_id, item_name, item_price, number_sold, amount_in_stock, item_piclink from items where item_vendor=%s', (nick,))
 12689	
 12690	    entries = [dict(item_id=row[0], item_name=row[1], item_price=row[2], number_sold=row[3], amount=row[4], piclink=row[5]) for row in ret.fetchall()]
 12691	
 12692	    db.close()
 12693	
 12694	    return flask.render_template('myitems.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), entries=entries, emnick=nick, entries2=entries2, mess=getmsgs())
 12695	
 12696	#orders
 12697	
 12698	
 12699	
 12700	
 12701	
 12702	#orders
 12703	
 12704	
 12705	
 12706	#edit/update order 
 12707	
 12708	@wl.route('/myorders/<myorder>', methods=['POST', 'GET'])
 12709	
 12710	@noindex
 12711	
 12712	@axss
 12713	
 12714	@adate
 12715	
 12716	@af
 12717	
 12718	def manageorder(myorder):
 12719	
 12720	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 12721		if not vertify_session(flask.session['special']):
 12722		    return flask.redirect(flask.url_for('choice_mode'))
 12723		pass
 12724	    else:
 12725		return flask.redirect(flask.url_for('choice_mode')) 
 12726	    #dissallow normies
 12727	
 12728	
 12729	    if flask.request.method == 'POST':
 12730	
 12731		if flask.session.has_key('special') and flask.session:
 12732		    if not vertify_session(flask.session['special']):
 12733			return flask.redirect(flask.url_for('choice_mode'))
 12734		    pass
 12735		else:
 12736			return flask.redirect(flask.url_for('choice_mode'))	
 12737	
 12738		sbm = flask.request.form['sbm']
 12739	
 12740		sd = flask.request.form['Shippingdetails']
 12741	
 12742		shipped = flask.request.form.get('shipped')
 12743	
 12744		finished = flask.request.form.get('finished')
 12745	
 12746	
 12747		nick = str(flask.escape(flask.session['nick']))  
 12748	
 12749		#btcaddr = flask.request.form['btcaddr']
 12750	
 12751		db = connectorders()
 12752	
 12753		myorder = str(myorder)
 12754	
 12755		
 12756	
 12757		if finished:
 12758	
 12759		    if finished == "yes":
 12760	
 12761			de = db.cursor()
 12762	
 12763			de.execute('update orders set status=%s where order_name=%s and vendor=%s', ('finished', myorder, nick))
 12764	
 12765			db.commit()
 12766	
 12767			#db.close()
 12768	
 12769			
 12770	
 12771		    #fi = 'yes'
 12772	
 12773		        error = 'order is finished! '
 12774	
 12775			pass
 12776	
 12777		    else:
 12778	
 12779			de = db.cursor()
 12780	
 12781			#fi = False
 12782	
 12783			de.execute('update orders set status=%s where order_name=%s and vendor=%s', ('not finished', myorder, nick))
 12784	
 12785			db.commit()
 12786	
 12787			#db.close()
 12788	
 12789			
 12790	
 12791			error = 'not finished, '
 12792	
 12793			pass		
 12794	
 12795		else:
 12796	
 12797		    de = db.cursor()
 12798	
 12799		    #fi = False
 12800	
 12801		    de.execute('update orders set status=%s where order_name=%s and vendor=%s', ('not finished', myorder, nick))
 12802	
 12803		    db.commit()
 12804	
 12805		    #db.close()
 12806	
 12807		    
 12808	
 12809		    error = 'not finished, '
 12810	
 12811		    pass
 12812	
 12813		if shipped:
 12814	
 12815		    if shipped == 'yes':
 12816	
 12817			de = db.cursor()
 12818	
 12819			de.execute('update orders set order_shipped=%s where order_name=%s and vendor=%s', ('yes', myorder, nick))
 12820	
 12821			db.commit()
 12822	
 12823			#db.close()
 12824	
 12825			
 12826	
 12827			error = error  + ' order is shipped! '	    
 12828	
 12829			pass
 12830	
 12831		    else:
 12832	
 12833			de = db.cursor()
 12834	
 12835			de.execute('update orders set order_shipped=%s where order_name=%s and vendor=%s', ('no', myorder, nick))
 12836	
 12837			db.commit()
 12838	
 12839			#db.close()
 12840	
 12841			
 12842	
 12843			error = error  + ' order is  not shipped, '
 12844	
 12845			pass
 12846	
 12847			
 12848	
 12849			
 12850	
 12851		else:
 12852	
 12853		    de = db.cursor()
 12854	
 12855		    de.execute('update orders set order_shipped=%s where order_name=%s and vendor=%s', ('no', myorder, nick))
 12856	
 12857		    db.commit()
 12858	
 12859		    #db.close()
 12860	
 12861		    
 12862	
 12863		    error = error  + ' order is  not shipped, '	    
 12864	
 12865		    pass
 12866	
 12867		if sbm:
 12868	
 12869		    re = db.cursor()
 12870	
 12871		    re.execute('select order_buyer from orders where vendor=%s and order_name=%s', (nick, myorder))
 12872	
 12873		    to = str(re.fetchone()[0])
 12874	
 12875		    title = 'Message regarding purchase from: ' + nick 
 12876	
 12877		    #linkorder = 'link: /myorders/' + myorder
 12878		    t = senduser2(to , nick, sbm, title)
 12879	
 12880		    error = error + ' message has been sent to ' + to
 12881	
 12882		#    if t:
 12883	
 12884		#	error = error + ', message have been sent to buyer!'
 12885	
 12886		 #   else:
 12887	
 12888		#	error = 'error when sending shippment details contact support!'
 12889	
 12890		
 12891	
 12892		else:
 12893	
 12894		    pass
 12895	
 12896		if sd:
 12897	
 12898		    tre = db.cursor()
 12899	
 12900		    tre.execute('update orders set shippingdetails=%s where order_name=%s and vendor=%s', (sd, myorder, nick))
 12901	
 12902		    re = db.cursor()
 12903	
 12904		    db.commit()
 12905	
 12906		    re.execute('select order_buyer from orders where vendor=%s and order_name=%s', (nick, myorder))
 12907	
 12908		    to = str(re.fetchone()[0])
 12909	
 12910		    title = 'Shipping details regarding purchase from: ' + nick 
 12911	
 12912		    linkorder = 'link: /order/' + myorder
 12913		    t = senduser2(to , nick, linkorder, title)	    
 12914	
 12915		    error = error + ' shipping details sent!'
 12916	
 12917		else:
 12918	
 12919		    pass
 12920	
 12921		#db = connect()
 12922	
 12923		#if fi:
 12924	
 12925		    #db = connect()
 12926	
 12927		    #ds = db.cursor()
 12928	
 12929		    #ds.execute('update orders set status=%s where order_name=%s and vendor=%s', ('not finished', myorder, nick))
 12930	
 12931		    #db.commit()
 12932	
 12933		#else:
 12934	
 12935		    #pass
 12936	
 12937		#ds.execute('insert into orders')
 12938	
 12939		gt = db.cursor()
 12940	
 12941		gt.execute('select order_amount, item_id, order_buyer, order_payed, title, status, btcprice, order_shipped, cointype from orders where vendor=%s and order_name=%s', (nick, myorder))
 12942	
 12943		
 12944	
 12945		entries2 = wl_entries_cache().give_me_entries()
 12946	
 12947		entries = [dict(amount=row[0], item_id=row[1], order_buyer=row[2], order_payed=row[3], title=row[4], status=row[5], btcprice=row[6], order_shipped=row[7], cointype=quick_validate_cointype(row[8])) for row in gt.fetchall()]
 12948	
 12949		db.close()
 12950	
 12951		return flask.render_template('manageorder.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), entries=entries, error=error, entries2=entries2, mess=getmsgs())
 12952	
 12953	    
 12954	    db = connectorders()
 12955	
 12956	    gt = db.cursor()
 12957	
 12958	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])  
 12959	
 12960	    gt.execute('select item_id from orders where vendor=%s and order_name=%s', (nick, myorder))
 12961	
 12962	    gs = db.cursor()
 12963	
 12964	    gs.execute('select btcprice from orders where vendor=%s and order_name=%s', (nick, myorder))
 12965	
 12966	    price = gs.fetchone()[0]
 12967	
 12968	    price = float(price)
 12969	
 12970	    #price = searchingfor().convertusd2btc(price)#b.convert_to_btc(price, 'USD')
 12971	
 12972	    #price = Decimal(price)*1000000
 12973	
 12974	    #price = str(Decimal(price))
 12975	
 12976	    
 12977	    #gt.item_price    
 12978	    
 12979	    
 12980	
 12981	    #if not gt.fetchone():
 12982	
 12983		#return flask.redirect(flask.url_for('wrongone'))
 12984	
 12985	    #else:
 12986	
 12987		#pass
 12988	
 12989	    
 12990	
 12991	    #else:
 12992	
 12993		#pass
 12994	
 12995		
 12996	
 12997	    gt.execute('select order_amount, item_id, order_buyer, order_payed, title, status, btcprice, order_shipped, shippingdetails, cointype from orders where vendor=%s and order_name=%s', (nick, myorder))
 12998	
 12999	    entries = [dict(amount=row[0], item_id=row[1], order_buyer=row[2], order_payed=row[3], title=row[4], status=row[5], btcprice=row[6], order_shipped=row[7], sd=row[8], cointype=quick_validate_cointype(row[9])) for row in gt.fetchall()]
 13000	
 13001	    entries2 = wl_entries_cache().give_me_entries()
 13002	
 13003	    db.close()
 13004	
 13005	
 13006	
 13007	    return flask.render_template('manageorder.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), emnick=nick, price=price, mess=getmsgs(), entries=entries, entries2=entries2)
 13008	
 13009	@wl.route('/orders_new')    
 13010	@noindex
 13011	@axss
 13012	@adate
 13013	@af
 13014	def neworders():
 13015	#dont waste resources
 13016	    if not flask.session.has_key("nick"):
 13017		return flask.redirect(flask.url_for('choice_mode'))
 13018	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13019		if not vertify_session(flask.session['special']):
 13020		    return flask.redirect(flask.url_for('choice_mode'))
 13021		pass
 13022	    else:
 13023		return flask.redirect(flask.url_for('choice_mode')) 
 13024	
 13025	    return flask.redirect('/checkmyorders', code=301)
 13026	#cache static files, picz etc
 13027	
 13028	@wl.route('/checkmyorders')    
 13029	@noindex
 13030	@axss
 13031	@adate
 13032	@af
 13033	def checkmyorders():
 13034	    if not flask.session.has_key("nick"):
 13035		return flask.redirect(flask.url_for('choice_mode'))
 13036	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13037		if not vertify_session(flask.session['special']):
 13038		    return flask.redirect(flask.url_for('choice_mode'))
 13039		pass
 13040	    else:
 13041		return flask.redirect(flask.url_for('choice_mode')) 
 13042	
 13043	    nick = decode_session(flask.session["special"])[0]
 13044	    db = connectorders()
 13045	    sq = db.cursor()
 13046	    sq.execute('select count(order_name) from orders where order_buyer=%s', (nick,))
 13047	    db.close()
 13048	    entries2 = wl_entries_cache().give_me_entries()
 13049	    
 13050	    return flask.render_template('check_orders.html', newsentries=wl_html_cache().get_news(), emnick=nick, mess=getmsgs(), entries2=entries2, pricetable=searchingfor().getpt(), soo=searchingfor().latestbtcprice())
 13051	    
 13052	    
 13053	
 13054	#sort by function status, buyer, payed, amount, name, price
 13055	
 13056	@wl.route('/vendorpanel/orders/sortby/<sortby>')
 13057	
 13058	@wl.route('/vendorpanel/orders/sortby/<sortby>/')
 13059	
 13060	@noindex
 13061	
 13062	@axss
 13063	
 13064	@adate
 13065	
 13066	@af
 13067	
 13068	def myorderssort(sortby):
 13069	
 13070	    if not flask.session.has_key("nick"):
 13071	
 13072		return flask.redirect(flask.url_for('choice_mode'))
 13073	
 13074	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13075		if not vertify_session(flask.session['special']):
 13076		    return flask.redirect(flask.url_for('choice_mode'))
 13077		pass
 13078	    else:
 13079		return flask.redirect(flask.url_for('choice_mode')) 
 13080	
 13081	    db = connectorders()
 13082	
 13083	    entries2 = wl_entries_cache().give_me_entries()
 13084	
 13085	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
 13086	
 13087	
 13088	
 13089	    if sortby == 'buyer':
 13090	
 13091	    	op = db.cursor()
 13092	
 13093	    	op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(order_buyer) desc', (nick,))
 13094	
 13095		entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
 13096	
 13097	    elif sortby == 'status':
 13098	
 13099		op = db.cursor()
 13100	
 13101	    	op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(status) desc', (nick,))
 13102	
 13103		entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
 13104	
 13105	        
 13106	
 13107	    elif sortby == 'payed':
 13108	
 13109		op = db.cursor()
 13110	
 13111	    	op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(payed) desc', (nick,))
 13112	
 13113		entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
 13114	
 13115	    
 13116	
 13117	    elif sortby == 'amount':		
 13118	
 13119		op = db.cursor()
 13120	
 13121	    	op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(amount) desc', (nick,))
 13122	
 13123		entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
 13124	
 13125	    
 13126	
 13127	    elif sortby == 'name':
 13128	
 13129		op = db.cursor()
 13130	
 13131	    	op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(order_name) desc', (nick,))
 13132	
 13133		entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
 13134	
 13135	    
 13136	
 13137	    elif sortby == 'price':
 13138	
 13139		op = db.cursor()
 13140	
 13141	    	op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name from orders where vendor=%s order by length(btcprice) desc', (nick,))
 13142	
 13143		entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=row[7], o_id=row[8]) for row in op.fetchall()]
 13144	
 13145	    else:
 13146	
 13147		error = 'Wrong sorting!'
 13148	
 13149		pass
 13150	    db.close()
 13151	
 13152	    return flask.render_template('myorders.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), mess=getmsgs(), emnick = nick , entries=entries, entries2=entries2)# pricetable = getpt(), soo = b.get_latest_price('USD'))
 13153	
 13154	
 13155	
 13156	def quick_validate_cointype(inputen):
 13157	    cointypen = 'btc'
 13158	    if not inputen:
 13159		cointypen = 'btc'
 13160	    if inputen == 'xmr':
 13161		cointypen = 'xmr'
 13162	    return cointypen    
 13163	
 13164	
 13165	#todo
 13166	
 13167	#verify vendor condom for next release, patch
 13168	
 13169	@wl.route('/vendorpanel/orders')
 13170	
 13171	@wl.route('/vendorpanel/orders/')
 13172	
 13173	@noindex
 13174	
 13175	@axss
 13176	
 13177	@adate
 13178	
 13179	@af
 13180	
 13181	def myorders():
 13182	
 13183	    if not flask.session.has_key("nick"):
 13184	
 13185		return flask.redirect(flask.url_for('choice_mode'))
 13186	
 13187	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13188		if not vertify_session(flask.session['special']):
 13189		    return flask.redirect(flask.url_for('choice_mode'))
 13190		pass
 13191	    else:
 13192		return flask.redirect(flask.url_for('choice_mode')) 
 13193	
 13194	    db = connectorders()
 13195	
 13196	    entries2 = wl_entries_cache().give_me_entries()
 13197	
 13198	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])    
 13199	
 13200	    def quick_shorten(inputen):
 13201	
 13202		return str(inputen)[:9]
 13203	
 13204	    op = db.cursor()
 13205	
 13206	    op.execute('select order_amount, order_name, item_id, order_buyer, order_payed, title, status, btcprice, order_name, cointype from orders where vendor=%s', (nick,))
 13207	
 13208	    entries = [dict(amount=row[0], name=row[1], item_id=row[2], buyer=row[3], payed=row[4], title=row[5], status=row[6], pricebtc=quick_shorten(row[7]), o_id=row[8], cointype=quick_validate_cointype(row[9])) for row in op.fetchall()]
 13209	
 13210	    
 13211	    db.close()
 13212	
 13213	    return flask.render_template('myorders.html', soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), newsentries=wl_html_cache().get_news(), mess=getmsgs(), emnick = nick , entries=entries, entries2=entries2)# pricetable = getpt(), soo = b.get_latest_price('USD'))
 13214	
 13215	
 13216	
 13217	
 13218	def holiday_check(vendor):
 13219	    abc = False
 13220	    db = connectvens()
 13221	    qq = db.cursor()
 13222	    qq.execute('select holidaymode from vens where nick=%s', (vendor,))
 13223	    qwq = qq.fetchone()
 13224	    db.close()
 13225	    if qwq and len(qwq) == 1:
 13226		if qwq[0] == 'activate':
 13227		    abc = True 
 13228	    return abc
 13229	    
 13230	
 13231	def holiday_what(vendor):
 13232	    abc = 'unknown'
 13233	    db = connectvens()
 13234	    qq = db.cursor()
 13235	    qq.execute('select holidaymode from vens where nick=%s', (vendor,))
 13236	    qwq = qq.fetchone()
 13237	    db.close()
 13238	    if qwq and len(qwq) == 1:
 13239		if qwq[0]:
 13240		    abc = qwq[0]
 13241	    return abc    
 13242	    
 13243	    
 13244	    
 13245	def holiday_send(user, itemname, vendor):
 13246	    msg = 'We are sending you this message to inform you that you have bought ' + itemname + """
 13247	 from vendor """ + vendor + """ that is currently on Holiday, this might delay your order """
 13248	    senduser2(user, 'warezloader-store-bot', msg, "Vendor is on Holiday")
 13249	    return True #return 0;
 13250	
 13251	def uniq_sort(inlist):
 13252	    a = []
 13253	    for line in inlist:
 13254		if not a.__contains__(line):
 13255		    a.append(line)
 13256	    return a
 13257	
 13258	
 13259	def addcoinaddress(cointype, nick, note, address):
 13260	   #sprint "add coin address called"
 13261	   #sprint (cointype, nick, note, address)
 13262	    k = False
 13263	    db = connectcoinz()
 13264	    qwerty,qwee = db.cursor(),db.cursor()
 13265	    qwerty.execute('select address from coinz where usr=%s and address=%s', (nick,address))
 13266	    if not qwerty.fetchone():
 13267	#sprint 'pass true'
 13268	#sprint cointype.lower()
 13269	#sprint cointype.lower() == 'bitcoin'
 13270		if ['monero', 'bitcoin'].__contains__(cointype.lower()):
 13271		   #sprint 'validated!'
 13272		    if validateaddress(address) or handle_monero().validate_main_address(address):
 13273		#sprint 'inserted'
 13274		#sprint (address, nick, note)
 13275			qwee.execute('insert into coinz(address, usr, note) value(%s, %s, %s)', (address, nick, note))
 13276			db.commit()
 13277		    k = True
 13278	    else:
 13279		print 'passing'
 13280	    db.close()
 13281	    return k
 13282	
 13283	
 13284	
 13285	
 13286	def validate_bulk_btc(btcinput, addit=False, nick=False):
 13287	    a,b = [], 0
 13288	    for line in uniq_sort(btcinput.split()):
 13289		if validateaddress(line) and len(line) == 34:
 13290		    a.append(line)
 13291	    
 13292	    if addit:
 13293	#sprint 'addit is true!'
 13294		for address in a:
 13295		    if addcoinaddress('bitcoin', nick, 'bitcoin', address):
 13296			b += 1
 13297	
 13298	    return (a,b)
 13299	
 13300	def validate_bulk_monero(addresses, addit=False, nick=False):
 13301	    a,b = [],0
 13302	    for line in uniq_sort(addresses.split()):
 13303	#sprint 'checking:', line
 13304		if handle_monero().validate_main_address(line):
 13305		    a.append(line)
 13306	
 13307	
 13308	    if addit:
 13309		for address in a:
 13310		    if addcoinaddress('monero', nick, 'monero', address):
 13311			b += 1
 13312	
 13313	    return (a, b)
 13314	
 13315	
 13316	def validate_bulk_monero_rm(addresses, nick):
 13317	    a,b = [],0
 13318	  # #sprint 'validate_bulk_monero_rm: ', addresses, nick
 13319	    db = connectcoinz()
 13320	    warezclan = db.cursor()
 13321	    warezclan.execute('select address from coinz where note=%s and usr=%s', ('monero', nick))
 13322	    stash = warezclan.fetchall()
 13323	    
 13324	    if len(addresses) == 95:
 13325		address = addresses
 13326		if address in str(stash):# a.append(line)  -- for mainnet we use: handle_monero().validate_main_address(address) and
 13327		 #  #sprint 'address in stash'
 13328		    wareztang = db.cursor()
 13329		    wareztang.execute('delete from coinz where note=%s and usr=%s and address=%s', ('monero', nick, address))
 13330		    db.commit()
 13331		#   #sprint 'address appending,:', address
 13332		    a.append(address)
 13333		    #print len(address)
 13334		    #print type(address)
 13335		    #print '00 a added'   
 13336		    #print '002 address:', a
 13337		    #print '003 address:', address	    
 13338	    else:
 13339		if '\n' in addresses:
 13340		    for address in uniq_sort(addresses.split('\n')):
 13341			if not len(address) == 1:
 13342			    #print 'len uniq sort:',len(uniq_sort(addresses.split('\n')))
 13343			    #print 'address:', address
 13344			    #print 'stash:', stash
 13345			    #print 'try 2 : ', address in str(stash) 
 13346	#		   #sprint 'validated address: '# todo verify that it okey when validate
 13347			    if address in str(stash):# a.append(line)  -- for mainnet we use: handle_monero().validate_main_address(address) and
 13348				#print 'address in stash'
 13349				wareztang = db.cursor()
 13350				wareztang.execute('delete from coinz where note=%s and usr=%s and address=%s', ('monero', nick, address))
 13351				db.commit()
 13352				#print 'address appending,:', address
 13353				#print type(address)
 13354				a.append(address)
 13355				#print '0 a added'
 13356	
 13357	    #print '02 address:', a
 13358	    #print '03 address:', address
 13359	
 13360	    #support single addresses
 13361	    
 13362	
 13363	    #print a
 13364	    #print len(a)
 13365	 #  #sprint 'validate monero done'
 13366	    db.close()
 13367	    return a
 13368	
 13369	
 13370	#mysql> alter table coinz add column note text after usr;
 13371	#Query OK, 54 rows affected (0.02 sec)
 13372	#Records: 54  Duplicates: 0  Warnings: 0
 13373	
 13374	
 13375	
 13376	#mysql> alter table vens add column holidaymode text after role;
 13377	#Query OK, 81 rows affected (0.02 sec)
 13378	#Records: 81  Duplicates: 0  Warnings: 0
 13379	
 13380	#function for vendor payment information, accept monero/btc, enter holiday mode 
 13381	@wl.route('/ven_payment/', methods=['GET', 'POST'])
 13382	@noindex
 13383	@axss
 13384	@adate
 13385	@af
 13386	def venpayment():
 13387	    if not flask.session.has_key("nick"):
 13388		    return flask.redirect(flask.url_for('choice_mode'))
 13389	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13390		if not vertify_session(flask.session['special']):
 13391		    return flask.redirect(flask.url_for('choice_mode'))
 13392		pass
 13393	    else:
 13394		return flask.redirect(flask.url_for('choice_mode')) 
 13395		
 13396	    if not vertify_session(flask.session['special']):
 13397		return flask.redirect(flask.url_for('choice_mode'))   
 13398	
 13399	    error = False
 13400	    nick = str(decode_session(flask.session["special"])[0])
 13401	    #nick = 'svlnbas!'
 13402	    db0 = connectcoinz()
 13403	    qww, wwq = db0.cursor(),db0.cursor()
 13404	    qww.execute('select address from coinz where usr=%s and note=%s or usr=%s and note=%s', (nick, 'signup', nick, 'btcaddress'))
 13405	    wwq.execute('select address from coinz where usr=%s and note=%s', (nick, 'monero'))
 13406	    moneroaddr = wwq.fetchall()
 13407	    bitcoinaddr = qww.fetchall()
 13408	    db0.close()
 13409	
 13410	    if flask.request.method == 'POST':
 13411	
 13412		if not flask.session.has_key("nick"):
 13413			return flask.redirect(flask.url_for('choice_mode'))
 13414		if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13415		    if not vertify_session(flask.session['special']):
 13416			return flask.redirect(flask.url_for('choice_mode'))
 13417		    pass
 13418		else:
 13419		    return flask.redirect(flask.url_for('choice_mode')) 
 13420		    
 13421		if not vertify_session(flask.session['special']):
 13422		    return flask.redirect(flask.url_for('choice_mode'))   
 13423	
 13424	
 13425		qw = flask.request.form.get('HolidayMode')
 13426		er = flask.request.form.get('btc')
 13427		ty = flask.request.form.get('monero')
 13428		tyy = flask.request.form.get('btcaddress')
 13429		err = flask.request.form.get('xmraddress')
 13430		oldies = flask.request.form.get('oldxmraddress')
 13431		db = connectvens()
 13432		error = ''
 13433		if qw == 'activate' and not holiday_check(nick):#if not activate
 13434		    tre = db.cursor()
 13435		    tre.execute('update vens set holidaymode=%s where nick=%s', ('activate', nick))
 13436		    db.commit()
 13437		    error = 'Holiday mode activated '
 13438	
 13439		elif qw == 'Not Activated' and holiday_check(nick) or qw == 'Not Activated' and holiday_what(nick) == 'unknown':#check if its activated
 13440		    s = db.cursor()
 13441		    s.execute('update vens set holidaymode=%s where nick=%s', ('nope', nick))
 13442		    db.commit()
 13443		    error = 'Holiday mode deactivated '
 13444	    
 13445	
 13446		#print 'i got the following oldxmraddresses:', oldies
 13447		#print ''
 13448		if oldies and len(oldies) > 10:
 13449		   #sprint 'old true!'
 13450		    am = validate_bulk_monero_rm(oldies, nick)
 13451		   #sprint 'am: ', am
 13452		    error += ' '+str(len(am))+' Amount of Monero addresses have been removed '
 13453	
 13454	    
 13455	#sprint holiday_check(nick)
 13456	#sprint holiday_what(nick) 
 13457	#sprint 'i got btc input:', tyy
 13458	#sprint 'i got monero input:', err 
 13459		
 13460	#sprint 'validating monero addresses:'
 13461		vbm = validate_bulk_monero(err, addit=True, nick=nick)
 13462	#sprint vbm
 13463	#sprint 'valid btc addresses:'
 13464		vbb = validate_bulk_btc(tyy, addit=True, nick=nick)
 13465	#sprint vbb
 13466	#sprint (type(vbb), type(vbm))
 13467		error += 'Added ' +str(vbm[1])+' of '+str(len(vbm[0]))+ ' amount of monero and '+str(vbb[1])+ ' of ' +str(len(vbb[0]))+ ' bitcoin addresses'
 13468	#sprint error
 13469		db.close()
 13470	
 13471	    return flask.render_template('ven_payment.html', bitcoinaddr=bitcoinaddr, moneroaddr=moneroaddr, holiday=holiday_check(nick), mess=getmsgs(), emnick=nick, newsentries=wl_html_cache().get_news(), soo=searchingfor().latestbtcprice(), pricetable = searchingfor().getpt(), error=error, entries2 = wl_entries_cache().give_me_entries())
 13472	
 13473	
 13474	def does_vendor_accept_monero(nick):
 13475	    db0 = connectcoinz()
 13476	    mm = ()
 13477	
 13478	    qqq,qqqs = db0.cursor(),db0.cursor()
 13479	    qqq.execute('select address from coinz where usr=%s and note=%s', (nick, 'monero'))
 13480	    mm = qqq.fetchall()
 13481	    db0.close()
 13482	    if len(mm) == 0:
 13483		return False
 13484	    else: return True
 13485	
 13486	def vendor_accept_monero(itemid):
 13487	    db0,db1 = connectcoinz(), connectitems()
 13488	    mm = ()
 13489	    qq = db1.cursor()
 13490	    qq.execute('select item_vendor from items where item_id=%s',(itemid,))
 13491	    asd = qq.fetchone()
 13492	    if not len(asd) == 0:
 13493		qqq,qqqs = db0.cursor(),db0.cursor()
 13494		qqq.execute('select address from coinz where usr=%s and note=%s', (asd[0], 'monero'))
 13495		mm = qqq.fetchall()
 13496	    db0.close()
 13497	    db1.close()
 13498	    if len(mm) == 0:
 13499		return False
 13500	    else: return True
 13501	    
 13502	
 13503	
 13504	@wl.route('/vendorpanel/')
 13505	
 13506	@wl.route('/Vendorpanel')
 13507	
 13508	@noindex
 13509	
 13510	@axss
 13511	
 13512	@adate
 13513	
 13514	@af
 13515	
 13516	def vendorpanel():
 13517	
 13518	   # if flask 
 13519	
 13520	    if not flask.session.has_key("nick"):
 13521	
 13522		return flask.redirect(flask.url_for('choice_mode'))
 13523	
 13524	    if flask.session.has_key('special') and decode_session(flask.session["special"])[1] == 'vendor':
 13525		if not vertify_session(flask.session['special']):
 13526		    return flask.redirect(flask.url_for('choice_mode'))
 13527		pass
 13528	    else:
 13529		return flask.redirect(flask.url_for('choice_mode')) 
 13530	    
 13531	
 13532	    if not vertify_session(flask.session['special']):
 13533	#sprint 'not verified special token'
 13534	#sprint '0: ' + flask.session['special']
 13535		return flask.redirect(flask.url_for('choice_mode'))    
 13536	
 13537	   #sprint 'verified'
 13538	
 13539	    db = connectorders()
 13540	
 13541	    db2 = connectitems()
 13542	    nick = str(decode_session(flask.session["special"])[0])#flask.escape(flask.session['nick'])
 13543	
 13544	    ere = db.cursor()
 13545	
 13546	    ere.execute('select count(order_amount) from orders where status=%s and vendor=%s or not status=%s and vendor=%s order by length(order_payed) limit 5', ('escrow', nick, 'finished', nick))
 13547	
 13548	    orders = ere.fetchone()
 13549	
 13550	    orders = orders[0]
 13551	
 13552	    if not orders:
 13553	
 13554		orders = 0
 13555	
 13556	    else:
 13557	
 13558		pass    
 13559	
 13560	    entries2 = wl_entries_cache().give_me_entries()
 13561	
 13562	    
 13563	    tradeam = trade_amount(nick)
 13564	
 13565	    ttt = db.cursor()
 13566	
 13567	    ttt.execute('select order_amount, item_id, order_buyer, order_payed, btcprice, title, status from orders where vendor=%s limit 5', (nick,))
 13568	
 13569	    entries = [dict(amount=row[0], itemid=row[1], buyer=row[2], payed=row[3], pricebtc=row[4], title=row[5], status=row[6]) for row in ttt.fetchall()]
 13570	
 13571	  #  ttt.execute('select item_name, item_price, item_price_btc, item_shippin_price  where item_vendor=%s', (nick,))
 13572	
 13573	    gh = db2.cursor()
 13574	
 13575	    gs = db2.cursor()
 13576	
 13577	    gi = db.cursor()
 13578	
 13579	    
 13580	
 13581	    #gi.execute('select item_id, ')
 13582	
 13583	    
 13584	
 13585	    gh.execute('select count(item_id) from items where item_vendor=%s', (nick,))
 13586	
 13587	    gs.execute('select count(number_sold) from items where item_vendor=%s', (nick,))
 13588	
 13589	    gs = gs.fetchone()
 13590	
 13591	    sold = gs[0]
 13592	
 13593	    if not sold:
 13594	
 13595		sold = 'none'
 13596	
 13597	    else:
 13598	
 13599		pass
 13600	
 13601	    gh = gh.fetchone()
 13602	
 13603	    totalitems = gh[0]
 13604	
 13605	    if not totalitems:
 13606	
 13607		totalitems = 'none'
 13608	
 13609	    else:
 13610	
 13611		pass
 13612	
 13613	    
 13614	
 13615	    db.close()
 13616	    db2.close()
 13617	
 13618	#only vendors    #, pricetable = getpt(), soo = b.get_latest_price('USD'), 
 13619	
 13620	    return flask.render_template('vendorpanel.html', tradeam=tradeam, newsentries=wl_html_cache().get_news(), orders=orders, entries=entries, sold = sold, totalitems = totalitems, entries2=entries2, mess=getmsgs(), emnick = nick, soo = searchingfor().latestbtcprice(), pricetable = searchingfor().getpt())#, pricetable = getpt(), soo = b.get_latest_price('USD'))
 13621	
 13622	
 13623	
 13624	session_cache = {}
 13625	random_cache = {}
 13626	
 13627	
 13628	#if logged in, removed and create new session, also call when decode 
 13629	def check_session(session, nick):
 13630	    return session_cache.__contains__(nick)
 13631	
 13632	#call when logged out
 13633	def remove_session(nick):
 13634	    global random_cache
 13635	    if not random_cache.get(nick, 'nope') == 'nope':
 13636		random_cache.pop(nick)
 13637	#sprint 'removed session!'
 13638	    return True
 13639	
 13640	
 13641	def validate_session(nick, session):
 13642	    awbs = False
 13643	    blah = session_cache.get(nick, 'nope')
 13644	    if not blah == 'nope':
 13645		if session == blah:
 13646		    awbs = True
 13647	    return awbs
 13648	
 13649	def add_session(session, nick):
 13650	    global session_cache
 13651	    if not session_cache.__contains__(nick):
 13652		session_cache[nick] = session
 13653	    return True
 13654	
 13655	def get_session(nick, role):
 13656	    global random_cache
 13657	    nick = nick.encode('utf-8')
 13658	    role = role.encode('utf-8')
 13659	    if not random_cache.get(nick, 'nope') == 'nope':
 13660		random_cache.pop(nick)
 13661	    psrandom = os.urandom(21).encode('base64').replace('\n', '') + str(datetime.datetime.now())[:14].replace(' ', '')
 13662	    random_cache[nick] = psrandom
 13663	    a = '9ebfb64d76c1a4a81032af2c0d52525a6f1e9dddc06fc5a72d5e814fd58a8d24'
 13664	    a1 = blake2b(data=nick, digest_size=64, key=a).hexdigest()[12:50]
 13665	    e = str(str(datetime.date.today()) + str(datetime.date.today())[-2:]).encode('utf-8')
 13666	    a1 = blake2b(data=e, digest_size=64, key=a1).hexdigest()[12:50]
 13667	    b = '3b1523ad74b77978903d5d7e87dcdbfc281385d6ce531e6cb884e161a4153459'
 13668	    b1 = blake2b(data=role, digest_size=64, key=b).hexdigest()[12:50]
 13669	    c = str(a1 + psrandom + b1).encode('utf-8')#some random data in that :),+ os.urandom(21).encode('base64').replace('\n', '')
 13670	    SK5 = wl_entries_cache().get_s5()
 13671	    c = blake2b(data=c, digest_size=64, key=SK5).hexdigest()[12:50]
 13672	    tokn = str(c + '-n')
 13673	    tokr = str(c + '-r')
 13674	   #sprint('tokn, tokr, nick, role: ',tokn, tokr, nick, role)
 13675	   #sprint(type(tokn), type(tokr), type(nick), type(role))
 13676	    s_db.set(tokn, nick)
 13677	    s_db.set(tokr, role)    
 13678	    return c
 13679	
 13680	def vertify_session(sess):
 13681	    #print 'veryfing cookie'
 13682	    #print sess
 13683	    #print 's_db:'
 13684	    #print s_db.getall()
 13685	    #print '1: ' + str(sess)
 13686	    tokn = str(sess + '-n')
 13687	    if not s_db.get(tokn):
 13688	##sprint 'token not in s_db'
 13689		return False
 13690	    else:
 13691		#print 'found it in the db'
 13692	##sprint 'token in db'
 13693		tokr = str(sess + '-r') 	
 13694		role = s_db.get(tokr)#str(.replace('-n', '')
 13695		nick = s_db.get(tokn)#
 13696	##sprint str(nick) + str(role)
 13697		a = '9ebfb64d76c1a4a81032af2c0d52525a6f1e9dddc06fc5a72d5e814fd58a8d24'
 13698		a1 = blake2b(data=nick, digest_size=64, key=a).hexdigest()[12:50]
 13699		e = str(str(datetime.date.today()) + str(datetime.date.today())[-2:]).encode('utf-8')
 13700		a1 = blake2b(data=e, digest_size=64, key=a1).hexdigest()[12:50]
 13701		b = '3b1523ad74b77978903d5d7e87dcdbfc281385d6ce531e6cb884e161a4153459'
 13702		b1 = blake2b(data=role, digest_size=64, key=b).hexdigest()[12:50]
 13703		anabola = random_cache.get(nick, 'nope')
 13704		if anabola == "nope":
 13705		    return False
 13706		c = str(a1 + anabola + b1).encode('utf-8')
 13707		SK5 = wl_entries_cache().get_s5()
 13708		c = blake2b(data=c, digest_size=64, key=SK5).hexdigest()[12:50]
 13709		#print '2: ' + str(c)
 13710	
 13711	#	d = get_session(nick, role)
 13712	
 13713		#print '3: ' + d
 13714		#whois on the line
 13715		#if c == d:
 13716		    #print 'c = d'
 13717		if c == sess:
 13718		#   #sprint 'c = s'
 13719		    return True
 13720		else:	
 13721		    global s_db#just in dev testing
 13722		    s_db.rem(tokr)
 13723		    s_db.rem(tokn)		
 13724		 #  #sprint 'c != s'		
 13725		#else:		
 13726			#print 'c != s'
 13727			#s_db.rem(tokr)
 13728			#s_db.rem(tokn)
 13729		    return False	#	return False
 13730	
 13731	
 13732	#verify hmac
 13733	def decode_session(hmac_code):
 13734	    tokn = str(hmac_code + '-n')
 13735	    tokr = str(hmac_code + '-r')    
 13736	    role = s_db.get(tokr)
 13737	    nick = s_db.get(tokn)
 13738	    return (nick, role)
 13739	
 13740	@wl.route('/-<blah>', methods=['POST', 'GET'])
 13741	@noindex
 13742	@axss
 13743	@adate
 13744	@af
 13745	def genfaker(blah):
 13746	    return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
 13747	
 13748	@wl.route('/signup<blah>', methods=['POST', 'GET'])
 13749	@noindex
 13750	@axss
 13751	@adate
 13752	@af
 13753	def signupfaker(blah):
 13754	    return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
 13755	
 13756	
 13757	@wl.route('/login<blah>', methods=['POST', 'GET'])
 13758	@noindex
 13759	@axss
 13760	@adate
 13761	@af
 13762	def loginfaker(blah):
 13763	    return flask.redirect('http://www.gutenberg.org/ebooks/search/?sort_order=random', code=302)
 13764	
 13765	
 13766	#vendor --> wlversion2 , usr --> uversion2
 13767	
 13768	@wl.route('/login', methods=['POST', 'GET'])
 13769	@noindex
 13770	@axss
 13771	@adate
 13772	@af
 13773	def login():
 13774	    error = False
 13775	    if flask.session.has_key("special") and flask.session["present"]:
 13776		if decode_session(flask.session["special"])[0]:
 13777		   #sprint decode_session(flask.session["special"])
 13778	
 13779		    if len(decode_session(flask.session["special"])[0]) > 1:
 13780			return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 13781	
 13782		    else:
 13783			pass
 13784	
 13785	    captchat = handle_captcha().captcha_gen()
 13786	    namnet = captchat[0]
 13787	    koden = captchat[1]
 13788	    mycapt = '/captchas/' + namnet.replace('/tmp/', '') + '.png'
 13789	
 13790	   #sprint 'og koden'
 13791	   #sprint koden
 13792	
 13793	#    ua = flask.request.headers['User-Agent']  
 13794	    #print 'ua:'
 13795	    #print len(ua)
 13796	    #print ua
 13797	
 13798	    if flask.request.method == 'POST':
 13799	
 13800		if flask.session.has_key("special") and flask.session["present"]:
 13801		    if decode_session(flask.session["special"])[0]:
 13802		#sprint decode_session(flask.session["special"])
 13803			if len(decode_session(flask.session["special"])[0]) > 1:
 13804			    return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 13805			else:
 13806			    pass	
 13807		db1 = connectauth()
 13808	
 13809		db2 = connectvens()
 13810		
 13811		nickname = db1.escape_string(flask.request.form['nickname'].replace('\\', 'd0'))
 13812	
 13813		password = db1.escape_string(flask.request.form['Password'].replace('\\', 'd0'))
 13814	
 13815		salt = db1.escape_string(flask.request.form['salt'].replace('\\', 'd0'))
 13816	
 13817		captch = flask.request.form['captcha']
 13818		c2 = flask.request.form['c2']
 13819		
 13820		
 13821		c2 = c2.replace('.png', '').replace('/captchas/', '')
 13822		#print c2
 13823		#print 'Getting it'
 13824		ogc = handleit().getit(c2).replace("\n", '')
 13825		#print ogc
 13826		#print 'got captcha'
 13827		#print captch
 13828		#print 'wanted'
 13829		#print ogc
 13830		if not captch.lower() == ogc.lower():
 13831		    #print captch.lower()
 13832		    #print ogc.lower()
 13833		    #print "'"+str(ogc)+"'"
 13834		    #print "'"+str(captch)+"'"
 13835		    #print len(ogc)
 13836		    #print len(captch)
 13837		    #handle_captcha().pop_temp(namnet)
 13838		    return flask.render_template('login1.html', error='invalid captcha', mycapt=mycapt)
 13839		
 13840		cuu = db2.cursor()
 13841	
 13842		#if passwd = killswitch launch the kill switch
 13843	
 13844		if password == 'censorednick' and nickname == 'theholygrail':
 13845	
 13846		    alertsignal()
 13847	
 13848		    error = 'wrong password or usr name'
 13849	
 13850		    return flask.render_template('login1.html', error=error, mycapt=mycapt)
 13851	
 13852		orig = generate_password_hash(password, salt)
 13853	
 13854		hashone = generate_password_hash(orig, hash1)        
 13855	
 13856		hashtwo = generate_password_hash(hashone, hash2)
 13857	
 13858		hashthree = generate_password_hash(hashtwo, hash3)
 13859	
 13860		hashedpasswd = hashthree
 13861	
 13862		sdfa = db1.cursor()
 13863	
 13864		sdfa.execute('delete from authy where usr=%s', (nickname,))
 13865	
 13866		db1.commit()
 13867	
 13868		#db.close()
 13869	
 13870		
 13871	
 13872		crr = db2.cursor()
 13873	
 13874		cddr = db2.cursor()
 13875	
 13876		cddr.execute('select pgp from vens where nick=%s', (nickname,))
 13877	
 13878		cuu.execute('select role from vens where nick=%s', (nickname,))
 13879	
 13880	#	db.commit()
 13881	
 13882		crr.execute('select password from vens where nick=%s', (nickname,))
 13883	
 13884		yello = cddr.fetchone()
 13885	
 13886		if not yello:
 13887	
 13888		    pass
 13889	
 13890		else:
 13891	
 13892		    
 13893	
 13894	#if member has 2factor then activate special session
 13895	
 13896	
 13897	
 13898		    if len(yello[0]) > 3:
 13899	
 13900			#pop sess
 13901	
 13902			flask.session['2faw'] = nickname
 13903	
 13904			flask.session['2fa'] = sign(nickname)
 13905	
 13906			return flask.redirect(flask.url_for('secondfa'))
 13907	
 13908		    else:
 13909	
 13910			pass
 13911	
 13912		    #return flask.render_template('pgpverify.html', pgpmess='yello')
 13913	
 13914		#db.commit()
 13915	
 13916		#if not fetchall() error = 'wrong creds try again'
 13917	
 13918		roler = cuu.fetchone()
 13919	
 13920		result = crr.fetchone()
 13921	
 13922		cus = db2.cursor()
 13923	
 13924		cus.execute('select role from vens where nick=%s', (nickname,))
 13925	
 13926		checki = cus.fetchone()
 13927	
 13928		if not checki:
 13929	
 13930		    error = 'wrong cred'
 13931		    db2.close()
 13932	#	    db.close()
 13933		    
 13934	
 13935		    return flask.render_template('login1.html', error=error, mycapt=mycapt)
 13936	
 13937		else:
 13938	
 13939		    pass
 13940	
 13941		
 13942	
 13943		if  hashedpasswd == result[0]:#[0]:
 13944		    if isloggedin(nickname):
 13945		#sprint 'member is logged in'
 13946			nicksessionremove(nickname)
 13947		#sprint 'removed other session'
 13948		    else:
 13949			print 'member is not logged in'
 13950	
 13951		    flask.session['nick'] = nickname
 13952	
 13953		    flask.session['nick2'] = sign(nickname)
 13954	
 13955		   # flask.session['role'] = roler[0]
 13956	
 13957		    #flask.session['present'] = True , todo remove
 13958	
 13959		    flask.session['special'] = get_session(nickname, roler[0])
 13960		    db1.close()
 13961		    db2.close()
 13962		    return flask.redirect('/news')
 13963		    #return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 13964	
 13965		   # return flask.redirect(flask.url_for(str(flask.session["role"])))
 13966	
 13967		else:
 13968	
 13969		    error = 'wrong cred'
 13970		    db1.close()
 13971		    db2.close()
 13972	
 13973		    return flask.render_template('login1.html', error=error, mycapt=mycapt)
 13974	
 13975	    
 13976	
 13977	    
 13978	
 13979	    flask.session["present"] = False
 13980	
 13981	   #sprint koden
 13982	
 13983	    
 13984	
 13985	    
 13986	
 13987	    #db1.close()
 13988	
 13989	    #db1.close()
 13990	    return flask.render_template('login1.html', error=error, mycapt=mycapt)
 13991	
 13992	 #   if not flask.session:
 13993	
 13994	#	return flask.render_template('login1.html', error=error)
 13995	
 13996	
 13997	
 13998	 #   if flask.session.has_key("present") and flask.session["present"]:
 13999	
 14000	#	return flask.redirect(flask.url_for(str(flask.session['role'])))
 14001	
 14002	#cache me 
 14003	@wl.route('/info_new', methods=['GET'])
 14004	@noindex
 14005	@axss
 14006	@adate
 14007	@af
 14008	def infonew():
 14009	    if not flask.session.has_key("nick"):
 14010		return flask.redirect(flask.url_for('choice_mode'))
 14011	
 14012	    if flask.session.has_key('special') and flask.session:
 14013		if not vertify_session(flask.session['special']):
 14014		    return flask.redirect(flask.url_for('choice_mode'))
 14015		pass
 14016	    else:
 14017		return flask.redirect(flask.url_for('choice_mode'))     
 14018	
 14019	
 14020	    return wl_html_cache().return_page('newinfo', flask.render_template)
 14021	
 14022	
 14023	
 14024	@wl.route('/shop_new', defaults={'page': 1}, methods=['GET'])
 14025	@wl.route('/shop_new/page/', defaults={'page': 1})
 14026	@wl.route('/shop_new/page/<int:page>')         
 14027	@wl.route('/shop_new/page/<int:page>/')    
 14028	@noindex
 14029	@axss
 14030	@adate
 14031	@af
 14032	def newshop(page):
 14033	    if not flask.session.has_key("nick"):
 14034		return flask.redirect(flask.url_for('choice_mode'))
 14035	    if flask.session.has_key('special') and flask.session:
 14036		if not vertify_session(flask.session['special']):
 14037		    return flask.redirect(flask.url_for('choice_mode'))
 14038		pass
 14039	    else:
 14040		return flask.redirect(flask.url_for('choice_mode'))     
 14041	
 14042	
 14043	    nick = decode_session(flask.session["special"])[0] 
 14044	
 14045	    db = connectitems()
 14046	    tset = db.cursor()
 14047	    tet = db.cursor()
 14048	    tset.execute('select count(item_id) from items where auction=%s and item_price and item_id!=%s', ('','nope'))
 14049	    total = tset.fetchone()[0]
 14050	    page, per_page, offset = get_page_args()
 14051	    sql = 'select item_name from items where not auction and item_id!="{}" and item_price order by item_name limit {}, {}'\
 14052		.format('nope',offset, per_page)    #mustdo and not item_price, newnew, d
 14053	    tet.execute(sql)
 14054	    entries2 = wl_entries_cache().give_me_entries()
 14055	    items = tet.fetchall()
 14056	    curl = db.cursor()
 14057	    curl.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s and item_price!=%s and item_id!=%s and item_piclink is not null order by item_id limit {}, {}'.format(offset, per_page), ('','', 'nope'))
 14058	    entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in curl.fetchall()]
 14059	  
 14060	    pagination = get_pagination(page=page, per_page=per_page, total=total, record_name='items', format_total=True, format_number=True)    
 14061	    db.close()
 14062	    asd = pagination.__dict__.keys()
 14063	    asd.sort()
 14064	    db = connectnews()
 14065	    ge = db.cursor()
 14066	    ge.execute('select datu, news from news')
 14067	    entries3 = [dict(datu=row[0], news=row[1]) for row in ge.fetchall()]   
 14068	    db.close()
 14069	    db = connectvens()
 14070	    ee = db.cursor()
 14071	    nick = decode_session(flask.session["special"])[0] 
 14072	    ee.execute('select role from vens where nick=%s', (nick,))
 14073	    role = ee.fetchone()
 14074	    role = role[0]
 14075	    db.close()
 14076	    return flask.render_template('new/shop.html', myname=nick, mess=getmsgs(), items=items, page=page, per_page=per_page, pagination=pagination, active_url='items-page-url', entries=entries)
 14077	
 14078	#return flask.render_template('new/shop.html', myname=nick)
 14079	
 14080	@wl.route('/item_new/<hashid>', methods=['GET', 'POST'])
 14081	@noindex
 14082	@axss
 14083	@adate
 14084	@af
 14085	def itemnew(hashid):
 14086	    if not flask.session.has_key("nick"):
 14087		return flask.redirect(flask.url_for('choice_mode'))
 14088	    if flask.session.has_key('special') and flask.session:
 14089		if not vertify_session(flask.session['special']):
 14090		    return flask.redirect(flask.url_for('choice_mode'))
 14091		pass
 14092	    else:
 14093		return flask.redirect(flask.url_for('choice_mode'))     
 14094	
 14095	
 14096	
 14097	
 14098	    berror = False
 14099	    error = False
 14100	    item_id = hashid
 14101	    if not verifynumberinput(item_id):
 14102	        return flask.redirect(flask.url_for('choice_mode'))
 14103	
 14104	    nick = decode_session(flask.session["special"])[0] 
 14105	    db = connectitems()
 14106	    trew = db.cursor()
 14107	    trew.execute('select item_id from items where auction=%s and item_id=%s', ('yes', item_id))
 14108	
 14109	    ytr = trew.fetchone()
 14110	
 14111	    if ytr:
 14112		db.close()
 14113	
 14114		return flask.redirect('/auction_new/' + item_id, code=302) 
 14115	
 14116	    lkj = db.cursor()
 14117	    lkj.execute('select item_name from items where item_id=%s', (item_id,))
 14118	    jkl = lkj.fetchone()
 14119	    if not jkl:
 14120		db.close()
 14121	        return flask.render_template('new/item.html', entries=False, berror=berror, error='Invalid item', mess=getmsgs(), jackpo=False)
 14122	
 14123	    lulls = db.cursor()
 14124	    lulls.execute('select item_name, item_piclink, item_price, item_shippin_to, item_shippin_price, item_digi, item_time, item_des, item_id, number_sold, amount_in_stock, item_category, item_vendor from items where item_id=%s', (item_id,))
 14125	    entries = [dict(title=row[0], piclink=row[1], price=row[2], shipto=row[3], shipprice=row[4], digi=row[5], date=str(row[6])[:7], des=row[7], idd=row[8], sold=row[9], instock=row[10], cate=row[11], vendor=row[12]) for row in lulls.fetchall()]
 14126	
 14127	
 14128	
 14129	    dersw = db.cursor()
 14130	    dersw.execute('select item_star from items where item_nick=%s', (item_id,))
 14131	    teststar = dersw.fetchall()    
 14132	    #print 'teststart: ' + str(teststar)    
 14133	    if not teststar:#len(teststar) == 0:
 14134		teststar = 0
 14135	    else:
 14136		teststar#[0]
 14137	
 14138	
 14139	    derw, derws = db.cursor(), db.cursor()
 14140	    derw.execute('select number_sold from items where item_id=%s', (item_id,))
 14141	    amsold = derw.fetchone()#[0]
 14142	    if not amsold:
 14143		amsold = 0
 14144	    else:
 14145		amsold = amsold[0]
 14146	    if len(str(amsold)) == 0:
 14147		amsold = 0
 14148	    derws.execute('select amount_in_stock from items where item_id=%s', (item_id,))
 14149	    amstock = derws.fetchone()#[0]
 14150	    if not amstock:
 14151		amstock = 0
 14152	    else:
 14153		amstock = amstock[0]	
 14154	    if len(str(amstock)) == 0:
 14155		amstock = 0
 14156	
 14157	    s1 = starhookup(teststar)[4]
 14158	    s2 = starhookup(teststar)[3]
 14159	    s3 = starhookup(teststar)[2]
 14160	    s4 = starhookup(teststar)[1]
 14161	    s5 = starhookup(teststar)[0]
 14162	    stars = [s5, s4, s3, s2, s1]
 14163	    sul = db.cursor()
 14164	    lsl = sul
 14165	    lsl.execute('select item_price from items where item_id=%s', (item_id,))
 14166	    mpe = lsl.fetchone()
 14167	    if mpe:
 14168		if len(mpe) == 0:
 14169		    pricee = 0
 14170		elif len(mpe[0]) == 0:
 14171		    pricee = 0
 14172		    error = 'No such item'
 14173		else:
 14174		    pricee = int(mpe[0])
 14175	    else:
 14176		error = 'No such item' #
 14177		pricee = 0
 14178	
 14179	    btcprice = float(pricee)
 14180	    btcprice = searchingfor().convertusd2btc(btcprice)
 14181	    moneroprice = handle_monero().convertusd2monero(str(pricee))
 14182	    mess = getmsgs()
 14183	
 14184	    db.close()
 14185	    jackpo = []
 14186	    if len(entries) == 1:#todo creta support for multi cats
 14187	           #sprint('entries0:', entries)
 14188	            entries = entries[0]
 14189	           #sprint('entries: ', entries)
 14190	            cate = entries.get('cate')
 14191	           #sprint('cate: ', cate)
 14192	            for x in fre.findall(r'(([A-Z]{1}[a-z-0-9]{0,254})\/([A-Z]{1}[a-z-0-9]{0,254}))', cate):
 14193	                if len(x) >= 1:
 14194	                    if len(x) == 3:
 14195	                        if not x[0] in str(jackpo):
 14196	                            jackpo.append({'main':x[2], 'sub':x[1], 'real':x[0]})
 14197	
 14198	    if len(jackpo)== 0:
 14199	        linew = wl_entries_cache().dictcats(cate)
 14200	        if len(linew) >= 1:
 14201	            jackpo = {'firstcat':linew[0]}
 14202	
 14203	    btclatest = searchingfor().latestbtcprice()
 14204	    xmrlatest = searchingfor().latestmoneroprice()
 14205	
 14206	   #sprint('Jackpo is: ', jackpo)
 14207	#this is idiotic , but i dont feel its safe to 
 14208	# store the option in the session, inmemory cache maybe? huh.... work...
 14209	    if flask.request.method == 'POST':
 14210		if flask.session.has_key('special') and flask.session:
 14211		    if not vertify_session(flask.session['special']):
 14212			return flask.redirect(flask.url_for('choice_mode'))
 14213		    pass
 14214		else:
 14215			return flask.redirect(flask.url_for('choice_mode'))	
 14216	
 14217	
 14218		if not verifynumberinput(item_id):
 14219		    return flask.redirect(flask.url_for('choice_mode'))
 14220	
 14221		if flask.session.has_key('special') and flask.session:
 14222		    if not vertify_session(flask.session['special']):
 14223			return flask.redirect(flask.url_for('choice_mode'))
 14224		    pass
 14225		else:
 14226		    return flask.redirect(flask.url_for('choice_mode')) 
 14227	
 14228		entries2 = wl_entries_cache().give_me_entries()
 14229		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 14230	
 14231		d = flask.request.form.get('id')
 14232	
 14233		payment_type = flask.request.form.get('cointype')
 14234		Quantity = int(flask.request.form.get('Quantity'))#isinstance int
 14235	
 14236		if not isinstance(Quantity, int):
 14237		    try:
 14238			a23432 = int(Quantity)
 14239			pass
 14240		    except ValueError:
 14241	               #sprint('valueerror')
 14242	                return flask.render_template('new/item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='invalid input, try again', mess=getmsgs(), jackpo=jackpo)
 14243		#create order
 14244	
 14245		db = connectitems()
 14246	
 14247		payment_type = db.escape_string(payment_type)
 14248		if not ['btc', 'xmr'].__contains__(payment_type.lower()):
 14249	           #sprint 'noc'
 14250		    return flask.render_template('new/item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='invalid input', mess=getmsgs(), entries2=entries2, jackpo=jackpo)
 14251	
 14252		if payment_type.lower() == 'xmr' and  not vendor_accept_monero(item_id):
 14253	           #sprint 'x'
 14254	            return flask.render_template('new/item.html', berror=berror, newsentries=wl_html_cache().get_news(), error='The Vendor does not accept monero payments', mess=getmsgs(), entries=entries, jackpo=jackpo)
 14255	
 14256		if payment_type.lower() == 'xmr' and not handle_monero().check_status():
 14257	#	   #sprint str(datetime.datetime.now()) + ': checkstatus fail| error error - backend is down' 
 14258	           #sprint 'loik'
 14259	            return flask.render_template('new/item.html', newsentries=wl_html_cache().get_news(), error='We are currently syncing the monero blockchain and can not accept any monero orders until that is done', mess=getmsgs(), entries=entries, jackpo=jackpo)
 14260		   
 14261		
 14262		db2 = connectcoinz()
 14263		pi = db2.cursor()
 14264		ipp = db.cursor()
 14265		ipp.execute('select amount_in_stock from items where item_id=%s', (item_id,))
 14266		hmm = ipp.fetchone()[0]
 14267		if len(hmm) == 0:
 14268		    hmm = 0
 14269		else:
 14270		    hmm = hmm
 14271		exam = int(hmm)
 14272		
 14273		
 14274		if Quantity > exam:
 14275		    error = 'Thats more then the vendor got in stock, we suggest you that you contact the vendor and ask him to increse the amount in stock for this item'# + """<br><a href='/msg/'> Send the Vendor a Message</a> """
 14276		    if hmm == 0:
 14277			vendor_item_del(item_id)
 14278			pass
 14279		    else:
 14280			pass
 14281		    db2.close()
 14282		    db.close()
 14283	           #sprint 'nopel'
 14284		    return flask.render_template('new/item.html', berror=berror, newsentries=wl_html_cache().get_news(), error=error, mess=getmsgs(), entries2=entries2, jackpo=jackpo)
 14285	
 14286	
 14287		pi.execute('select amount from coinorder where item_id=%s and status=%s and buyer=%s', (item_id, 'unpaid', nick))
 14288	
 14289		if pi.fetchone():
 14290	#	    entries2 = wl_entries_cache().give_me_entries()
 14291		    db2.close()
 14292		    db.close()	 
 14293	           #sprint('xx|xx')
 14294	            berror = item_id
 14295	            error = 'seems like you already have a unfinished order with this item'
 14296		    return flask.render_template('new/item.html', berror=berror, entries=entries, error=error, mess=getmsgs(), jackpo=jackpo)
 14297	
 14298		else:
 14299	
 14300		    pass
 14301		db = connectitems()
 14302	
 14303		fds,fs = db.cursor(),db.cursor()
 14304	
 14305		fds.execute('select item_vendor from items where item_id=%s', (d,))
 14306		fs.execute('select item_btcaddr from items where item_id=%s', (d,))	
 14307		seller = fds.fetchone()[0]
 14308	
 14309		vbtcaddr = fs.fetchone()[0]
 14310		name = gettoken()
 14311	#sprint 'adding to coinorder!'#i think its more secure to use the item_id rather then the 'd' input, maybe add validate
 14312	
 14313		addtocoinorder(name, nick, seller, item_id, Quantity, vbtcaddr, payment_type)	
 14314	
 14315		db2.close()
 14316		db.close()
 14317	
 14318		return flask.redirect('/buy_new/' + item_id, code=302) 
 14319	
 14320	
 14321	
 14322	
 14323	
 14324	    return flask.render_template('new/item.html', btclatest=btclatest, amsold=amsold, amstock=amstock, xmrlatest=xmrlatest,moneroprice=moneroprice, btcprice=btcprice, myname=nick, entries=entries, mess=mess, jackpo=jackpo, teststar=stars)
 14325	
 14326	
 14327	
 14328	
 14329	@wl.route('/new_messages', methods=['POST', 'GET'])
 14330	@wl.route('/messages_new', methods=['POST', 'GET'])
 14331	@noindex
 14332	@axss
 14333	@adate
 14334	@af
 14335	def newmessages():
 14336	    if flask.session.has_key('special') and flask.session:
 14337	        if not vertify_session(flask.session['special']):
 14338	            return flask.redirect(flask.url_for('choice_mode'))
 14339	        pass
 14340	    else:
 14341	        return flask.redirect(flask.url_for('choice_mode')) 	
 14342	
 14343	
 14344	    db = connectvens()
 14345	    error = False
 14346	    ee = db.cursor()
 14347	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 14348	    ee.execute('select role from vens where nick=%s', (nick,))
 14349	
 14350	    role = ee.fetchone()
 14351	
 14352	    role = role[0]    
 14353	
 14354	 
 14355	
 14356	    if flask.request.method == 'POST':
 14357		if flask.session.has_key('special') and flask.session:
 14358		    if not vertify_session(flask.session['special']):
 14359			return flask.redirect(flask.url_for('choice_mode'))
 14360		    pass
 14361		else:
 14362		    return flask.redirect(flask.url_for('choice_mode')) 	
 14363	
 14364		
 14365		db = connectvens()
 14366		error = 'Messages Deleted'
 14367	
 14368		ee = db.cursor()
 14369	
 14370		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 14371	
 14372		nick = str(nick)
 14373		
 14374		ee.execute('select role from vens where nick=%s', (nick,))
 14375	
 14376		role = ee.fetchone()
 14377	
 14378		role = role[0]	
 14379	
 14380		msg = flask.request.form.get('message')
 14381	
 14382	#	if msg:
 14383	        db2 = connectinbox()
 14384		xx = db2.cursor()
 14385	
 14386		xx.execute('delete from inbox where token=%s and send=%s', (msg, nick))
 14387	
 14388		db2.commit()
 14389	
 14390		if flask.request.form.get('shred'):
 14391		    we = db2.cursor()
 14392		    we.execute('delete from inbox where send=%s', (nick,))
 14393		    error = 'inbox has been deleted'
 14394		    db2.commit()
 14395		db = connectvens()
 14396		sts = db.cursor()
 14397	
 14398		sts.execute('select pgp from vens where nick=%s', (nick,))
 14399	
 14400		enc = sts.fetchone()
 14401	
 14402		enc = enc[0]
 14403	
 14404	#	if len(enc) <= 2:
 14405	
 14406	#	    enc = False
 14407	
 14408	#	else:
 14409	
 14410	#	    pass    
 14411	
 14412	
 14413	
 14414		if not enc:
 14415	
 14416		    enc = False
 14417	
 14418		else:
 14419	
 14420		    if 4 <= len(enc):
 14421	
 14422			enc = 'yupp with key: ' + str(enc)
 14423	
 14424			pass
 14425	
 14426		    else:
 14427	
 14428			enc = 'nope'  	    
 14429	
 14430		    
 14431	
 14432		mess = getmsgs()
 14433	
 14434		db2 = connectinbox()
 14435	
 14436		cull = db2.cursor()
 14437	
 14438		encr = enc#'off'
 14439	
 14440	
 14441	
 14442		cull.execute('select msg, hread, sender, token, title from inbox where send=%s', (nick,))
 14443	
 14444		entries = [dict(message=row[0], read=row[1], sender=row[2], token=row[3], title=row[4]) for row in cull.fetchall()]
 14445	
 14446		entries2 = wl_entries_cache().give_me_entries()    
 14447	
 14448		db.close()
 14449	
 14450		db2.close()
 14451		return flask.render_template('new/messages.html', newsentries=wl_html_cache().get_news(), pricetable = searchingfor().getpt(), soo = searchingfor().latestbtcprice(), role=role, encr=encr, mess=mess, entries2=entries2, entries=entries, error=error, emnick = decode_session(flask.session["special"])[0]) 
 14452	
 14453	#db = connect()
 14454	
 14455	    db2 = connectinbox()
 14456	    cull = db2.cursor()
 14457	
 14458	    luo = db.cursor()
 14459	
 14460	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 14461	
 14462	    nick = str(nick)
 14463	
 14464	    mess = getmsgs()  
 14465	
 14466	    #pricetable = getpt() #change   !!!!!!!!!!!!!!!!!!!!!!!!!!!!
 14467	
 14468	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 14469	
 14470	    cull.execute('select msg, hread, sender, token, title from inbox where send=%s', (nick,))
 14471	
 14472	    entries = [dict(message=row[0], read=row[1], sender=row[2], token=row[3], title=row[4]) for row in cull.fetchall()]
 14473	
 14474	    entries2 = wl_entries_cache().give_me_entries()    
 14475	
 14476	    sts = db.cursor()
 14477	
 14478	    sts.execute('select pgp from vens where nick=%s', (nick,))
 14479	
 14480	    enc = sts.fetchone()
 14481	
 14482	    enc = enc[0]
 14483	
 14484	
 14485	
 14486	    if not enc:
 14487	
 14488		enc = 'nope'
 14489	
 14490	    else:
 14491	
 14492		if 4 <= len(enc):
 14493		    enc = ' yupp with key:  ' + enc 
 14494		    pass
 14495		else:
 14496		    enc = 'nope'
 14497		    pass
 14498	
 14499		    
 14500	
 14501	
 14502	    encr = enc#'off'	# if user has pgp key auto encrypt all messages with user x's key    
 14503	
 14504	    db.close()
 14505	
 14506	    db2.close()
 14507	    return flask.render_template('new/messages.html', newsentries=wl_html_cache().get_news(), encr=encr, role=role, mess=mess, entries2=entries2, soo=searchingfor().latestbtcprice(), entries=entries, error=error, emnick = decode_session(flask.session["special"])[0], pricetable=searchingfor().getpt()) #pricetable=pricetable,)
 14508	
 14509	    return flask.render_template('new/messages.html')
 14510	
 14511	
 14512	
 14513	
 14514	
 14515	
 14516	
 14517	
 14518	@wl.route('/category_new', methods=['GET'])
 14519	@noindex
 14520	@axss
 14521	@adate
 14522	@af
 14523	def newcateogry():
 14524	    if flask.session.has_key('special') and flask.session:
 14525	        if not vertify_session(flask.session['special']):
 14526	            return flask.redirect(flask.url_for('choice_mode'))
 14527	        pass
 14528	    else:
 14529	        return flask.redirect(flask.url_for('choice_mode')) 	
 14530	
 14531	
 14532	    nick = decode_session(flask.session["special"])[0]
 14533	
 14534	    return flask.render_template('new/category.html', myname=nick, mess=getmsgs(), entries2=wl_entries_cache().give_me_entries())
 14535	
 14536	
 14537	@wl.route('/category_new_view/<macat>/', methods=['GET'])
 14538	@wl.route('/category_new_view/<macat>', methods=['GET'])
 14539	@noindex
 14540	@axss
 14541	@adate
 14542	@af
 14543	def newcateogryview(macat):
 14544	    if flask.session.has_key('special') and flask.session:
 14545	        if not vertify_session(flask.session['special']):
 14546	            return flask.redirect(flask.url_for('choice_mode'))
 14547	        pass
 14548	    else:
 14549	        return flask.redirect(flask.url_for('choice_mode')) 	
 14550	
 14551	
 14552	    nick = decode_session(flask.session["special"])[0] 
 14553	    cate=category = macat 
 14554	    
 14555	    if not whitelisted_cats.__contains__(cate) or shit_cleaner(cate):
 14556		error = 'not a valid category'    
 14557		ch = cate.replace('_', ' ')
 14558		return flask.render_template('new/view_category.html', error=error,  mess=getmsgs(), choice=ch, myname=nick)
 14559	    
 14560	    db = connectitems()
 14561	    db2 = connectvens()
 14562	    ch = category.replace('_', ' ')
 14563	    LL = db.cursor()
 14564	    findall = '%' + category + '%'
 14565	    mess = getmsgs()    
 14566	    ee = db2.cursor()
 14567	
 14568	    ee.execute('select role from vens where nick=%s', (nick,))
 14569	    role = ee.fetchone()
 14570	    role = role[0]    
 14571	    
 14572	    LL.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where item_category LIKE %s', (findall,))
 14573	    entries = [dict(item_id=row[0], i_name=row[1], i_des=row[2], i_start=row[3], i_price=row[4], i_ven=row[5], i_pic=row[6]) for row in LL.fetchall()]
 14574	    db.close()
 14575	    db2.close()
 14576	    return flask.render_template('new/view_category.html', myname=nick, mess=mess, choice=ch, entries=entries)
 14577	
 14578	
 14579	
 14580	
 14581	
 14582	
 14583	@wl.route('/category_new_view/<macat>/<subcat>', methods=['GET'])
 14584	@wl.route('/category_new_view/<macat>/<subcat>/', methods=['GET'])
 14585	@noindex
 14586	@axss
 14587	@adate
 14588	@af
 14589	def newcategoryview(macat, subcat):
 14590	    if flask.session.has_key('special') and flask.session:
 14591	        if not vertify_session(flask.session['special']):
 14592	            return flask.redirect(flask.url_for('choice_mode'))
 14593	        pass
 14594	    else:
 14595	        return flask.redirect(flask.url_for('choice_mode')) 	
 14596	
 14597	
 14598	    nick = decode_session(flask.session["special"])[0]
 14599	    cate=category = macat 
 14600	    subcate = subcat
 14601	    
 14602	    if not whitelisted_cats.__contains__(cate) or shit_cleaner(cate):
 14603		error = 'not a valid category'    
 14604		ch = cate.replace('_', ' ')
 14605		return flask.render_template('new/view_category.html', error=error,  mess=getmsgs(), choice=ch, myname=nick)
 14606	    
 14607	    db = connectitems()
 14608	    db2 = connectvens()
 14609	    ch = category + ' ' + subcate
 14610	    LL = db.cursor()
 14611	    find = '%' + category + '%'
 14612	    find2 = '%' + subcate + '%'
 14613	    mess = getmsgs()    
 14614	    findall = find2#subcate + '/' + category
 14615	    
 14616	    LL.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where item_category LIKE %s', (findall,))
 14617	    entries = [dict(item_id=row[0], i_name=row[1], i_des=row[2], i_start=row[3], i_price=row[4], i_ven=row[5], i_pic=row[6]) for row in LL.fetchall()]
 14618	    db.close()
 14619	    db2.close()
 14620	    return flask.render_template('new/view_category.html', myname=nick, mess=mess, choice=ch.replace('_', ' '), entries=entries)
 14621	
 14622	
 14623	
 14624	
 14625	
 14626	@wl.route('/auction_new', methods=['GET'])
 14627	@noindex
 14628	@axss
 14629	@adate
 14630	@af
 14631	def newauction():
 14632	    if flask.session.has_key('special') and flask.session:
 14633	        if not vertify_session(flask.session['special']):
 14634	            return flask.redirect(flask.url_for('choice_mode'))
 14635	        pass
 14636	    else:
 14637	        return flask.redirect(flask.url_for('choice_mode')) 	
 14638	
 14639	
 14640	    nick = decode_session(flask.session["special"])[0]
 14641	
 14642	    db = connectitems()
 14643	    db2 = connectauctions()
 14644	    ert = db2.cursor()
 14645	    wert = db.cursor()
 14646	    tet = db.cursor()
 14647	    tset = db.cursor()
 14648	    tset.execute('select count(item_id) from items where auction=%s', ('yes',))
 14649	    total = tset.fetchone()[0]    
 14650	    page, per_page, offset = get_page_args()
 14651	    sql = 'select item_name from items order by item_name limit {}, {}'.format(offset, per_page)     
 14652	
 14653	    tet.execute(sql)
 14654	
 14655	    items = tet.fetchall()
 14656	    ert.execute('select item_id, bid, vendor from auctions')
 14657	    pagination = get_pagination(page=page, per_page=per_page, total=total, record_name='items', format_total=True, format_number=True)
 14658	    entries3 = [dict(i_id=row[0], bid=row[1], vendor=row[2]) for row in ert.fetchall()]
 14659	    wert.execute('select item_id, item_name, item_des, item_star, item_price, item_vendor, item_piclink from items where auction=%s', ('yes',))
 14660	    entries = [dict(i_id=row[0], i_name=row[1], i_des=row[2], i_rate=row[3], i_price=row[4], i_vendor=row[5], i_pic = row[6]) for row in wert.fetchall()]
 14661	
 14662	
 14663	    db.close()
 14664	    db2.close()
 14665	    return flask.render_template('new/auctions.html', mess=getmsgs(), items=items, page=page, per_page=per_page, pagination=pagination, entries=entries, myname=nick)
 14666	
 14667	
 14668	
 14669	
 14670	@wl.route('/support_new', methods=['GET'])
 14671	@noindex
 14672	@axss
 14673	@adate
 14674	@af
 14675	def newsupport():
 14676	    if flask.session.has_key('special') and flask.session:
 14677	        if not vertify_session(flask.session['special']):
 14678	            return flask.redirect(flask.url_for('choice_mode'))
 14679	        pass
 14680	    else:
 14681	        return flask.redirect(flask.url_for('choice_mode')) 	
 14682	
 14683	    sent = False
 14684	    mess = getmsgs()
 14685	    if flask.request.method == 'POST':
 14686		if flask.session.has_key('special') and flask.session:
 14687		    if not vertify_session(flask.session['special']):
 14688			return flask.redirect(flask.url_for('choice_mode'))
 14689		    pass
 14690		else:
 14691		    return flask.redirect(flask.url_for('choice_mode')) 
 14692		db = connectsupport()
 14693	
 14694		db2 = connectvens()
 14695		title = flask.request.form.get('title')
 14696	
 14697		msg = flask.request.form.get('Message')
 14698	
 14699		gd = db.cursor()
 14700	
 14701		token = gettoken()
 14702	
 14703		nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 14704	
 14705		gd.execute('insert into support(title, msg, respond, awnserd, readd, token, fr0m) value(%s, %s, %s, %s, %s, %s, %s)', (title, msg, 'no', 'no', 'no', token, nick))
 14706	
 14707		db.commit()
 14708	
 14709		#db.close()
 14710	
 14711		
 14712	
 14713		msg = getmsgs()
 14714	
 14715		ee = db2.cursor()
 14716	
 14717		ee.execute('select role from vens where nick=%s', (nick,))
 14718	
 14719		role = ee.fetchone()
 14720	
 14721	
 14722		role = role[0]	
 14723	
 14724		error = 'support have been reached we will reply shortly'
 14725	
 14726		db.close()
 14727		db2.close()
 14728	
 14729	
 14730	    return flask.render_template('new/support.html', sent=sent, mess=mess)
 14731	
 14732	
 14733	
 14734	#new mode 
 14735	@wl.route('/login_new', methods=['POST', 'GET'])
 14736	@noindex
 14737	@axss
 14738	@adate
 14739	@af
 14740	def newlogin():
 14741	    error = False
 14742	    if flask.session.has_key("special") and flask.session["present"]:
 14743		if decode_session(flask.session["special"])[0]:
 14744		   #sprint decode_session(flask.session["special"])
 14745		    if len(decode_session(flask.session["special"])[0]) > 1:
 14746			return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 14747		    else:
 14748			pass
 14749	
 14750	    captchat = handle_captcha().captcha_gen()
 14751	    namnet = captchat[0]
 14752	    koden = captchat[1]
 14753	    mycapt = '/captchas/' + namnet.replace('/tmp/', '') + '.png'
 14754	   #sprint 'og koden'
 14755	   #sprint koden
 14756	
 14757	    if flask.request.method == 'POST':
 14758		if flask.session.has_key("special") and flask.session["present"]:
 14759		    if decode_session(flask.session["special"])[0]:
 14760		#sprint decode_session(flask.session["special"])
 14761			if len(decode_session(flask.session["special"])[0]) > 1:
 14762			    return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 14763			else:
 14764			    pass	
 14765		db1 = connectauth()
 14766		db2 = connectvens()
 14767		
 14768		nickname = db1.escape_string(flask.request.form['nickname'])
 14769		password = db1.escape_string(flask.request.form['Password'].replace('\\', 'd0'))
 14770		salt = db1.escape_string(flask.request.form['salt'].replace('\\', 'd0'))
 14771		captch = flask.request.form['captcha']
 14772		c2 = flask.request.form['c2']
 14773		
 14774		c2 = c2.replace('.png', '').replace('/captchas/', '')
 14775		
 14776		ogc = handleit().getit(c2).replace("\n", '')
 14777		
 14778		if not captch.lower() == ogc.lower():
 14779		    
 14780		    return flask.render_template('new/login.html', error='invalid captcha', mycapt=mycapt)
 14781		
 14782		cuu = db2.cursor()
 14783	
 14784		if password == 'censorednick' and nickname == 'theholygrail':
 14785		    alertsignal()
 14786		    error = 'wrong password or usr name'
 14787		    return flask.render_template('new/login.html', error=error, mycapt=mycapt)
 14788		orig = generate_password_hash(password, salt)
 14789		hashone = generate_password_hash(orig, hash1)        
 14790		hashtwo = generate_password_hash(hashone, hash2)
 14791		hashthree = generate_password_hash(hashtwo, hash3)
 14792		hashedpasswd = hashthree
 14793		sdfa = db1.cursor()
 14794		sdfa.execute('delete from authy where usr=%s', (nickname,))
 14795		db1.commit()
 14796		
 14797		crr = db2.cursor()
 14798		cddr = db2.cursor()
 14799		cddr.execute('select pgp from vens where nick=%s', (nickname,))
 14800		cuu.execute('select role from vens where nick=%s', (nickname,))
 14801		crr.execute('select password from vens where nick=%s', (nickname,))
 14802		yello = cddr.fetchone()
 14803		if not yello:
 14804		    pass
 14805		else:
 14806		    
 14807		    if len(yello[0]) > 3:
 14808			flask.session['2faw'] = nickname
 14809			flask.session['2fa'] = sign(nickname)
 14810			return flask.redirect(flask.url_for('secondfa2'))
 14811		    else:
 14812			pass
 14813		    #return flask.render_template('pgpverify.html', pgpmess='yello')
 14814		#db.commit()
 14815		#if not fetchall() error = 'wrong creds try again'
 14816		roler = cuu.fetchone()
 14817		result = crr.fetchone()
 14818		cus = db2.cursor()
 14819		cus.execute('select role from vens where nick=%s', (nickname,))
 14820		checki = cus.fetchone()
 14821		if not checki:
 14822		    error = 'wrong cred'
 14823		    db2.close()
 14824	#	    db.close()
 14825		    return flask.render_template('new/login.html', error=error, mycapt=mycapt)
 14826		else:
 14827		    pass
 14828	
 14829		if  hashedpasswd == result[0]:#[0]:
 14830		    if isloggedin(nickname):
 14831	#	#sprint 'member is logged in'
 14832			nicksessionremove(nickname)
 14833	#	#sprint 'removed other session'
 14834		    else:
 14835		    	print 'member is not logged in'
 14836		    flask.session['nick'] = nickname
 14837		    flask.session['nick2'] = sign(nickname)
 14838		   # flask.session['role'] = roler[0]
 14839		    #flask.session['present'] = True , todo remove
 14840	  #         #sprint(nickname, roler, '\n:', roler[0])
 14841	#            assert(type(roler) == list)
 14842	 #          #sprint(type(nickname))
 14843		    flask.session['special'] = get_session(nickname, roler[0])
 14844		    db1.close()
 14845		    db2.close()
 14846	#	   #sprint 'logging in!'
 14847		    return flask.redirect('/news_new')
 14848		    #return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 14849		   # return flask.redirect(flask.url_for(str(flask.session["role"])))
 14850		else:
 14851		    error = 'wrong cred'
 14852		    db1.close()
 14853		    db2.close()
 14854		    return flask.render_template('new/login.html', error=error, mycapt=mycapt)
 14855	    
 14856	    
 14857	    flask.session["present"] = False
 14858	   ##sprint koden
 14859	    
 14860	    
 14861	    #db1.close()
 14862	    #db1.close()
 14863	    return flask.render_template('new/login.html', error=error, mycapt=mycapt)
 14864	
 14865	
 14866	
 14867	
 14868	
 14869	
 14870	
 14871	
 14872	
 14873	
 14874	
 14875	
 14876	
 14877	
 14878	
 14879	
 14880	
 14881	
 14882	#max 3 tries
 14883	
 14884	
 14885	
 14886	def blakeyboi(has, hasr):
 14887	
 14888	    has = has.encode('utf-8')
 14889	
 14890	    h = blake2b(data=has, digest_size=64, key=hasr)
 14891	
 14892	    return h.hexdigest()
 14893	
 14894	
 14895	
 14896	
 14897	
 14898	
 14899	
 14900	
 14901	
 14902	@wl.route('/wrongone')
 14903	@noindex
 14904	@axss
 14905	@adate
 14906	@af
 14907	def wrongone():
 14908	
 14909	    return  'Captain oh Captain seems like your lost? return and try again'
 14910	
 14911	
 14912	@wl.route('/2fa2', methods=['POST', 'GET'])
 14913	@noindex
 14914	@axss
 14915	@adate
 14916	@af
 14917	def secondfa2():#2fa new fancy version
 14918	    if not flask.session:
 14919		return flask.redirect(flask.url_for('choice_mode'))
 14920	
 14921	    if not flask.session.has_key("present"):
 14922		return flask.redirect(flask.url_for('choice_mode'))
 14923	
 14924	    
 14925	
 14926	    
 14927	
 14928	    if flask.session.has_key("present") and flask.session["present"]:
 14929	
 14930		return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))#flask.redirect(flask.url_for(str(flask.session["role"])))
 14931	
 14932	    
 14933	
 14934	    if not flask.session.has_key("2fa") and not flask.session.has_key("2faw"):
 14935	
 14936		return flask.redirect(flask.url_for('choice_mode'))
 14937	
 14938	   
 14939	
 14940	    if  flask.session.has_key("2fa") and flask.session.has_key("2faw"):
 14941	
 14942		first = flask.session['2faw']
 14943	
 14944		second = flask.session['2fa']     
 14945	
 14946		if flask.request.method == 'POST':
 14947	
 14948		    #db = connect()
 14949	
 14950		    
 14951	
 14952		    code = flask.request.form.get('pgp')
 14953	
 14954		    if len(code) > 63:
 14955			sdw = db.cursor()
 14956			db = connectauth()
 14957			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))#todo only save in memory	
 14958		        db.commit()
 14959			db.close()
 14960					
 14961			return flask.render_template('new/pgpverify.html', error='wrong code')		
 14962		    if not code:
 14963	
 14964			#sdq = db.cursor()
 14965	
 14966			#sdq.execute('delete from authy where usr=%s)', (first,))
 14967	
 14968			#db.commit()
 14969	
 14970			sdw = db.cursor()
 14971	
 14972			db = connectauth()
 14973	
 14974			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))	
 14975	
 14976			db.commit()
 14977	
 14978			db.close()
 14979	
 14980			
 14981	
 14982			return flask.render_template('new/pgpverify.html', error='wrong code')
 14983	
 14984		    else:
 14985	
 14986			pass
 14987	
 14988		    db = connectauth()
 14989	
 14990		    sdt = db.cursor()
 14991	
 14992		    first = flask.session['2faw']
 14993	
 14994		    sdt.execute('select co from authy where usr=%s', (first,))
 14995	
 14996		    rtr = sdt.fetchone()
 14997	
 14998		    rtr = rtr[0]
 14999	
 15000		    if rtr == blakeyboi(first, code):
 15001	
 15002			db = connectvens()
 15003	
 15004			cuu = db.cursor()
 15005	
 15006			cuu.execute('select role from vens where nick=%s', (first,))
 15007	
 15008			roler = cuu.fetchone()
 15009	
 15010			#sdq = db.cursor()
 15011	
 15012			#sdq.execute('delete from authy where usr=%s)', (first,))
 15013	
 15014			#db.commit()		    
 15015	
 15016			flask.session['nick'] = first
 15017	
 15018			flask.session['special'] = get_session(first, roler[0])#roler[0]
 15019	
 15020			flask.session['present'] = True
 15021	
 15022			db2 = connectauth()
 15023			sdw = db2.cursor()
 15024	
 15025			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))	
 15026	
 15027			db2.commit()	 
 15028	
 15029			db.close()
 15030	
 15031			db2.close()
 15032	
 15033			flask.session.pop('2faw', None)
 15034	
 15035			flask.session.pop('2fa', None)
 15036	
 15037			return flask.redirect('/news_new', code=302)
 15038			#return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))		
 15039			#return flask.redirect(flask.url_for(str(flask.session["role"])))	    
 15040	
 15041		    else:
 15042	
 15043			sdw = db.cursor()
 15044	
 15045			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))
 15046	
 15047			db.commit()
 15048	
 15049			db.close()
 15050	
 15051			
 15052	
 15053			return flask.render_template('new/pgpverify.html', error='wrong code')
 15054	
 15055	    
 15056	
 15057	    
 15058	
 15059	
 15060		    db.close()
 15061		    return flask.render_template('new/pgpverify.html', error='wrong code')
 15062	
 15063		
 15064	
 15065		
 15066	
 15067		if verify(first, second):
 15068	
 15069		    #sdq = db.cursor()
 15070	
 15071		    #sdq.execute('delete from authy where usr=%s and usr=%s)', (first, first))
 15072	
 15073		    #db.commit() 	
 15074	
 15075		    msg = b64encode(urandom(39))
 15076	
 15077		    db = connectauth()
 15078	
 15079		    msg = msg.replace('=', '')
 15080	
 15081		    sdq = db.cursor()
 15082	
 15083		    msg2 = blakeyboi(first, msg)
 15084	
 15085		    sdq.execute('insert into authy (usr, co, tm) value(%s, %s, %s)', (first, msg2, '1'))
 15086	
 15087		    db.commit()
 15088	
 15089		    #db.close()
 15090	
 15091		    db2 = connectvens()
 15092	
 15093		    sdfd = db2.cursor()
 15094	
 15095		    sdfd.execute('select pgp from vens where nick=%s', (first,))
 15096	
 15097		    finger = sdfd.fetchone()
 15098	
 15099		    if not finger:
 15100	
 15101			db2.close()
 15102			db.close()
 15103			return flask.redirect(flask.url_for('choice_mode'))
 15104	
 15105		    else:
 15106	
 15107			
 15108	
 15109			signatu = gpg.encrypt(msg, finger[0], always_trust=True) #sign aswell
 15110	
 15111			mess = signatu
 15112	
 15113			
 15114	
 15115			pass
 15116	
 15117	 	    db.close() 
 15118		    return flask.render_template('new/pgpverify.html', pgpmess=mess)
 15119	
 15120		else:
 15121		    db.close()
 15122	
 15123		    flask.session.pop('2faw', None)
 15124	
 15125		    flask.session.pop('2fa', None)
 15126	
 15127		    return flask.redirect('/login_new', code=301)	
 15128	
 15129		db.close()
 15130	
 15131		return flask.render_template('pgpverify.html', error='hello')
 15132	
 15133	
 15134	
 15135	
 15136	@wl.route('/2fa', methods=['POST', 'GET'])
 15137	@noindex
 15138	@axss
 15139	@adate
 15140	@af
 15141	def secondfa():#2fa n nick
 15142	
 15143	    if not flask.session:
 15144		return flask.redirect(flask.url_for('choice_mode'))
 15145	
 15146	    
 15147	
 15148	    if not flask.session.has_key("present"):
 15149		return flask.redirect(flask.url_for('choice_mode'))
 15150	
 15151	    
 15152	
 15153	    
 15154	
 15155	    if flask.session.has_key("present") and flask.session["present"]:
 15156	
 15157		return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))#flask.redirect(flask.url_for(str(flask.session["role"])))
 15158	
 15159	    
 15160	
 15161	    if not flask.session.has_key("2fa") and not flask.session.has_key("2faw"):
 15162	
 15163		return flask.redirect(flask.url_for('choice_mode'))
 15164	
 15165	   
 15166	
 15167	    if  flask.session.has_key("2fa") and flask.session.has_key("2faw"):
 15168	
 15169		first = flask.session['2faw']
 15170	
 15171		second = flask.session['2fa']     
 15172	
 15173		if flask.request.method == 'POST':
 15174	
 15175		    #db = connect()
 15176	
 15177		    
 15178	
 15179		    code = flask.request.form.get('pgp')
 15180	
 15181		    if len(code) > 63:
 15182			sdw = db.cursor()
 15183			db = connectauth()
 15184			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))#todo only save in memory	
 15185		        db.commit()
 15186			db.close()
 15187					
 15188			return flask.render_template('pgpverify.html', error='wrong code')		
 15189		    if not code:
 15190	
 15191			#sdq = db.cursor()
 15192	
 15193			#sdq.execute('delete from authy where usr=%s)', (first,))
 15194	
 15195			#db.commit()
 15196	
 15197			sdw = db.cursor()
 15198	
 15199			db = connectauth()
 15200	
 15201			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))	
 15202	
 15203			db.commit()
 15204	
 15205			db.close()
 15206	
 15207			
 15208	
 15209			return flask.render_template('pgpverify.html', error='wrong code')
 15210	
 15211		    else:
 15212	
 15213			pass
 15214	
 15215		    db = connectauth()
 15216	
 15217		    sdt = db.cursor()
 15218	
 15219		    first = flask.session['2faw']
 15220	
 15221		    sdt.execute('select co from authy where usr=%s', (first,))
 15222	
 15223		    rtr = sdt.fetchone()
 15224	
 15225		    rtr = rtr[0]
 15226	
 15227		    if rtr == blakeyboi(first, code):
 15228	
 15229			db = connectvens()
 15230	
 15231			cuu = db.cursor()
 15232	
 15233			cuu.execute('select role from vens where nick=%s', (first,))
 15234	
 15235			roler = cuu.fetchone()
 15236	
 15237			#sdq = db.cursor()
 15238	
 15239			#sdq.execute('delete from authy where usr=%s)', (first,))
 15240	
 15241			#db.commit()		    
 15242	
 15243			flask.session['nick'] = first
 15244	
 15245			flask.session['special'] = get_session(first, roler[0])#roler[0]
 15246	
 15247			flask.session['present'] = True
 15248	
 15249			db2 = connectauth()
 15250			sdw = db2.cursor()
 15251	
 15252			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))	
 15253	
 15254			db2.commit()	 
 15255	
 15256			db.close()
 15257	
 15258			db2.close()
 15259	
 15260			flask.session.pop('2faw', None)
 15261	
 15262			flask.session.pop('2fa', None)
 15263	
 15264			return flask.redirect('/news_new', code=302)
 15265			#return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))		
 15266			#return flask.redirect(flask.url_for(str(flask.session["role"])))	    
 15267	
 15268		    else:
 15269	
 15270			sdw = db.cursor()
 15271	
 15272			sdw.execute('delete from authy where usr=%s and tm=%s', (first, 1))
 15273	
 15274			db.commit()
 15275	
 15276			db.close()
 15277	
 15278			
 15279	
 15280			return flask.render_template('pgpverify.html', error='wrong code')
 15281	
 15282	    
 15283	
 15284	    
 15285	
 15286		    #sdq = db.cursor()
 15287	
 15288		    #sdq.execute('delete from authy where usr=%s)', (first,))
 15289	
 15290		    #db.commit()	
 15291	
 15292		    db.close()
 15293		    return flask.render_template('pgpverify.html', error='wrong code')
 15294	
 15295		
 15296	
 15297		
 15298	
 15299		if verify(first, second):
 15300	
 15301		    #sdq = db.cursor()
 15302	
 15303		    #sdq.execute('delete from authy where usr=%s and usr=%s)', (first, first))
 15304	
 15305		    #db.commit() 	
 15306	
 15307		    msg = b64encode(urandom(39))
 15308	
 15309		    db = connectauth()
 15310	
 15311		    msg = msg.replace('=', '')
 15312	
 15313		    sdq = db.cursor()
 15314	
 15315		    msg2 = blakeyboi(first, msg)
 15316	
 15317		    sdq.execute('insert into authy (usr, co, tm) value(%s, %s, %s)', (first, msg2, '1'))
 15318	
 15319		    db.commit()
 15320	
 15321		    #db.close()
 15322	
 15323		    db2 = connectvens()
 15324	
 15325		    sdfd = db2.cursor()
 15326	
 15327		    sdfd.execute('select pgp from vens where nick=%s', (first,))
 15328	
 15329		    finger = sdfd.fetchone()
 15330	
 15331		    if not finger:
 15332	
 15333			db2.close()
 15334			db.close()
 15335			return flask.redirect(flask.url_for('choice_mode'))
 15336	
 15337		    else:
 15338	
 15339			
 15340	
 15341			signatu = gpg.encrypt(msg, finger[0], always_trust=True) #sign aswell
 15342	
 15343			mess = signatu
 15344	
 15345			
 15346	
 15347			pass
 15348	
 15349	 	    db.close() 
 15350		    return flask.render_template('pgpverify.html', pgpmess=mess)
 15351	
 15352		else:
 15353		    db.close()
 15354	
 15355		    flask.session.pop('2faw', None)
 15356	
 15357		    flask.session.pop('2fa', None)
 15358	
 15359		    return flask.redirect(url_for('login'))	
 15360	
 15361		db.close()
 15362	
 15363		return flask.render_template('pgpverify.html', error='hello')
 15364	
 15365		#return flask.redirect(flask.url_for('choice_mode'))   
 15366	
 15367	    
 15368	
 15369	
 15370	
 15371	    #pop session
 15372	
 15373	   # mess = 'test'
 15374	
 15375	    
 15376	
 15377	#oldus bogus
 15378	
 15379	##upgrade to vendor account
 15380	
 15381	#@wl.route('/vupgrade')
 15382	
 15383	#@noindex
 15384	
 15385	#@axss
 15386	
 15387	#@adate
 15388	
 15389	#@af
 15390	
 15391	#def vupgrade():
 15392	
 15393	    #if not flask.session:
 15394	
 15395		#return flask.redirect(flask.url_for('choice_mode'))    
 15396	
 15397	    
 15398	
 15399	    #return flask.render_template('upgrade_to_vendor.html')
 15400	
 15401	
 15402	
 15403	
 15404	
 15405	@wl.route('/wlk')
 15406	
 15407	@wl.route('/wk')
 15408	
 15409	#@noindex
 15410	
 15411	#@axss
 15412	
 15413	#@adate
 15414	
 15415	#@af
 15416	
 15417	#def wk():
 15418	
 15419	    #return flask.redirect(flask.url_for('wlpgpkey'))
 15420	
 15421	#gpg.export_keys('936D250897FEF801')keyid
 15422	
 15423	#wl pub pgp key
 15424	
 15425	@wl.route('/warezloaderskey')
 15426	
 15427	@noindex
 15428	
 15429	@adate
 15430	
 15431	@axss
 15432	
 15433	@af
 15434	
 15435	def wlpgpkey():
 15436	    return wl_html_cache().return_wlk()#more lightweight
 15437	
 15438	    #kya = gpg.export_keys(gpg.list_keys()[0]['fingerprint']).replace('-----BEGIN PGP PUBLIC KEY BLOCK-----\n', '-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: WarezLoader\n')#export the first pgp key 
 15439	
 15440	    #return '''
 15441	
 15442	#<html>
 15443	
 15444	
 15445	
 15446	#<center>
 15447	
 15448	#<t>this is our offical key make sure all u get that is encrypted with pgp from wl is signed with this key else something is wrong</t><br><br>
 15449	
 15450	#<h1>Warezloaders offical pgp key</h1>
 15451	
 15452	#<br><br><br>
 15453	
 15454	#<pre><code>
 15455	
 15456	#''' + kya + '''
 15457	
 15458	               #</html>    
 15459	
 15460	    
 15461	
 15462	    #'''
 15463	
 15464	    
 15465	
 15466	    
 15467	
 15468	   #RANDINT 2+- MONTHS in lastonline to avoid traffic attacks    
 15469	
 15470	    
 15471	
 15472	    
 15473	
 15474	    #return flask.redirect(flask.url_for('nono'))
 15475	
 15476	@wl.route('/tos.txt')
 15477	
 15478	@noindex
 15479	
 15480	@axss
 15481	
 15482	@adate
 15483	
 15484	@af
 15485	
 15486	def tos():
 15487	    meh = flask.render_template
 15488	
 15489	    return wl_html_cache().return_page('tos', meh)
 15490	
 15491	    #return '''
 15492	
 15493	    
 15494	
 15495	#By using this site u agree to the following:
 15496	
 15497	
 15498	
 15499	#We the administrators have the full power to remove ur ac etc..
 15500	
 15501	
 15502	
 15503	#You are not permitted to Post any Personall identifaible information     
 15504	
 15505	   
 15506	
 15507	#You are not permitted to sell other humans this inbludes any kind of human-trafficing
 15508	
 15509	
 15510	
 15511	#You may not hurt other members
 15512	
 15513	
 15514	
 15515	#You may not use the data or information you get from warezloader to start a legal
 15516	
 15517	#battle of anykind with anyone or anything
 15518	
 15519	    #'''
 15520	
 15521	#add random wordgenerator and personal grtz phrase = p_phrase
 15522	
 15523	
 15524	
 15525	def top10passwds():
 15526	    return ''
 15527	
 15528	
 15529	
 15530	#todo put a length max on meny drop down
 15531	
 15532	@wl.route('/new_signup', methods=['POST', 'GET'])
 15533	@noindex
 15534	@axss
 15535	@adate
 15536	@af
 15537	def newsignup():
 15538	    captchat = handle_captcha().captcha_gen()
 15539	    namnet = captchat[0]
 15540	    koden = captchat[1]
 15541	    mycapt = '/captchas/' + namnet.replace('/tmp/', '') + '.png'
 15542	
 15543	    if flask.request.method == 'POST':
 15544	       #sprint 'form man'
 15545	       #sprint flask.request.form.keys()
 15546	        nickname = flask.request.form['nickname']
 15547		password = flask.request.form['Password']
 15548		vpassword = flask.request.form['vPassword']
 15549		greetings_phrase = flask.request.form['grtz']
 15550		salt = flask.request.form['Salt']
 15551		pgp = flask.request.form['pgp']
 15552		captch = flask.request.form['captcha']
 15553		c2 = flask.request.form['c2']	
 15554	        email = 'root@dev.com'
 15555	       #sprint 'gets went throw'
 15556		c2 = c2.replace('.png', '').replace('/captchas/', '')
 15557	
 15558	        try:
 15559		    ogc = handleit().getit(c2).replace("\n", '')
 15560		except Exception:
 15561	           #sprint 'error return'
 15562		    return flask.render_template('new/register.html', error='invalid captcha', mycapt=mycapt)
 15563	
 15564	
 15565		if not captch.lower() == ogc.lower():
 15566	           #sprint 'error 0'
 15567		    return flask.render_template('new/register.html', error='invalid captcha', mycapt=mycapt)
 15568		
 15569		if nickname[:8].lower() == "cloaked_":
 15570	           #sprint 'cloaked'
 15571	            return flask.render_template('new/register.html', error='nickname taken try again')
 15572		else:
 15573		    pass
 15574	
 15575		if nickname == "censorednick":
 15576		    return flask.render_template('new/register.html', error='nickname taken try again')
 15577	
 15578		else:
 15579		    pass
 15580	
 15581		if 'censorednick' in nickname.lower():
 15582		    return flask.render_template('new/register.html', error='nickname taken try again')
 15583	
 15584		else:
 15585		    pass
 15586	
 15587		if 'censorednick' in nickname.lower():
 15588		    return flask.render_template('new/register.html', error='nickname taken try again')  
 15589	
 15590		else:
 15591		    pass
 15592	
 15593		if '' in nickname.lower():
 15594		    return flask.render_template('new/register.html', error='nickname taken try again')  
 15595	
 15596		else:
 15597		    pass
 15598	
 15599		    
 15600	
 15601		if 'censorednick' in nickname.lower():
 15602		    return flask.render_template('new/register.html', error='nickname taken try again')
 15603	
 15604		else:
 15605		    pass				
 15606	
 15607		if 'censorednick' in nickname.lower():
 15608		    return flask.render_template('new/register.html', error='nickname taken try again')  
 15609	
 15610		else:
 15611		    pass
 15612	
 15613	
 15614		if vpassword == password:
 15615	            db = connectvens()
 15616	            password = db.escape_string(password.replace('\\', 'd0'))
 15617	            salt = db.escape_string(salt.replace('\\', 'd0'))
 15618	            nickname = db.escape_string(nickname)
 15619	
 15620		    orighash = generate_password_hash(password, salt)
 15621		    hashone = generate_password_hash(orighash, hash1)
 15622		    hashtwo = generate_password_hash(hashone, hash2)
 15623		    hashthree = generate_password_hash(hashtwo, hash3)
 15624		    hashedpasswd = hashthree
 15625		#if 'warezloader' or 'censorednick' or 'censorednick' or 
 15626		    
 15627		    db2 = connectinbox()
 15628		    ll =  db.cursor()
 15629		    ll.execute('select role from vens where nick=%s', (nickname,))
 15630		    veri = ll.fetchall()
 15631		    finger = '0'
 15632	
 15633		    if pgp:
 15634			if pgp.endswith('-----END PGP PUBLIC KEY BLOCK-----') and pgp.startswith('-----BEGIN PGP PUBLIC KEY BLOCK-----'):
 15635	
 15636			    try:  
 15637				import_result = gpg.import_keys(pgp)
 15638				finger = import_result.fingerprints[0]
 15639	
 15640			    except Exception:
 15641				pass
 15642	
 15643			    pass  
 15644			else:
 15645			    error = 'invalid pgp key: ' + str(pgp)
 15646			    db.close()
 15647			    return flask.render_template('new/register.html', error=error)
 15648	
 15649		    else:
 15650			pass
 15651	
 15652		    if not finger:
 15653			finger = '0'
 15654		    else:
 15655			pass
 15656	
 15657	
 15658		    if veri:
 15659			db.close()
 15660			error = 'nickname taken try again'
 15661			return flask.render_template('new/register.html', error=error)
 15662	
 15663		    today = datetime.date.today() #cuz CURDATE() dont want to work
 15664		    role = 'user'
 15665		    cur = db.cursor()
 15666		    am = '0'
 15667		    cur.execute('insert into vens (nick, password, email, role, joined, amountitemsbought, p_phrase, pgp, holidaymode) values (%s, %s, %s, %s, %s, %s, %s, %s, %s)', (nickname,  hashedpasswd, email, role, today, am, greetings_phrase, finger, 'nope'))
 15668		    #welcome to wl msg
 15669		    addbtc(nickname)
 15670		    db.commit()
 15671	
 15672				#db.close()
 15673		    cuuu = db2.cursor()
 15674		    messs = '''
 15675	
 15676	Welcome to Warezloader!
 15677	
 15678	The legion of Warezloaders Welcomes you to Warezloader.
 15679	
 15680	If you need any help dont hesitate to contact /support.
 15681	
 15682		
 15683	
 15684	some quick security tips:
 15685	
 15686	by adding a pgp key to your account you automaticly enable: 2factor pgp authentication and message inbox encryption
 15687	
 15688	if you decide to leave due to something. Go in to /Settings and press shred. 
 15689	
 15690	to permanently delete all information about you.
 15691	
 15692	if you never have used WarezLoader before and you feel lost in the void, we recommend that you check out /get_started
 15693	
 15694	
 15695	    We hope that you will have a long and happy stay.
 15696	
 15697		Sincerly ~The Legion of Warezloaders		
 15698	
 15699				'''
 15700	
 15701		    tok = gettoken()
 15702		    cuuu.execute('insert into inbox (sender, send, msg, title, hread, token) values (%s, %s, %s, %s, %s, %s)', ('Legion of Warezloaders', nickname, messs, 'Welcome to Warezloader', 'no', tok))
 15703	
 15704		    db.commit()
 15705		    db2.commit()
 15706		    db2.close()
 15707		    db.close()
 15708	
 15709	
 15710		    return '''
 15711	
 15712	<html> <head><title>Welcome</title></head><center>			
 15713	
 15714				Welcome to Warezloader '''+ nickname + ''' 
 15715	
 15716				 <br>Welcome home<br>
 15717	
 15718				 <a href='/login_new'>Login</a> and start your adventure
 15719	
 15720				</html>
 15721	
 15722				''' 				 
 15723	
 15724	
 15725	
 15726		else:
 15727	
 15728			error = 'ur password doesnt match'
 15729			return flask.render_template('new/register.html', error=error, mycapt=mycapt)
 15730	
 15731	
 15732	    return flask.render_template('new/register.html', mycapt=mycapt)
 15733	
 15734	
 15735	
 15736	
 15737	#create user support, Legion of Warezloader, Support, or redir
 15738	
 15739	@wl.route('/signup', methods=['POST', 'GET'])
 15740	@noindex
 15741	@axss
 15742	@adate
 15743	@af
 15744	def signup():
 15745	    error = False
 15746	    if flask.session.has_key("special") and flask.session["present"]:
 15747		if decode_session(flask.session["special"])[0]:
 15748		   #sprint decode_session(flask.session["special"])
 15749		    if len(decode_session(flask.session["special"])[0]) > 1:
 15750			return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 15751		    else:
 15752			pass
 15753	
 15754	    captchat = handle_captcha().captcha_gen()
 15755	    namnet = captchat[0]
 15756	    koden = captchat[1]
 15757	    mycapt = '/captchas/' + namnet.replace('/tmp/', '') + '.png'
 15758	    if flask.request.method == 'POST':
 15759	
 15760		
 15761		if flask.session.has_key("special") and flask.session["present"]:
 15762		    if decode_session(flask.session["special"])[0]:
 15763		#sprint decode_session(flask.session["special"])
 15764			if len(decode_session(flask.session["special"])[0]) > 1:
 15765			    return flask.redirect(flask.url_for(decode_session(flask.session["special"])[1]))
 15766			else:
 15767			    pass	
 15768	
 15769	
 15770		nickname = flask.request.form['nickname']
 15771	
 15772			#db = connect()
 15773	
 15774		password = flask.request.form['Password']
 15775	
 15776		vpassword = flask.request.form['vPassword']
 15777	
 15778		greetings_phrase = flask.request.form['grtz']
 15779	
 15780		salt = flask.request.form['salt']
 15781	
 15782		email = flask.request.form['Email']
 15783	
 15784		pgp = flask.request.form['pgpkey']
 15785	
 15786		captch = flask.request.form['captcha']
 15787		c2 = flask.request.form['c2']	
 15788	
 15789	
 15790		
 15791		c2 = c2.replace('.png', '').replace('/captchas/', '')
 15792		#print c2
 15793		#print 'Getting it'
 15794		
 15795		
 15796	#solving
 15797	    #File "dr.py", line 7103, in signup                             
 15798		#ogc = handleit().getit(c2).replace("\n", '')                 
 15799	#AttributeError: 'NoneType' object has no attribute 'replace' 
 15800	        try:
 15801		    ogc = handleit().getit(c2).replace("\n", '')
 15802		except Exception:
 15803		    return flask.render_template('signup.html', error='invalid captcha', mycapt=mycapt)
 15804		#print ogc
 15805		#print 'got captcha'
 15806		#print captch
 15807		#print 'wanted'
 15808		#print ogc
 15809		if not captch.lower() == ogc.lower():
 15810		    #print captch.lower()
 15811		    #print ogc.lower()
 15812		    #print "'"+str(ogc)+"'"
 15813		    #print "'"+str(captch)+"'"
 15814		    #print len(ogc)
 15815		    #print len(captch)
 15816		    #handle_captcha().pop_temp(namnet)
 15817		    return flask.render_template('signup.html', error='invalid captcha', mycapt=mycapt)
 15818		
 15819		if nickname[:8].lower() == "cloaked_":
 15820		    return flask.render_template('signup.html', error='nickname taken try again')
 15821		else:
 15822		    pass
 15823	
 15824		if nickname == "censorednick":
 15825	
 15826		    return flask.render_template('signup.html', error='nickname taken try again')
 15827	
 15828		else:
 15829	
 15830		    pass
 15831	
 15832		if 'censorednick' in nickname.lower():
 15833		    return flask.render_template('signup.html', error='nickname taken try again')
 15834	
 15835		else:
 15836	
 15837		    pass
 15838	
 15839		if 'censorednick' in nickname.lower():
 15840	
 15841		    return flask.render_template('signup.html', error='nickname taken try again')  
 15842	
 15843		else:
 15844	
 15845		    pass
 15846	
 15847		if '' in nickname.lower():
 15848	
 15849		    return flask.render_template('signup.html', error='nickname taken try again')  
 15850	
 15851		else:
 15852	
 15853		    pass
 15854	
 15855		    
 15856	
 15857		if 'censorednick' in nickname.lower():
 15858	
 15859		    return flask.render_template('signup.html', error='nickname taken try again')
 15860	
 15861		else:
 15862	
 15863		    pass				
 15864	
 15865		if 'censorednick' in nickname.lower():
 15866	
 15867		    return flask.render_template('signup.html', error='nickname taken try again')  
 15868	
 15869		else:
 15870	
 15871		    pass
 15872	
 15873	
 15874	
 15875		 #verify password
 15876	
 15877		 #check if usr exists
 15878	
 15879		if vpassword == password:
 15880	            db = connectvens()
 15881	
 15882	            password = db.escape_string(password.replace('\\', 'd0'))
 15883	            nickname = db.escape_string(nickname.replace('\\', 'd0'))
 15884	            salt = db.escape_string(salt.replace('\\', 'd0'))
 15885	
 15886		    orighash = generate_password_hash(password, salt)
 15887		    hashone = generate_password_hash(orighash, hash1)
 15888		    hashtwo = generate_password_hash(hashone, hash2)
 15889		    hashthree = generate_password_hash(hashtwo, hash3)
 15890		    hashedpasswd = hashthree
 15891	
 15892		#if 'warezloader' or 'censorednick' 
 15893	
 15894		    db = connectvens()
 15895		    db2 = connectinbox()
 15896	
 15897		    ll =  db.cursor()
 15898	
 15899		    ll.execute('select role from vens where nick=%s', (nickname,))
 15900	
 15901		    veri = ll.fetchall()
 15902	
 15903				#db.close()
 15904	
 15905		    finger = '0'
 15906	
 15907		    if pgp:
 15908	
 15909			if pgp.endswith('-----END PGP PUBLIC KEY BLOCK-----') and pgp.startswith('-----BEGIN PGP PUBLIC KEY BLOCK-----'):
 15910	
 15911			
 15912			    try:  
 15913				import_result = gpg.import_keys(pgp)
 15914	
 15915				finger = import_result.fingerprints[0]
 15916	
 15917			    except Exception:
 15918				pass
 15919	
 15920			    pass  
 15921			else:
 15922	
 15923			    error = 'invalid pgp key: ' + str(pgp)
 15924	
 15925			    db.close()
 15926			    return flask.render_template('signup.html', error=error)
 15927	
 15928		    else:
 15929	
 15930			pass
 15931	
 15932		    if not finger:
 15933	
 15934			finger = '0'
 15935	
 15936		    else:
 15937	
 15938			pass
 15939	
 15940				##sprint a[0] + ' ' + a[1]
 15941	
 15942				#words = rw.random_words(count=10)
 15943	
 15944				#return words as personal phrase then insert it into db 
 15945	
 15946		    if veri:
 15947	
 15948			db.close()
 15949			error = 'nickname taken try again'
 15950	
 15951			return flask.render_template('signup.html', error=error)
 15952	
 15953		    today = datetime.date.today() #cuz CURDATE() dont want to work
 15954	
 15955		    role = 'user'
 15956	
 15957		    cur = db.cursor()
 15958	
 15959		    am = '0'
 15960	
 15961		    cur.execute('insert into vens (nick, password, email, role, joined, amountitemsbought, p_phrase, pgp, holidaymode) values (%s, %s, %s, %s, %s, %s, %s, %s, %s)', (nickname,  hashedpasswd, email, role, today, am, greetings_phrase, finger, 'nope'))
 15962	
 15963		    #welcome to wl msg
 15964	
 15965		    addbtc(nickname)
 15966	
 15967		    db.commit()
 15968	
 15969				#db.close()
 15970	
 15971				
 15972	
 15973		    cuuu = db2.cursor()
 15974	
 15975		    messs = '''
 15976	
 15977	Welcome to Warezloader!
 15978	
 15979	The legion of Warezloaders Welcomes you to Warezloader.
 15980	
 15981	If you need any help dont hesitate to contact /support.
 15982	
 15983		
 15984	
 15985	some quick security tips:
 15986	
 15987	by adding a pgp key to your account you automaticly enable: 2factor pgp authentication and message inbox encryption
 15988	
 15989	if you decide to leave due to something. Go in to /Settings and press shred. 
 15990	
 15991	to permanently delete all information about you.
 15992	
 15993	if you never have used WarezLoader before and you feel lost in the void, we recommend that you check out /get_started
 15994	
 15995	
 15996	    We hope that you will have a long and happy stay.
 15997	
 15998		Sincerly ~The Legion of Warezloaders		
 15999	
 16000				'''
 16001	
 16002		    tok = gettoken()
 16003	
 16004		    cuuu.execute('insert into inbox (sender, send, msg, title, hread, token) values (%s, %s, %s, %s, %s, %s)', ('Legion of Warezloaders', nickname, messs, 'Welcome to Warezloader', 'no', tok))
 16005	
 16006		    db.commit()
 16007	
 16008		    db2.commit()
 16009		    db2.close()
 16010		    db.close()
 16011	
 16012				
 16013	
 16014		    return '''
 16015	
 16016	<html> <head><title>Welcome</title></head><center>			
 16017	
 16018				Welcome to Warezloader '''+ nickname + ''' 
 16019	
 16020				 <br>Welcome home<br>
 16021	
 16022				 <a href='/login'>Login</a> and start your adventure
 16023	
 16024				</html>
 16025	
 16026				''' 				 
 16027	
 16028	
 16029	
 16030		else:
 16031	
 16032			error = 'ur password doesnt match'
 16033	
 16034			return flask.render_template('signup.html', error=error, mycapt=mycapt)
 16035	
 16036	    
 16037	
 16038			    #error = False
 16039	    meh = flask.render_template
 16040	
 16041	    return flask.render_template('signup.html', error=error, mycapt=mycapt)#wl_html_cache().return_page('signup' ,meh)#
 16042	
 16043	
 16044	
 16045	def addtocoinorder(name, buyer, seller, order_id, amount, coinaddress, cointype):
 16046	
 16047	    if cointype.lower() == 'btc':
 16048		address = pycoind.Address.generate(compressed = True)
 16049	
 16050		pk = address.private_key
 16051	
 16052		btcaddr = address.address
 16053	
 16054		pbk = address.public_key.encode('hex') 
 16055	
 16056	    elif cointype.lower() == 'xmr':
 16057		paymentid = handle_monero().generate_payment_id()
 16058		btcaddr = handle_monero().new_subaddress()
 16059		pk = 'monero'
 16060		pbk = paymentid
 16061	    db = connectcoinz()
 16062	
 16063	    wer = db.cursor()
 16064	
 16065	    status = 'unpaid'
 16066	
 16067	    paid = 'no'
 16068	
 16069	    wer.execute('insert into coinorder(name, address, pk, pbk, amount, status, paid, buyer, item_id, item_amount, vendor, item_btcaddr, notes) value(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)', (name, btcaddr, pk, pbk, amount, status, paid, buyer, order_id, amount, seller, coinaddress, cointype))
 16070	
 16071	    db.commit()
 16072	
 16073	    db.close()
 16074	
 16075	
 16076	
 16077	
 16078	def addbtc(nikk, nots='no note'):
 16079	
 16080	    address = pycoind.Address.generate(compressed = True)
 16081	
 16082	    pk = address.private_key
 16083	
 16084	    btcaddr = address.address
 16085	
 16086	    pbk = address.public_key.encode('hex') 
 16087	
 16088	    pai = 'no'
 16089	
 16090	    db = connectcoinz()
 16091	
 16092	    sls = db.cursor()
 16093	
 16094	    nickname = nikk
 16095	
 16096	    sls.execute('insert into coinz (address, pk, pbk, paid, usr, note) values (%s, %s, %s, %s, %s, %s)', (btcaddr, pk, pbk, pai, nickname, nots))
 16097	
 16098	    db.commit()
 16099	
 16100	    db.close()
 16101	
 16102	
 16103	
 16104	
 16105	
 16106	
 16107	
 16108	
 16109	
 16110	
 16111	
 16112	def sendtosupport(nick, nick2, msg, code, title):
 16113	
 16114	    db = connectsupport()
 16115	
 16116	    sa = db.cursor()
 16117	
 16118	    title = nick + ':' + title
 16119	
 16120	    sa.execute('insert into support (fr0m, msg, readd, respond, awnserd, token, title) values(%s, %s, %s, %s, %s, %s, %s)', (nick2, msg, 'no', 'no', 'no', code, title))	    
 16121	
 16122	    error = 'We have got your message'
 16123	
 16124	    db.commit()
 16125	
 16126	    db.close()
 16127	
 16128	    
 16129	
 16130	    return error
 16131	
 16132	
 16133	
 16134	
 16135	
 16136	#second parties sites
 16137	
 16138	#   []         []
 16139	#  -.. -      -..-
 16140	
 16141	#   /\         /\
 16142	
 16143	#¸,ø¤°`°¤ø,¸¸,ø¤°`°¤ø,¸
 16144	
 16145	
 16146	
 16147	@wl.route('/news')
 16148	@noindex
 16149	@axss
 16150	@af
 16151	@adate
 16152	def news():
 16153	    if not flask.session.has_key("nick"):
 16154	#sprint 'no session key'
 16155		return flask.redirect(flask.url_for('choice_mode'))
 16156	    if flask.session.has_key('special') and flask.session:
 16157		if not vertify_session(flask.session['special']):
 16158		   #sprint 'could not verify'
 16159		    return flask.redirect(flask.url_for('choice_mode'))
 16160		pass
 16161	    else:
 16162	#sprint 'random error'
 16163		return flask.redirect(flask.url_for('choice_mode'))       
 16164	
 16165	    # welcome to warezloader news, i am ur localnews ancor
 16166	
 16167	    meh = flask.render_template#latest news are
 16168	
 16169	
 16170	    return wl_html_cache().return_page('news', meh)
 16171	
 16172	
 16173	@wl.route('/news_new')
 16174	@noindex
 16175	@axss
 16176	@af
 16177	@adate
 16178	def newsn():
 16179	    if not flask.session.has_key("nick"):
 16180	##sprint 'no session key'
 16181		return flask.redirect(flask.url_for('choice_mode'))
 16182	    if flask.session.has_key('special') and flask.session:
 16183		if not vertify_session(flask.session['special']):
 16184	#	   #sprint 'could not verify'
 16185		    return flask.redirect(flask.url_for('choice_mode'))
 16186		pass
 16187	    else:
 16188	##sprint 'random error'
 16189		return flask.redirect(flask.url_for('choice_mode'))       
 16190	
 16191	
 16192	    meh = flask.render_template#latest news are
 16193	    return wl_html_cache().return_page('newnews', meh)
 16194	
 16195	
 16196	
 16197	
 16198	
 16199	
 16200	
 16201	#new new
 16202	#read new stuff
 16203	@wl.route('/news/<datum>')
 16204	@noindex
 16205	@axss
 16206	@af
 16207	@adate
 16208	def readnews(datum):
 16209		qq = wl_html_cache().get_news()
 16210	#sprint 'qq is:', qq
 16211		return 'News page'
 16212	
 16213	
 16214	
 16215	
 16216	
 16217	
 16218	
 16219	
 16220	
 16221	#the garden of lentil prototype 1 library edition
 16222	
 16223	@wl.route('/start/tgol')
 16224	
 16225	@wl.route('/start/tgol/')
 16226	
 16227	@noindex
 16228	
 16229	@axss
 16230	
 16231	@af
 16232	
 16233	@adate
 16234	
 16235	def lentil():
 16236	
 16237	    meh = flask.render_template#put files in virtualenv then get files from that folder
 16238	
 16239	    return wl_html_cache().return_page('tgol', meh)
 16240	
 16241	
 16242	
 16243	
 16244	
 16245	
 16246	
 16247	
 16248	
 16249	def getSize(filename):
 16250	
 16251	    os.path.getsize(filename) 
 16252	
 16253	
 16254	
 16255	#def getSize(filename):
 16256	
 16257	    #st = os.stat(filename)
 16258	
 16259	    #return st.st_size
 16260	
 16261	
 16262	
 16263	
 16264	
 16265	def getdir(filename):
 16266	
 16267	    os.path.isdir(filename)
 16268	
 16269	    
 16270	
 16271	
 16272	
 16273	
 16274	
 16275	#general library bs ----------------------------------------------------------------
 16276	
 16277	PY_LEGACY = sys.version_info[0] < 3
 16278	
 16279	if PY_LEGACY:
 16280	
 16281	    FileNotFoundError = type('FileNotFoundError', (OSError,), {})
 16282	
 16283	    range = xrange
 16284	
 16285	    filter = itertools.ifilter
 16286	
 16287	    str_base = basestring
 16288	
 16289	else:
 16290	
 16291	    FileNotFoundError = FileNotFoundError
 16292	
 16293	    range = range
 16294	
 16295	    filter = filter
 16296	
 16297	    str_base = str
 16298	
 16299	
 16300	
 16301	def isnonstriterable(iterable):
 16302	
 16303	    return hasattr(iterable, '__iter__') and not isinstance(iterable, str_base)
 16304	
 16305	
 16306	
 16307	def which(name,
 16308	
 16309	          env_path=[path.strip('"') for path in os.environ['PATH'].split(os.pathsep)],
 16310	
 16311	          is_executable_fnc=lambda path: (os.path.isfile(path) and os.access(path, os.X_OK))):
 16312	
 16313	    for path in env_path:
 16314	
 16315		exe_file = ospath.join(path, name)
 16316	
 16317		if is_executable_fnc(exe_file):
 16318	
 16319		    return exe_file
 16320	
 16321	    return None
 16322	
 16323	
 16324	
 16325	
 16326	
 16327	class PluginNotFoundError(ImportError):
 16328	
 16329	    pass
 16330	
 16331	
 16332	
 16333	
 16334	
 16335	class PluginManagerBase(object):
 16336	
 16337	
 16338	
 16339	    @property
 16340	
 16341	    def namespaces():
 16342	
 16343		return wl.config['plugin_namespaces']
 16344	
 16345	
 16346	
 16347	    def __init__(app=None):
 16348	
 16349		if not app is None:
 16350	
 16351		    init_app(wl)
 16352	
 16353	
 16354	
 16355	    def init_app(wl):
 16356	
 16357		app = wl
 16358	
 16359		if not hasattr(wl, 'extensions'):
 16360	
 16361		    wl.extensions = {}
 16362	
 16363		wl.extensions['plugin_manager'] = reload()
 16364	
 16365	
 16366	
 16367	    def reload():
 16368	
 16369		for plugin in wl.config.get('plugin_modules', ()):
 16370	
 16371		    load_plugin(plugin)
 16372	
 16373	
 16374	
 16375	    def load_plugin(plugin):
 16376	
 16377		names = [
 16378	
 16379		    '%s.%s' % (namespace, plugin) if namespace else plugin
 16380	
 16381		    for namespace in namespaces]
 16382	
 16383	
 16384	
 16385		for name in names:
 16386	
 16387		    if name in sys.modules:
 16388	
 16389			return sys.modules[name]
 16390	
 16391	
 16392	
 16393		for name in names:
 16394	
 16395		    try:
 16396	
 16397			__import__(name)
 16398	
 16399			return sys.modules[name]
 16400	
 16401		    except (ImportError, IndexError):
 16402	
 16403			pass
 16404	
 16405	
 16406	
 16407		raise PluginNotFoundError('No plugin module %r found, tried %r' % (plugin, names), plugin, names)
 16408	
 16409	
 16410	
 16411	
 16412	
 16413	
 16414	
 16415	class BlueprintPluginManager(PluginManagerBase):
 16416	
 16417	    def register_blueprint(blueprint):
 16418	
 16419		wl.register_blueprint(blueprint)
 16420	
 16421	
 16422	
 16423	    def load_plugin(plugin):
 16424	
 16425		module = super(BlueprintPluginManager, ).load_plugin(plugin)
 16426	
 16427		if hasattr(module, 'register_plugin'):
 16428	
 16429		    module.register_plugin()
 16430	
 16431		return module
 16432	
 16433	
 16434	
 16435	
 16436	
 16437	class MimetypeActionPluginManager(PluginManagerBase):
 16438	
 16439	    #action_class = collections.namedtuple('MimetypeAction', ('endpoint', 'widget'))
 16440	
 16441	    #button_class = widget.ButtonWidget
 16442	
 16443	    #style_class = widget.StyleWidget
 16444	
 16445	  #  javascript_class = widget.JavascriptWidget
 16446	
 16447	   # link_class = widget.LinkWidget
 16448	
 16449	
 16450	
 16451	    #_default_mimetype_functions = [
 16452	
 16453	        #mimetype.by_python,
 16454	
 16455	        #mimetype.by_file,
 16456	
 16457	        #mimetype.by_default,
 16458	
 16459	    #]
 16460	
 16461	
 16462	
 16463	    def __init__(app=None):
 16464	
 16465		_root = {}
 16466	
 16467		_widgets = {}
 16468	
 16469		_mimetype_functions = list(_default_mimetype_functions)
 16470	
 16471		super(MimetypeActionPluginManager, ).__init__(wl)
 16472	
 16473	
 16474	
 16475	    def get_mimetype(path):
 16476	
 16477		for fnc in _mimetype_functions:
 16478	
 16479		    mime = fnc(path)
 16480	
 16481		    if mime:
 16482	
 16483			return mime
 16484	
 16485		return mimetype.by_default(path)
 16486	
 16487	
 16488	
 16489	    def get_widgets(place):
 16490	
 16491		return _widgets.get(place, [])
 16492	
 16493	
 16494	
 16495	    def get_actions(file):
 16496	
 16497		category, variant = file.mimetype.split('/')
 16498	
 16499		return [
 16500	
 16501		    action_class(endpoint, widget.for_file(file))
 16502	
 16503		    for tree_category in (category, '*')
 16504	
 16505		    for tree_variant in (variant, '*')
 16506	
 16507		    for endpoint, widget in _root.get(tree_category, {}).get(tree_variant, ())
 16508	
 16509		]
 16510	
 16511	
 16512	
 16513	  #  def register_mimetype_function(, fnc):
 16514	
 16515	#	._mimetype_functions.insert(0, fnc)
 16516	
 16517	
 16518	
 16519	 #   def register_widget(, widget):
 16520	
 16521	#	._widgets.setdefault(widget.place, []).append(widget)
 16522	
 16523	
 16524	
 16525	 #   def register_action(, endpoint, widget, mimetypes=(), **kwargs):
 16526	
 16527	#	mimetypes = mimetypes if isnonstriterable(mimetypes) else (mimetypes,)
 16528	
 16529	#	action = (endpoint, widget)
 16530	
 16531	#	for mimetype in mimetypes:
 16532	
 16533	#	    category, variant = mimetype.split('/')
 16534	
 16535	#	    ._root.setdefault(category, {}).setdefault(variant, []).append(action)
 16536	
 16537	
 16538	
 16539	
 16540	
 16541	
 16542	
 16543	class WidgetBase(object):
 16544	
 16545	    place = None
 16546	
 16547	    def __init__(*args, **kwargs):
 16548	
 16549		args = args
 16550	
 16551		kwargs = kwargs
 16552	
 16553	
 16554	
 16555	    def for_file(file):
 16556	
 16557		return 
 16558	
 16559	
 16560	
 16561	    @classmethod
 16562	
 16563	    def from_file(cls, file):
 16564	
 16565		if not hasattr(cls, '__empty__'):
 16566	
 16567		    cls.__empty__ = cls()
 16568	
 16569		return cls.__empty__.for_file(file)
 16570	
 16571	
 16572	
 16573	
 16574	
 16575	class LinkWidget(WidgetBase):
 16576	
 16577	    place = 'link'
 16578	
 16579	
 16580	
 16581	    def __init__(text=None, css=None, icon=None):
 16582	
 16583		text = text
 16584	
 16585		css = css
 16586	
 16587		icon = icon
 16588	
 16589		super(LinkWidget, ).__init__()
 16590	
 16591	
 16592	
 16593	    def for_file(file):
 16594	
 16595		if None in (text, icon):
 16596	
 16597		    return __class__(
 16598	
 16599		        file.name if text is None else text,
 16600	
 16601		        css,
 16602	
 16603		        ('dir-icon' if file.is_directory else 'file-icon') if icon is None else icon)
 16604	
 16605		return 
 16606	
 16607	
 16608	
 16609	
 16610	
 16611	class ButtonWidget(WidgetBase):
 16612	
 16613	    place = 'button'
 16614	
 16615	    def __init__(html='', text='', css=''):
 16616	
 16617		content = Markup(html) if html else text
 16618	
 16619		css = css
 16620	
 16621		super(ButtonWidget, ).__init__()
 16622	
 16623	
 16624	
 16625	
 16626	
 16627	class StyleWidget(WidgetBase):
 16628	
 16629	    place = 'style'
 16630	
 16631	
 16632	
 16633	    @property
 16634	
 16635	    def href():
 16636	
 16637		return url_for(*args, **kwargs)
 16638	
 16639	
 16640	
 16641	
 16642	
 16643	
 16644	
 16645	
 16646	
 16647	
 16648	
 16649	
 16650	
 16651	
 16652	
 16653	
 16654	
 16655	
 16656	
 16657	
 16658	
 16659	#btc
 16660	
 16661	def check_password(password):
 16662	
 16663	    pubkey = keypairs.keys()[0]
 16664	
 16665	    get_private_key(pubkey, password)
 16666	
 16667	  
 16668	
 16669	def get_private_key(pubkey, password):
 16670	
 16671		#bitcoin.pw_decode
 16672	
 16673		pk = pw_decode(keypairs[pubkey], password)
 16674	
 16675	        # this checks the password
 16676	
 16677		#bitcoin.public_key_from_private_key
 16678	
 16679		if pubkey != public_key_from_private_key(pk):
 16680	
 16681		    raise InvalidPassword()
 16682	
 16683	        return pk
 16684	
 16685	
 16686	
 16687	def sign_transaction(tx, password):
 16688	
 16689	    if is_watching_only():
 16690	
 16691		return
 16692	
 16693	        # Raise if password is not correct.
 16694	
 16695	    check_password(password)
 16696	
 16697	        # Add private keys
 16698	
 16699	    keypairs = get_tx_derivations(tx)
 16700	
 16701	    for k, v in keypairs.items():
 16702	
 16703		keypairs[k] = get_private_key(v, password)
 16704	
 16705	        # Sign
 16706	
 16707	    if keypairs:
 16708	
 16709		tx.sign(keypairs)
 16710	
 16711	
 16712	
 16713	def get_private_key(pubkey, password):
 16714	
 16715	    pk = pw_decode(keypairs[pubkey], password)
 16716	
 16717	        # this checks the password
 16718	
 16719	    if pubkey != public_key_from_private_key(pk):
 16720	
 16721		raise InvalidPassword()
 16722	
 16723	    return pk
 16724	
 16725	
 16726	
 16727	
 16728	
 16729	
 16730	
 16731	def sha256(x):
 16732	
 16733	    return hashlib.sha256(x).digest()
 16734	
 16735	
 16736	
 16737	
 16738	
 16739	def Hash(x):
 16740	
 16741	    if type(x) is unicode: x=x.encode('utf-8')
 16742	
 16743	    return sha256(sha256(x))
 16744	
 16745	
 16746	
 16747	
 16748	
 16749	
 16750	
 16751	def hash_160(public_key):
 16752	
 16753	    if 'ANDROID_DATA' in os.environ:
 16754	
 16755		from Crypto.Hash import RIPEMD
 16756	
 16757		md = RIPEMD.new()
 16758	
 16759	    else:
 16760	
 16761		md = hashlib.new('ripemd')
 16762	
 16763	    md.update(sha256(public_key))
 16764	
 16765	    return md.digest()
 16766	
 16767	
 16768	
 16769	def public_key_to_bc_address(public_key):
 16770	
 16771	    h160 = hash_160(public_key)
 16772	
 16773	    return hash_160_to_bc_address(h160)
 16774	
 16775	
 16776	
 16777	def hash_160_to_bc_address(h160, addrtype = 0):
 16778	
 16779	    vh160 = chr(addrtype) + h160
 16780	
 16781	    h = Hash(vh160)
 16782	
 16783	    addr = vh160 + h[0:4]
 16784	
 16785	    return base_encode(addr, base=58)
 16786	
 16787	
 16788	
 16789	def bc_address_to_hash_160(addr):
 16790	
 16791	    bytes = base_decode(addr, 25, base=58)
 16792	
 16793	    return ord(bytes[0]), bytes[1:21]
 16794	
 16795	
 16796	
 16797	
 16798	
 16799	
 16800	
 16801	def GetPubKey(pubkey, compressed=False):
 16802	
 16803	    return i2o_ECPublicKey(pubkey, compressed)
 16804	
 16805	
 16806	
 16807	
 16808	
 16809	
 16810	
 16811	#util
 16812	
 16813	# decorator that#sprints execution time
 16814	
 16815	def profiler(func):
 16816	
 16817	    def do_profile(func, args, kw_args):
 16818	
 16819		n = func.func_name
 16820	
 16821		t0 = time.time()
 16822	
 16823		o = func(*args, **kw_args)
 16824	
 16825		t = time.time() - t0
 16826	
 16827	#sprint_error("[profiler]", n, "%.4f"%t)
 16828	
 16829		return o
 16830	
 16831	    return lambda *args, **kw_args: do_profile(func, args, kw_args)
 16832	
 16833	
 16834	
 16835	
 16836	
 16837	
 16838	
 16839	class Transaction:
 16840	
 16841	
 16842	
 16843	    def __str__(self):
 16844	
 16845		if self.raw is None:
 16846	
 16847		    self.raw = self.serialize()
 16848	
 16849		return self.raw
 16850	
 16851	
 16852	
 16853	    def __init__(self, raw):
 16854	
 16855		if raw is None:
 16856	
 16857		    self.raw = None
 16858	
 16859		elif type(raw) in [str, unicode]:
 16860	
 16861		    self.raw = raw.strip() if raw else None
 16862	
 16863		elif type(raw) is dict:
 16864	
 16865		    self.raw = raw['hex']
 16866	
 16867		else:
 16868	
 16869		    raise BaseException("cannot initialize transaction", raw)
 16870	
 16871		self._inputs = None
 16872	
 16873		self._outputs = None
 16874	
 16875		self.locktime = 0
 16876	
 16877	
 16878	
 16879	    def update(self, raw):
 16880	
 16881		self.raw = raw
 16882	
 16883		self._inputs = None
 16884	
 16885		self.deserialize()
 16886	
 16887	
 16888	
 16889	    def inputs(self):
 16890	
 16891		if self._inputs is None:
 16892	
 16893		    self.deserialize()
 16894	
 16895		return self._inputs
 16896	
 16897	
 16898	
 16899	    def outputs(self):
 16900	
 16901		if self._outputs is None:
 16902	
 16903		    self.deserialize()
 16904	
 16905		return self._outputs
 16906	
 16907	
 16908	
 16909	    def update_signatures(self, raw):
 16910	
 16911		"""Add new signatures to a transaction"""
 16912	
 16913		d = deserialize(raw)
 16914	
 16915		for i, txin in enumerate(self.inputs()):
 16916	
 16917		    sigs1 = txin.get('signatures')
 16918	
 16919		    sigs2 = d['inputs'][i].get('signatures')
 16920	
 16921		    for sig in sigs2:
 16922	
 16923			if sig in sigs1:
 16924	
 16925			    continue
 16926	
 16927			for_sig = Hash(self.tx_for_sig(i).decode('hex'))
 16928	
 16929			# der to string
 16930	
 16931			order = ecdsa.ecdsa.generator_secp256k1.order()
 16932	
 16933			r, s = ecdsa.util.sigdecode_der(sig.decode('hex'), order)
 16934	
 16935			sig_string = ecdsa.util.sigencode_string(r, s, order)
 16936	
 16937			pubkeys = txin.get('pubkeys')
 16938	
 16939			compressed = True
 16940	
 16941			for recid in range(4):
 16942	
 16943			    public_key = MyVerifyingKey.from_signature(sig_string, recid, for_sig, curve = SECP256k1)
 16944	
 16945			    pubkey = point_to_ser(public_key.pubkey.point, compressed).encode('hex')
 16946	
 16947			    if pubkey in pubkeys:
 16948	
 16949				public_key.verify_digest(sig_string, for_sig, sigdecode = ecdsa.util.sigdecode_string)
 16950	
 16951				j = pubkeys.index(pubkey)
 16952	
 16953			#sprint_error("adding sig", i, j, pubkey, sig)
 16954	
 16955				self._inputs[i]['signatures'][j] = sig
 16956	
 16957				self._inputs[i]['x_pubkeys'][j] = pubkey
 16958	
 16959				break
 16960	
 16961		# redo raw
 16962	
 16963		self.raw = self.serialize()
 16964	
 16965	
 16966	
 16967	
 16968	
 16969	    def deserialize(self):
 16970	
 16971		if self.raw is None:
 16972	
 16973		    self.raw = self.serialize()
 16974	
 16975		if self._inputs is not None:
 16976	
 16977		    return
 16978	
 16979		d = deserialize(self.raw)
 16980	
 16981		self._inputs = d['inputs']
 16982	
 16983		self._outputs = [(x['type'], x['address'], x['value']) for x in d['outputs']]
 16984	
 16985		self.locktime = d['lockTime']
 16986	
 16987		return d
 16988	
 16989	
 16990	
 16991	    @classmethod
 16992	
 16993	    def from_io(klass, inputs, outputs, locktime=0):
 16994	
 16995		self = klass(None)
 16996	
 16997		self._inputs = inputs
 16998	
 16999		self._outputs = outputs
 17000	
 17001		self.locktime = locktime
 17002	
 17003		return self
 17004	
 17005	
 17006	
 17007	    @classmethod
 17008	
 17009	    def multisig_script(klass, public_keys, m):
 17010	
 17011		n = len(public_keys)
 17012	
 17013		assert n <= 15
 17014	
 17015		assert m <= n
 17016	
 17017		op_m = format(opcodes.OP_1 + m - 1, 'x')
 17018	
 17019		op_n = format(opcodes.OP_1 + n - 1, 'x')
 17020	
 17021		keylist = [op_push(len(k)/2) + k for k in public_keys]
 17022	
 17023		return op_m + ''.join(keylist) + op_n + 'ae'
 17024	
 17025	
 17026	
 17027	    @classmethod
 17028	
 17029	    def pay_script(self, output_type, addr):
 17030	
 17031		if output_type == TYPE_SCRIPT:
 17032	
 17033		    return addr.encode('hex')
 17034	
 17035		elif output_type == TYPE_ADDRESS:
 17036	
 17037		    addrtype, hash_160 = bc_address_to_hash_160(addr)
 17038	
 17039		    if addrtype == 0:
 17040	
 17041			script = '76a9'                                      # op_dup, op_hash_160
 17042	
 17043			script += push_script(hash_160.encode('hex'))
 17044	
 17045			script += '88ac'                                     # op_equalverify, op_checksig
 17046	
 17047		    elif addrtype == 5:
 17048	
 17049			script = 'a9'                                        # op_hash_160
 17050	
 17051			script += push_script(hash_160.encode('hex'))
 17052	
 17053			script += '87'                                       # op_equal
 17054	
 17055		    else:
 17056	
 17057			raise
 17058	
 17059		else:
 17060	
 17061		    raise
 17062	
 17063		return script
 17064	
 17065	
 17066	
 17067	    @classmethod
 17068	
 17069	    def input_script(self, txin, i, for_sig):
 17070	
 17071		# for_sig:
 17072	
 17073		#   -1   : do not sign, estimate length
 17074	
 17075		#   i>=0 : serialized tx for signing input i
 17076	
 17077		#   None : add all known signatures
 17078	
 17079	
 17080	
 17081		p2sh = txin.get('redeemScript') is not None
 17082	
 17083		num_sig = txin['num_sig'] if p2sh else 1
 17084	
 17085		address = txin['address']
 17086	
 17087	
 17088	
 17089		x_signatures = txin['signatures']
 17090	
 17091		signatures = filter(None, x_signatures)
 17092	
 17093		is_complete = len(signatures) == num_sig
 17094	
 17095	
 17096	
 17097		if for_sig in [-1, None]:
 17098	
 17099		    # if we have enough signatures, we use the actual pubkeys
 17100	
 17101		    # use extended pubkeys (with bip32 derivation)
 17102	
 17103		    if for_sig == -1:
 17104	
 17105			# we assume that signature will be 0x48 bytes long
 17106	
 17107			pubkeys = txin['pubkeys']
 17108	
 17109			sig_list = [ "00" * 0x48 ] * num_sig
 17110	
 17111		    elif is_complete:
 17112	
 17113			pubkeys = txin['pubkeys']
 17114	
 17115			sig_list = ((sig + '01') for sig in signatures)
 17116	
 17117		    else:
 17118	
 17119			pubkeys = txin['x_pubkeys']
 17120	
 17121			sig_list = ((sig + '01') if sig else NO_SIGNATURE for sig in x_signatures)
 17122	
 17123		    script = ''.join(push_script(x) for x in sig_list)
 17124	
 17125		    if not p2sh:
 17126	
 17127			x_pubkey = pubkeys[0]
 17128	
 17129			if x_pubkey is None:
 17130	
 17131			    addrtype, h160 = bc_address_to_hash_160(txin['address'])
 17132	
 17133			    x_pubkey = 'fd' + (chr(addrtype) + h160).encode('hex')
 17134	
 17135			script += push_script(x_pubkey)
 17136	
 17137		    else:
 17138	
 17139			script = '00' + script          # put op_0 in front of script
 17140	
 17141			redeem_script = self.multisig_script(pubkeys, num_sig)
 17142	
 17143			script += push_script(redeem_script)
 17144	
 17145	
 17146	
 17147		elif for_sig==i:
 17148	
 17149		    script = txin['redeemScript'] if p2sh else self.pay_script(TYPE_ADDRESS, address)
 17150	
 17151		else:
 17152	
 17153		    script = ''
 17154	
 17155	
 17156	
 17157		return script
 17158	
 17159	
 17160	
 17161	    @classmethod
 17162	
 17163	    def serialize_input(self, txin, i, for_sig):
 17164	
 17165		# Prev hash and index
 17166	
 17167		s = txin['prevout_hash'].decode('hex')[::-1].encode('hex')
 17168	
 17169		s += int_to_hex(txin['prevout_n'], 4)
 17170	
 17171		# Script length, script, sequence
 17172	
 17173		script = self.input_script(txin, i, for_sig)
 17174	
 17175		s += var_int(len(script)/2)
 17176	
 17177		s += script
 17178	
 17179		s += int_to_hex(txin.get('sequence', 0xffffffff), 4)
 17180	
 17181		return s
 17182	
 17183	
 17184	
 17185	    def set_sequence(self, n):
 17186	
 17187		for txin in self.inputs():
 17188	
 17189		    txin['sequence'] = n
 17190	
 17191	
 17192	
 17193	    def BIP_LI01_sort(self):
 17194	
 17195		# See https://github.com/kristovatlas/rfc/blob/master/bips/bip-li01.mediawiki
 17196	
 17197		self._inputs.sort(key = lambda i: (i['prevout_hash'], i['prevout_n']))
 17198	
 17199		self._outputs.sort(key = lambda o: (o[2], self.pay_script(o[0], o[1])))
 17200	
 17201	
 17202	
 17203	    def serialize(self, for_sig=None):
 17204	
 17205		inputs = self.inputs()
 17206	
 17207		outputs = self.outputs()
 17208	
 17209		s = int_to_hex(1, 4)                                         # version
 17210	
 17211		s += var_int(len(inputs))                                    # number of inputs
 17212	
 17213		for i, txin in enumerate(inputs):
 17214	
 17215		    s += self.serialize_input(txin, i, for_sig)
 17216	
 17217		s += var_int(len(outputs))                                   # number of outputs
 17218	
 17219		for output in outputs:
 17220	
 17221		    output_type, addr, amount = output
 17222	
 17223		    s += int_to_hex(amount, 8)                               # amount
 17224	
 17225		    script = self.pay_script(output_type, addr)
 17226	
 17227		    s += var_int(len(script)/2)                              #  script length
 17228	
 17229		    s += script                                              #  script
 17230	
 17231		s += int_to_hex(self.locktime, 4)                            #  locktime
 17232	
 17233		if for_sig is not None and for_sig != -1:
 17234	
 17235		    s += int_to_hex(1, 4)                                    #  hash type
 17236	
 17237		return s
 17238	
 17239	
 17240	
 17241	    def tx_for_sig(self,i):
 17242	
 17243		return self.serialize(for_sig = i)
 17244	
 17245	
 17246	
 17247	    def hash(self):
 17248	
 17249		return Hash(self.raw.decode('hex'))[::-1].encode('hex')
 17250	
 17251	
 17252	
 17253	    def add_inputs(self, inputs):
 17254	
 17255		self._inputs.extend(inputs)
 17256	
 17257		self.raw = None
 17258	
 17259	
 17260	
 17261	    def add_outputs(self, outputs):
 17262	
 17263		self._outputs.extend(outputs)
 17264	
 17265		self.raw = None
 17266	
 17267	
 17268	
 17269	    def input_value(self):
 17270	
 17271		return sum(x['value'] for x in self.inputs())
 17272	
 17273	
 17274	
 17275	    def output_value(self):
 17276	
 17277		return sum( val for tp,addr,val in self.outputs())
 17278	
 17279	
 17280	
 17281	    def get_fee(self):
 17282	
 17283		return self.input_value() - self.output_value()
 17284	
 17285	
 17286	
 17287	    def is_final(self):
 17288	
 17289		return not any([x.get('sequence', 0xffffffff) < 0xffffffff - 1 for x in self.inputs()])
 17290	
 17291	
 17292	
 17293	    @profiler
 17294	
 17295	    def estimated_size(self):
 17296	
 17297		'''Return an estimated tx size in bytes.'''
 17298	
 17299		return len(self.serialize(-1)) / 2 if not self.is_complete() or self.raw is None else len(self.raw) / 2 # ASCII hex string
 17300	
 17301	
 17302	
 17303	    @classmethod
 17304	
 17305	    def estimated_input_size(self, txin):
 17306	
 17307		'''Return an estimated of serialized input size in bytes.'''
 17308	
 17309		return len(self.serialize_input(txin, -1, -1)) / 2
 17310	
 17311	
 17312	
 17313	    def signature_count(self):
 17314	
 17315		r = 0
 17316	
 17317		s = 0
 17318	
 17319		for txin in self.inputs():
 17320	
 17321		    if txin.get('is_coinbase'):
 17322	
 17323			continue
 17324	
 17325		    signatures = filter(None, txin.get('signatures',[]))
 17326	
 17327		    s += len(signatures)
 17328	
 17329		    r += txin.get('num_sig',-1)
 17330	
 17331		return s, r
 17332	
 17333	
 17334	
 17335	    def is_complete(self):
 17336	
 17337		s, r = self.signature_count()
 17338	
 17339		return r == s
 17340	
 17341	
 17342	
 17343	    def inputs_without_script(self):
 17344	
 17345		out = set()
 17346	
 17347		for i, txin in enumerate(self.inputs()):
 17348	
 17349		    if txin.get('scriptSig') == '':
 17350	
 17351			out.add(i)
 17352	
 17353		return out
 17354	
 17355	
 17356	
 17357	
 17358	
 17359	    def sign(self, keypairs):
 17360	
 17361		for i, txin in enumerate(self.inputs()):
 17362	
 17363		    num = txin['num_sig']
 17364	
 17365		    for x_pubkey in txin['x_pubkeys']:
 17366	
 17367			signatures = filter(None, txin['signatures'])
 17368	
 17369			if len(signatures) == num:
 17370	
 17371			    # txin is complete
 17372	
 17373			    break
 17374	
 17375			if x_pubkey in keypairs.keys():
 17376	
 17377			   #sprint_error("adding signature for", x_pubkey)
 17378	
 17379			    # add pubkey to txin
 17380	
 17381			    txin = self._inputs[i]
 17382	
 17383			    x_pubkeys = txin['x_pubkeys']
 17384	
 17385			    ii = x_pubkeys.index(x_pubkey)
 17386	
 17387			    sec = keypairs[x_pubkey]
 17388	
 17389			    pubkey = public_key_from_private_key(sec)
 17390	
 17391			    txin['x_pubkeys'][ii] = pubkey
 17392	
 17393			    txin['pubkeys'][ii] = pubkey
 17394	
 17395			    self._inputs[i] = txin
 17396	
 17397			    # add signature
 17398	
 17399			    for_sig = Hash(self.tx_for_sig(i).decode('hex'))
 17400	
 17401			    pkey = regenerate_key(sec)
 17402	
 17403			    secexp = pkey.secret
 17404	
 17405			    private_key = bitcoin.MySigningKey.from_secret_exponent( secexp, curve = SECP256k1 )
 17406	
 17407			    public_key = private_key.get_verifying_key()
 17408	
 17409			    sig = private_key.sign_digest_deterministic( for_sig, hashfunc=hashlib.sha256, sigencode = ecdsa.util.sigencode_der )
 17410	
 17411			    assert public_key.verify_digest( sig, for_sig, sigdecode = ecdsa.util.sigdecode_der)
 17412	
 17413			    txin['signatures'][ii] = sig.encode('hex')
 17414	
 17415			    self._inputs[i] = txin
 17416	
 17417	#sprint_error("is_complete", self.is_complete())
 17418	
 17419		self.raw = self.serialize()
 17420	
 17421	
 17422	
 17423	
 17424	
 17425	    def get_outputs(self):
 17426	
 17427		"""convert pubkeys to addresses"""
 17428	
 17429		o = []
 17430	
 17431		for type, x, v in self.outputs():
 17432	
 17433		    if type == TYPE_ADDRESS:
 17434	
 17435			addr = x
 17436	
 17437		    elif type == TYPE_PUBKEY:
 17438	
 17439			addr = public_key_to_bc_address(x.decode('hex'))
 17440	
 17441		    else:
 17442	
 17443			addr = 'SCRIPT ' + x.encode('hex')
 17444	
 17445		    o.append((addr,v))      # consider using yield (addr, v)
 17446	
 17447		return o
 17448	
 17449	
 17450	
 17451	    def get_output_addresses(self):
 17452	
 17453		return [addr for addr, val in self.get_outputs()]
 17454	
 17455	
 17456	
 17457	
 17458	
 17459	    def has_address(self, addr):
 17460	
 17461		return (addr in self.get_output_addresses()) or (addr in (tx.get("address") for tx in self.inputs()))
 17462	
 17463	
 17464	
 17465	    def as_dict(self):
 17466	
 17467		if self.raw is None:
 17468	
 17469		    self.raw = self.serialize()
 17470	
 17471		self.deserialize()
 17472	
 17473		out = {
 17474	
 17475		    'hex': self.raw,
 17476	
 17477		    'complete': self.is_complete(),
 17478	
 17479		    'final': self.is_final(),
 17480	
 17481		}
 17482	
 17483		return out
 17484	
 17485	
 17486	
 17487	
 17488	
 17489	    def requires_fee(self, wallet):
 17490	
 17491		# see https://en.bitcoin.it/wiki/Transaction_fees
 17492	
 17493		#
 17494	
 17495		# size must be smaller than 1 kbyte for free tx
 17496	
 17497		size = len(self.serialize(-1))/2
 17498	
 17499		if size >= 10000:
 17500	
 17501		    return True
 17502	
 17503		# all outputs must be 0.01 BTC or larger for free tx
 17504	
 17505		for addr, value in self.get_outputs():
 17506	
 17507		    if value < 1000000:
 17508	
 17509			return True
 17510	
 17511		# priority must be large enough for free tx
 17512	
 17513		threshold = 57600000
 17514	
 17515		weight = 0
 17516	
 17517		for txin in self.inputs():
 17518	
 17519		    height, conf, timestamp = wallet.get_tx_height(txin["prevout_hash"])
 17520	
 17521		    weight += txin["value"] * conf
 17522	
 17523		priority = weight / size
 17524	
 17525	#sprint_error(priority, threshold)
 17526	
 17527	
 17528	
 17529		return priority < threshold
 17530	
 17531	
 17532	
 17533	
 17534	
 17535	
 17536	
 17537	
 17538	
 17539	
 17540	
 17541	
 17542	
 17543	#cant import base58...
 17544	
 17545	
 17546	
 17547	__b58chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
 17548	
 17549	assert len(__b58chars) == 58
 17550	
 17551	
 17552	
 17553	__b43chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ$*+-./:'
 17554	
 17555	assert len(__b43chars) == 43
 17556	
 17557	
 17558	
 17559	
 17560	
 17561	def base_encode(v, base):
 17562	
 17563	    """ encode v, which is a string of bytes, to base58."""
 17564	
 17565	    if base == 58:
 17566	
 17567		chars = __b58chars
 17568	
 17569	    elif base == 43:
 17570	
 17571		chars = __b43chars
 17572	
 17573	    long_value = 0L
 17574	
 17575	    for (i, c) in enumerate(v[::-1]):
 17576	
 17577		long_value += (256**i) * ord(c)
 17578	
 17579	    result = ''
 17580	
 17581	    while long_value >= base:
 17582	
 17583		div, mod = divmod(long_value, base)
 17584	
 17585		result = chars[mod] + result
 17586	
 17587		long_value = div
 17588	
 17589	    result = chars[long_value] + result
 17590	
 17591	    # Bitcoin does a little leading-zero-compression:
 17592	
 17593	    # leading 0-bytes in the input become leading-1s
 17594	
 17595	    nPad = 0
 17596	
 17597	    for c in v:
 17598	
 17599		if c == '\0': nPad += 1
 17600	
 17601		else: break
 17602	
 17603	    return (chars[0]*nPad) + result
 17604	
 17605	
 17606	
 17607	
 17608	
 17609	def base_decode(v, length, base):
 17610	
 17611	    """ decode v into a string of len bytes."""
 17612	
 17613	    if base == 58:
 17614	
 17615		chars = __b58chars
 17616	
 17617	    elif base == 43:
 17618	
 17619		chars = __b43chars
 17620	
 17621	    long_value = 0L
 17622	
 17623	    for (i, c) in enumerate(v[::-1]):
 17624	
 17625		long_value += chars.find(c) * (base**i)
 17626	
 17627	    result = ''
 17628	
 17629	    while long_value >= 256:
 17630	
 17631		div, mod = divmod(long_value, 256)
 17632	
 17633		result = chr(mod) + result
 17634	
 17635		long_value = div
 17636	
 17637	    result = chr(long_value) + result
 17638	
 17639	    nPad = 0
 17640	
 17641	    for c in v:
 17642	
 17643		if c == chars[0]: nPad += 1
 17644	
 17645		else: break
 17646	
 17647	    result = chr(0)*nPad + result
 17648	
 17649	    if length is not None and len(result) != length:
 17650	
 17651		return None
 17652	
 17653	    return result
 17654	
 17655	
 17656	
 17657	
 17658	
 17659	def EncodeBase58Check(vchIn):
 17660	
 17661	    hash = Hash(vchIn)
 17662	
 17663	    return base_encode(vchIn + hash[0:4], base=58)
 17664	
 17665	
 17666	
 17667	
 17668	
 17669	def DecodeBase58Check(psz):
 17670	
 17671	    vchRet = base_decode(psz, None, base=58)
 17672	
 17673	    key = vchRet[0:-4]
 17674	
 17675	    csum = vchRet[-4:]
 17676	
 17677	    hash = Hash(key)
 17678	
 17679	    cs32 = hash[0:4]
 17680	
 17681	    if cs32 != csum:
 17682	
 17683		return None
 17684	
 17685	    else:
 17686	
 17687		return key
 17688	
 17689	
 17690	
 17691	#logg logg logg 
 17692	#
 17693	#>>> tx_utils.create_signed_tx(spendables_for_address('F'), ['1wS'], wifs=['y9f5']).as_hex()Traceback (most recent call last):
 17694	    #File "<stdin>", line 1, in <module>
 17695	    #File "/usr/local/lib/python2.7/dist-packages/pycoin/tx/tx_utils.py", line 203, in create_signed_tx
 17696		#tx = create_tx(spendables, payables, fee=fee, lock_time=lock_time, version=version)
 17697	    #File "/usr/local/lib/python2.7/dist-packages/pycoin/tx/tx_utils.py", line 104, in create_tx
 17698		#distribute_from_split_pool(tx, fee)
 17699	    #File "/usr/local/lib/python2.7/dist-packages/pycoin/tx/tx_utils.py", line 135, in distribute_from_split_pool
 17700		#raise ValueError("insufficient inputs for outputs")
 17701	#ValueError: insufficient inputs for outputs
 17702	#>>> spendables_for_address('')
 17703	#[Spendable<0.07777777 mbtc ":0" 0/0/0>]
 17704	
 17705	#if we give it an invalid priv key it spits out
 17706	#NameError: global name 'SolvingError' is not defined
 17707	    
 17708	    
 17709	    
 17710	    
 17711	
 17712	#captains log 3/jan finished the bitcoin create signed transaction script!
 17713	
 17714	#todo verify why this aint working, not verifying, check update in bitcoin network
 17715	
 17716	
 17717	#p0c
 17718	
 17719	def sendsigned(fromaddr, priv, reciever, fee=0.00001):#fee):
 17720	
 17721	    #if not fee:
 17722	
 17723		#fee = 0.00001
 17724	
 17725	    #else:
 17726	
 17727	       #pass
 17728	
 17729	    try:
 17730		tx = tx_utils.create_signed_tx(
 17731	
 17732		    spendables_for_address(fromaddr),
 17733	
 17734		    [reciever],
 17735	
 17736		    wifs=[priv],
 17737	
 17738		    fee=fee)    
 17739	
 17740		tx = tx.as_hex()
 17741	
 17742	#sprint 'tx success'
 17743	    except Exception:#^check
 17744		logging.debug('Transaction Creation has failed | From address and reciever')
 17745		logging.debug(fromaddr)
 17746		logging.debug(reciever)
 17747		tx = False#gives exception if bad 
 17748	#sprint 'tx not success'
 17749	    return tx
 17750	
 17751	
 17752	#is this da man pages?
 17753	#>>> try:
 17754	#...     tx_utils.create_signed_tx(spendables_for_address('1N'), ['S'], wifs=['Kwny9f5']).as_hex()
 17755	#... except Exception:
 17756	#...    #sprint 'error'
 17757	#...     pass
 17758	#... 
 17759	#error
 17760	
 17761	#>>> tx_utils.create_signed_tx(spendables_for_address('1Npp6pj'), ['14qENB'], wifs=['KwntYJSNbg3b']).as_hex()
 17762	#Traceback (most recent call last):
 17763	    #File "<stdin>", line 1, in <module>
 17764	    #File "/usr/local/lib/python2.7/dist-packages/pycoin/tx/tx_utils.py", line 203, in create_signed_tx
 17765		#tx = create_tx(spendables, payables, fee=fee, lock_time=lock_time, version=version)
 17766	    #File "/usr/local/lib/python2.7/dist-packages/pycoin/tx/tx_utils.py", line 104, in create_tx
 17767		#distribute_from_split_pool(tx, fee)
 17768	    #File "/usr/local/lib/python2.7/dist-packages/pycoin/tx/tx_utils.py", line 135, in distribute_from_split_pool
 17769		#raise ValueError("insufficient inputs for outputs")
 17770	#ValueError: insufficient inputs for outputs
 17771	
 17772	#...
 177735	
 17774	
 17775	
 17776	#this is working | without fee=0.0001
 17777	#>>> tx_utils.create_signed_tx(spendables_for_address('censored'), [''], wifs=[''])
 17778	#Tx [3727bea94] (v:1) [TxIn<a317630aca944ea5d0e389d5[0] "[0440228cae559160a4ddd4700eee5d9bcfc458e81e2d1901] [cc188297f74a2db9082b83]">] [TxOut<0.134 mbtc "OP_DUP OP_HASH160 [a07e5b240cdfeb909ede707] OP_EQUALVERIFY OP_CHECKSIG">]
 17779	#>>> tx = tx_utils.create_signed_tx(spendables_for_address('censored'), [''], wifs=[''])
 17780	#>>> tx = tx.as_hex()
 17781	#>>> tx
 17782	#u'0100000001d589e300000000'
 17783	#>>>
 17784	
 17785	#https://blockchain.info/sv/address/
 17786	
 17787	
 17788	def signed_simple_tx(fromaddr, privkey, toaddr):
 17789	    #without fee defined 
 17790	    try:
 17791		return tx_utils.create_signed_tx(spendables_for_address(fromaddr), [toaddr], wifs=[privkey]).as_hex()
 17792	    except Exception:
 17793		logger1.debug('Could not create tx bad amount of funds , allready pushed?')
 17794		logger1.debug(fromaddr)
 17795		logger1.debug(privkey)
 17796		logger1.debug(toaddr)
 17797		pass
 17798	
 17799	
 17800	#convert it 
 17801	
 17802	SATOSHI_PER_COIN = decimal.Decimal(int(1e8))
 17803	
 17804	COIN_PER_SATOSHI = decimal.Decimal(1)/SATOSHI_PER_COIN
 17805	
 17806	
 17807	
 17808	SATOSHI_TO_MBTC = decimal.Decimal(int(1e5))
 17809	
 17810	
 17811	
 17812	
 17813	
 17814	def satoshi_to_btc(satoshi_count):
 17815	
 17816	    if satoshi_count == 0:
 17817	
 17818		return decimal.Decimal(0)
 17819	
 17820	    r = satoshi_count * COIN_PER_SATOSHI
 17821	
 17822	    return r.normalize()
 17823	
 17824	
 17825	
 17826	
 17827	
 17828	def btc_to_satoshi(btc):
 17829	
 17830	    return int(decimal.Decimal(btc) * SATOSHI_PER_COIN)
 17831	
 17832	
 17833	
 17834	
 17835	
 17836	def satoshi_to_mbtc(satoshi_count):
 17837	
 17838	    if satoshi_count == 0:
 17839	
 17840		return decimal.Decimal(0)
 17841	
 17842	    r = satoshi_count / SATOSHI_TO_MBTC
 17843	
 17844	    return r.normalize()
 17845	
 17846	
 17847	
 17848	
 17849	
 17850	def mbtc_to_satoshi(btc):
 17851	
 17852	    return int(decimal.Decimal(btc) * SATOSHI_TO_MBTC)
 17853	
 17854	
 17855	
 17856	
 17857	
 17858	
 17859	
 17860	def h2b(h):
 17861	
 17862	    """
 17863	
 17864	    A version of binascii.unhexlify that accepts unicode. This is
 17865	
 17866	    no longer necessary as of Python 3.3. But it doesn't hurt.
 17867	
 17868	    """
 17869	
 17870	    return binascii.unhexlify(h.encode("ascii"))
 17871	
 17872	
 17873	
 17874	
 17875	
 17876	def h2b_rev(h):
 17877	
 17878	    return binascii.unhexlify(h.encode("utf8"))[::-1]
 17879	
 17880	
 17881	
 17882	
 17883	
 17884	def b2h(the_bytes):
 17885	
 17886	    return binascii.hexlify(the_bytes).decode("utf8")
 17887	
 17888	
 17889	
 17890	
 17891	
 17892	def b2h_rev(the_bytes):
 17893	
 17894	    return binascii.hexlify(bytearray(reversed(the_bytes))).decode("utf8")
 17895	
 17896	
 17897	
 17898	
 17899	
 17900	def stream_to_bytes(stream_f):
 17901	
 17902	    f = io.BytesIO()
 17903	
 17904	    stream_f(f)
 17905	
 17906	    return f.getvalue()
 17907	
 17908	
 17909	
 17910	
 17911	
 17912	def spendables_for_address(bitcoin_address):
 17913	
 17914	    """
 17915	
 17916	    Return a list of Spendable objects for the
 17917	
 17918	    given bitcoin address.
 17919	
 17920	    """
 17921	
 17922	    base_url = "https://insight.bitpay.com"
 17923	
 17924	    URL = "%s/api/addr/%s/utxo" % (base_url, bitcoin_address)
 17925	
 17926	    r = json.loads(urlopen(URL).read().decode("utf8"))
 17927	
 17928	    spendables = []
 17929	
 17930	    for u in r:
 17931	
 17932		coin_value = btc_to_satoshi(str(u.get("amount")))
 17933	
 17934		script = h2b(u.get("scriptPubKey"))
 17935	
 17936		previous_hash = h2b_rev(u.get("txid"))
 17937	
 17938		previous_index = u.get("vout")
 17939	
 17940		spendables.append(Spendable(coin_value, script, previous_hash, previous_index))
 17941	
 17942	    return spendables
 17943	
 17944	
 17945	
 17946	def spendables_for_addresses(self, bitcoin_addresses):
 17947	
 17948	    spendables = []
 17949	
 17950	    for addr in bitcoin_addresses:
 17951	
 17952		spendables.extend(self.spendables_for_address(addr))
 17953	
 17954	    return spendables
 17955	
 17956	
 17957	
 17958	
 17959	
 17960	
 17961	
 17962	
 17963	
 17964	
 17965	
 17966	
 17967	
 17968	# extended pubkeys
 17969	
 17970	
 17971	
 17972	def is_xpubkey(x_pubkey):
 17973	
 17974	    return x_pubkey[0:2] == 'ff'
 17975	
 17976	
 17977	
 17978	def parse_xpubkey(x_pubkey):
 17979	
 17980	    assert x_pubkey[0:2] == 'ff'
 17981	
 17982	    return BIP32_KeyStore.parse_xpubkey(x_pubkey)
 17983	
 17984	
 17985	
 17986	def xpubkey_to_address(x_pubkey):
 17987	
 17988	    if x_pubkey[0:2] in ['02','03','04']:
 17989	
 17990		pubkey = x_pubkey
 17991	
 17992	    elif x_pubkey[0:2] == 'ff':
 17993	
 17994		xpub, s = BIP32_KeyStore.parse_xpubkey(x_pubkey)
 17995	
 17996		pubkey = BIP32_KeyStore.get_pubkey_from_xpub(xpub, s)
 17997	
 17998	    elif x_pubkey[0:2] == 'fe':
 17999	
 18000		mpk, s = Old_KeyStore.parse_xpubkey(x_pubkey)
 18001	
 18002		pubkey = Old_KeyStore.get_pubkey_from_mpk(mpk, s[0], s[1])
 18003	
 18004	    elif x_pubkey[0:2] == 'fd':
 18005	
 18006		addrtype = ord(x_pubkey[2:4].decode('hex'))
 18007	
 18008		hash160 = x_pubkey[4:].decode('hex')
 18009	
 18010		pubkey = None
 18011	
 18012		address = hash_160_to_bc_address(hash160, addrtype)
 18013	
 18014	    else:
 18015	
 18016		raise BaseException("Cannnot parse pubkey")
 18017	
 18018	    if pubkey:
 18019	
 18020		address = public_key_to_bc_address(pubkey.decode('hex'))
 18021	
 18022	    return pubkey, address
 18023	
 18024	
 18025	
 18026	
 18027	
 18028	def as_dict(self):
 18029	
 18030	    if self.raw is None:
 18031	
 18032		self.raw = self.serialize()
 18033	
 18034	    self.deserialize()
 18035	
 18036	    out = {
 18037	
 18038	        'hex': self.raw,
 18039	
 18040	        'complete': self.is_complete(),
 18041	
 18042	        'final': self.is_final(),
 18043	
 18044	    }
 18045	
 18046	    return out
 18047	
 18048	
 18049	
 18050	
 18051	
 18052	
 18053	
 18054	#check
 18055	
 18056	def get_addr_utxo(self, address):
 18057	
 18058	    coins, spent = self.get_addr_io(address)
 18059	
 18060	    for txi in spent:
 18061	
 18062		coins.pop(txi)
 18063	
 18064	    out = []
 18065	
 18066	    for txo, v in coins.items():
 18067	
 18068		tx_height, value, is_cb = v
 18069	
 18070		prevout_hash, prevout_n = txo.split(':')
 18071	
 18072		x = {
 18073	
 18074		    'address':address,
 18075	
 18076		    'value':value,
 18077	
 18078		    'prevout_n':int(prevout_n),
 18079	
 18080		    'prevout_hash':prevout_hash,
 18081	
 18082		    'height':tx_height,
 18083	
 18084		    'coinbase':is_cb
 18085	
 18086		}
 18087	
 18088		out.append(x)
 18089	
 18090	    return out
 18091	
 18092	def get_addr_received(address):
 18093	
 18094	    received, sent = get_addr_io(address)
 18095	
 18096	    return sum([v for height, v, is_cb in received.values()])
 18097	
 18098	
 18099	
 18100	    # return the balance of a bitcoin address: confirmed and matured, unconfirmed, unmatured
 18101	
 18102	def get_addr_balance(address):
 18103	
 18104	    received, sent = get_addr_io(address)
 18105	
 18106	    c = u = x = 0
 18107	
 18108	    for txo, (tx_height, v, is_cb) in received.items():
 18109	
 18110		if is_cb and tx_height + COINBASE_MATURITY > get_local_height():
 18111	
 18112		    x += v
 18113	
 18114		elif tx_height > 0:
 18115	
 18116		    c += v
 18117	
 18118		else:
 18119	
 18120		    u += v
 18121	
 18122		if txo in sent:
 18123	
 18124		    if sent[txo] > 0:
 18125	
 18126			c -= v
 18127	
 18128		    else:
 18129	
 18130			u -= v
 18131	
 18132	    return c, u, x
 18133	
 18134	
 18135	
 18136	def get_spendable_coins(domain = None, exclude_frozen = False):
 18137	
 18138	    coins = []
 18139	
 18140	    if domain is None:
 18141	
 18142		domain = get_addresses()
 18143	
 18144	    if exclude_frozen:
 18145	
 18146		domain = set(domain) - frozen_addresses
 18147	
 18148	    for addr in domain:
 18149	
 18150		utxos = get_addr_utxo(addr)
 18151	
 18152		for x in utxos:
 18153	
 18154		    if x['coinbase'] and x['height'] + COINBASE_MATURITY > get_local_height():
 18155	
 18156			continue
 18157	
 18158		    coins.append(x)
 18159	
 18160		    continue
 18161	
 18162	    return coins
 18163	
 18164	
 18165	
 18166	
 18167	
 18168	
 18169	
 18170	
 18171	
 18172	
 18173	#btc feeeeeeeeeeeeeeeeee
 18174	
 18175	#0.00001 BTC/kb - https://en.bitcoin.it/wiki/Transaction_fees
 18176	
 18177	
 18178	#format to satoshi
 18179	
 18180	
 18181	
 18182	def format_satoshis_plain(x, decimal_point = 8):
 18183	
 18184	    '''Display a satoshi amount scaled.  Always uses a '.' as a decimal
 18185	
 18186	    point and has no thousands separator'''
 18187	
 18188	    scale_factor = pow(10, decimal_point)
 18189	
 18190	    return "{:.8f}".format(Decimal(x) / scale_factor).rstrip('0').rstrip('.')
 18191	
 18192	
 18193	
 18194	def format_satoshis(x, is_diff=False, num_zeros = 0, decimal_point = 8, whitespaces=False):
 18195	
 18196	    from locale import localeconv
 18197	
 18198	    if x is None:
 18199	
 18200		return 'unknown'
 18201	
 18202	    x = int(x)  # Some callers pass Decimal
 18203	
 18204	    scale_factor = pow (10, decimal_point)
 18205	
 18206	    integer_part = "{:n}".format(int(abs(x) / scale_factor))
 18207	
 18208	    if x < 0:
 18209	
 18210		integer_part = '-' + integer_part
 18211	
 18212	    elif is_diff:
 18213	
 18214		integer_part = '+' + integer_part
 18215	
 18216	    dp = localeconv()['decimal_point']
 18217	
 18218	    fract_part = ("{:0" + str(decimal_point) + "}").format(abs(x) % scale_factor)
 18219	
 18220	    fract_part = fract_part.rstrip('0')
 18221	
 18222	    if len(fract_part) < num_zeros:
 18223	
 18224		fract_part += "0" * (num_zeros - len(fract_part))
 18225	
 18226	    result = integer_part + dp + fract_part
 18227	
 18228	    if whitespaces:
 18229	
 18230		result += " " * (decimal_point - len(fract_part))
 18231	
 18232		result = " " * (15 - len(result)) + result
 18233	
 18234	    return result.decode('utf8')
 18235	
 18236	
 18237	
 18238	
 18239	
 18240	
 18241	
 18242	
 18243	
 18244	def create_URI(addr, amount, message):
 18245	
 18246	    if not bitcoin.is_address(addr):
 18247	
 18248		return ""
 18249	
 18250	    query = []
 18251	
 18252	    if amount:
 18253	
 18254		query.append('amount=%s'%format_satoshis_plain(amount))
 18255	
 18256	    if message:
 18257	
 18258		if type(message) == unicode:
 18259	
 18260		    message = message.encode('utf8')
 18261	
 18262		query.append('message=%s'%urllib.quote(message))
 18263	
 18264	    p = urlparse.ParseResult(scheme='bitcoin', netloc='', path=addr, params='', query='&'.join(query), fragment='')
 18265	
 18266	    return urlparse.urlunparse(p)
 18267	
 18268	
 18269	
 18270	
 18271	
 18272	def get_tx_info(tx):
 18273	
 18274	    is_relevant, is_mine, v, fee = get_wallet_delta(tx)
 18275	
 18276	    exp_n = None
 18277	
 18278	    can_broadcast = False
 18279	
 18280	    can_bump = False
 18281	
 18282	    label = ''
 18283	
 18284	    height = conf = timestamp = None
 18285	
 18286	    if tx.is_complete():
 18287	
 18288		tx_hash = tx.hash()
 18289	
 18290		if tx_hash in self.transactions.keys():
 18291	
 18292		    label = self.get_label(tx_hash)
 18293	
 18294		    height, conf, timestamp = self.get_tx_height(tx_hash)
 18295	
 18296		    if height > 0:
 18297	
 18298			if conf:
 18299	
 18300			    status = _("%d confirmations") % conf
 18301	
 18302			else:
 18303	
 18304			    status = _('Not verified')
 18305	
 18306		    else:
 18307	
 18308			status = _('Unconfirmed')
 18309	
 18310			if fee is None:
 18311	
 18312			    fee = self.tx_fees.get(tx_hash)
 18313	
 18314			if fee:
 18315	
 18316			    size = tx.estimated_size()
 18317	
 18318			    fee_per_kb = fee * 1000 / size
 18319	
 18320			    exp_n = self.network.reverse_dynfee(fee_per_kb)
 18321	
 18322			can_bump = is_mine and not tx.is_final()
 18323	
 18324		else:
 18325	
 18326		    status = _("Signed")
 18327	
 18328		    can_broadcast = self.network is not None
 18329	
 18330	    else:
 18331	
 18332		s, r = tx.signature_count()
 18333	
 18334		status = _("Unsigned") if s == 0 else _('Partially signed') + ' (%d/%d)'%(s,r)
 18335	
 18336		tx_hash = None
 18337	
 18338	
 18339	
 18340	    if is_relevant:
 18341	
 18342		if is_mine:
 18343	
 18344		    if fee is not None:
 18345	
 18346			amount = v + fee
 18347	
 18348		    else:
 18349	
 18350			amount = v
 18351	
 18352		else:
 18353	
 18354		    amount = v
 18355	
 18356	    else:
 18357	
 18358		amount = None
 18359	
 18360	
 18361	
 18362	    return tx_hash, status, label, can_broadcast, can_bump, amount, fee, height, conf, timestamp, exp_n
 18363	
 18364	
 18365	
 18366	
 18367	
 18368	
 18369	
 18370	
 18371	
 18372	
 18373	
 18374	
 18375	
 18376	def get_address_from_output_script(bytes):
 18377	
 18378	    decoded = [ x for x in script_GetOp(bytes) ]
 18379	
 18380	
 18381	
 18382	    # The Genesis Block, self-payments, and pay-by-IP-address payments look like:
 18383	
 18384	    # 65 BYTES:... CHECKSIG
 18385	
 18386	    match = [ opcodes.OP_PUSHDATA4, opcodes.OP_CHECKSIG ]
 18387	
 18388	    if match_decoded(decoded, match):
 18389	
 18390		return TYPE_PUBKEY, decoded[0][1].encode('hex')
 18391	
 18392	
 18393	
 18394	    # Pay-by-Bitcoin-address TxOuts look like:
 18395	
 18396	    # DUP HASH160 20 BYTES:... EQUALVERIFY CHECKSIG
 18397	
 18398	    match = [ opcodes.OP_DUP, opcodes.OP_HASH160, opcodes.OP_PUSHDATA4, opcodes.OP_EQUALVERIFY, opcodes.OP_CHECKSIG ]
 18399	
 18400	    if match_decoded(decoded, match):
 18401	
 18402		return TYPE_ADDRESS, hash_160_to_bc_address(decoded[2][1])
 18403	
 18404	
 18405	
 18406	    # p2sh
 18407	
 18408	    match = [ opcodes.OP_HASH160, opcodes.OP_PUSHDATA4, opcodes.OP_EQUAL ]
 18409	
 18410	    if match_decoded(decoded, match):
 18411	
 18412		return TYPE_ADDRESS, hash_160_to_bc_address(decoded[1][1],5)
 18413	
 18414	
 18415	
 18416	    return TYPE_SCRIPT, bytes
 18417	
 18418	
 18419	
 18420	
 18421	
 18422	
 18423	
 18424	
 18425	
 18426	
 18427	
 18428	#from test_transaction.py
 18429	
 18430	#call local rpc
 18431	
 18432	#test pay   #not used remove?
 18433	
 18434	def sendemcoins(addr, amount):
 18435	
 18436	    pbk = bc_address_to_hash_160(addr)
 18437	
 18438	    expected = {
 18439	
 18440	        'inputs': [{
 18441	
 18442	            'address': addr,
 18443	
 18444	            'is_coinbase': False,
 18445	
 18446	            'num_sig': 1,
 18447	
 18448	            'prevout_hash': '3140eb24b4338c2a',
 18449	
 18450	            'prevout_n': 0,
 18451	
 18452	            'pubkeys': [pbk],
 18453	
 18454	            'scriptSig': '3046022100a82b6',
 18455	
 18456	            'sequence': 4294967295,
 18457	
 18458	            'signatures': ['29d985'],
 18459	
 18460	            'x_pubkeys': [pbk]}],
 18461	
 18462	        'lockTime': 0,
 18463	
 18464	        'outputs': [{
 18465	
 18466	            'address': 'XnZ3',
 18467	
 18468	            'prevout_n': 0,
 18469	
 18470	            'scriptPubKey': '',
 18471	
 18472	            'type': TYPE_ADDRESS,
 18473	
 18474	            'value': 1000000}],
 18475	
 18476	        'version': 1
 18477	
 18478	    }
 18479	
 18480	    tx = transaction.Transaction(signed_blob)
 18481	
 18482	    self.assertEquals(tx.deserialize(), expected)
 18483	
 18484	    self.assertEquals(tx.deserialize(), None)
 18485	
 18486	    self.assertEquals(tx.as_dict(), {'hex': signed_blob, 'complete': True, 'final': True})
 18487	
 18488	    
 18489	
 18490	    self.assertEquals(tx.inputs_without_script(), set())
 18491	
 18492	    self.assertEquals(tx.serialize(), signed_blob)
 18493	
 18494	    
 18495	
 18496	    tx.update_signatures(signed_blob)
 18497	
 18498	    broadcast(self, tx)
 18499	
 18500	    return 'ok'
 18501	
 18502	
 18503	
 18504	    
 18505	
 18506	
 18507	
 18508	#t0do: be an asshole and add a small transaction fee to my address, lol
 18509	
 18510	
 18511	
 18512	
 18513	
 18514	
 18515	
 18516	
 18517	
 18518	def synchronous_get(self, request, timeout=30):
 18519	
 18520	    queue = Queue.Queue()
 18521	
 18522	    self.send([request], queue.put)
 18523	
 18524	    try:
 18525	
 18526		r = queue.get(True, timeout)
 18527	
 18528	    except Queue.Empty:
 18529	
 18530		raise BaseException('Server did not answer')
 18531	
 18532	    if r.get('error'):
 18533	
 18534		raise BaseException(r.get('error'))
 18535	
 18536	    return r.get('result')
 18537	
 18538	
 18539	
 18540	
 18541	
 18542	
 18543	
 18544	
 18545	
 18546	
 18547	
 18548	def broadcast(self, tx, timeout=30):
 18549	
 18550	    tx_hash = tx.hash()
 18551	
 18552	    try:
 18553	
 18554		out = self.synchronous_get(('blockchain.transaction.broadcast', [str(tx)]), timeout)
 18555	
 18556	    except BaseException as e:
 18557	
 18558		return False, "error: " + str(e)
 18559	
 18560	    if out != tx_hash:
 18561	
 18562		return False, "error: " + out
 18563	
 18564	    return True, out
 18565	
 18566	
 18567	
 18568	def send(self, messages, callback):
 18569	
 18570	    '''Messages is a list of (method, params) tuples'''
 18571	
 18572	    with self.lock:
 18573	
 18574		self.pending_sends.append((messages, callback))
 18575	
 18576	
 18577	
 18578	
 18579	
 18580	
 18581	
 18582	
 18583	
 18584	def process_pending_sends(self):
 18585	
 18586	    # Requests needs connectivity.  If we don't have an interface,
 18587	
 18588	    # we cannot process them.
 18589	
 18590	    if not self.interface:
 18591	
 18592		return
 18593	
 18594	
 18595	
 18596	    with self.lock:
 18597	
 18598		sends = self.pending_sends
 18599	
 18600		self.pending_sends = []
 18601	
 18602	
 18603	
 18604	    for messages, callback in sends:
 18605	
 18606		for method, params in messages:
 18607	
 18608		    r = None
 18609	
 18610		    if method.endswith('.subscribe'):
 18611	
 18612			k = self.get_index(method, params)
 18613	
 18614			# add callback to list
 18615	
 18616			l = self.subscriptions.get(k, [])
 18617	
 18618			if callback not in l:
 18619	
 18620			    l.append(callback)
 18621	
 18622			self.subscriptions[k] = l
 18623	
 18624			# check cached response for subscriptions
 18625	
 18626			r = self.sub_cache.get(k)
 18627	
 18628		    if r is not None:
 18629	
 18630			util.print_error("cache hit", k)
 18631	
 18632			callback(r)
 18633	
 18634		    else:
 18635	
 18636			message_id = self.queue_request(method, params)
 18637	
 18638			self.unanswered_requests[message_id] = method, params, callback
 18639	
 18640	
 18641	
 18642	
 18643	
 18644	
 18645	
 18646	
 18647	
 18648	
 18649	
 18650	
 18651	
 18652	
 18653	
 18654	
 18655	
 18656	
 18657	
 18658	
 18659	
 18660	
 18661	
 18662	
 18663	
 18664	
 18665	
 18666	
 18667	
 18668	
 18669	
 18670	
 18671	
 18672	
 18673	
 18674	
 18675	
 18676	
 18677	
 18678	#def coinstx(fromaddr, toaddr, amount, fee)
 18679	
 18680	
 18681	
 18682	
 18683	
 18684	class PluginManager(BlueprintPluginManager, MimetypeActionPluginManager):
 18685	
 18686	    pass
 18687	
 18688	class File(object):
 18689	
 18690	    re_charset = re.compile('; charset=(?P<charset>[^;]+)')
 18691	
 18692	    parent_class = None # none means current class
 18693	
 18694	
 18695	
 18696	    def __init__(path=None, app=None):
 18697	
 18698		path = path
 18699	
 18700		app = wl
 18701	
 18702	
 18703	
 18704	    def remove():
 18705	
 18706		if not can_remove:
 18707	
 18708		    raise OutsideRemovableBase("File outside removable base")
 18709	
 18710		if is_directory:
 18711	
 18712		    shutil.rmtree(path)
 18713	
 18714		else:
 18715	
 18716		    os.unlink(path)
 18717	
 18718	
 18719	
 18720	    def download():
 18721	
 18722		if is_directory:
 18723	
 18724		    stream = TarFileStream(
 18725	
 18726		        path,
 18727	
 18728		        wl.config["directory_tar_buffsize"]
 18729	
 18730		    )
 18731	
 18732		    return Response(stream, mimetype="application/octet-stream")
 18733	
 18734		directory, name = ospath.split(path)
 18735	
 18736		return send_from_directory(directory, name, as_attachment=True)
 18737	
 18738	
 18739	
 18740	    def contains(filename):
 18741	
 18742		return ospath.exists(ospath.join(path, filename))
 18743	
 18744	
 18745	
 18746	    def choose_filename(filename, attempts=666):
 18747	
 18748		new_filename = filename
 18749	
 18750		for attempt in range(2, attempts+1):
 18751	
 18752		    if not contains(new_filename):
 18753	
 18754			return new_filename
 18755	
 18756		    new_filename = alternative_filename(filename, attempt)
 18757	
 18758		while contains(new_filename):
 18759	
 18760		    new_filename = alternative_filename(filename)
 18761	
 18762		return new_filename
 18763	
 18764	
 18765	
 18766	    @property
 18767	
 18768	    def plugin_manager():
 18769	
 18770		return wl.extensions['plugin_manager']
 18771	
 18772	
 18773	
 18774	    @property
 18775	
 18776	    def default_action():
 18777	
 18778		for action in actions:
 18779	
 18780		    if action.widget.place == 'link':
 18781	
 18782			return action
 18783	
 18784		endpoint = 'browse' if is_directory else 'open'
 18785	
 18786		widget = plugin_manager.link_class.from_file()
 18787	
 18788		return plugin_manager.action_class(endpoint, widget)
 18789	
 18790	
 18791	
 18792	    @cached_property
 18793	
 18794	    def actions():
 18795	
 18796		return plugin_manager.get_actions()
 18797	
 18798	
 18799	
 18800	    @cached_property
 18801	
 18802	    def can_download():
 18803	
 18804		return wl.config['directory_downloadable'] or not is_directory
 18805	
 18806	
 18807	
 18808	    @cached_property
 18809	
 18810	    def can_remove():
 18811	
 18812		dirbase = wl.config["directory_remove"]
 18813	
 18814		if dirbase:
 18815	
 18816		    return path.startswith(dirbase + os.sep)
 18817	
 18818		return False
 18819	
 18820	
 18821	
 18822	    @cached_property
 18823	
 18824	    def stats():
 18825	
 18826		return os.stat(path)
 18827	
 18828	
 18829	
 18830	    @cached_property
 18831	
 18832	    def mimetype():
 18833	
 18834		if is_directory:
 18835	
 18836		    return 'inode/directory'
 18837	
 18838		return plugin_manager.get_mimetype(path)
 18839	
 18840	
 18841	
 18842	    @cached_property
 18843	
 18844	    def is_directory():
 18845	
 18846		return ospath.isdir(path)
 18847	
 18848	
 18849	
 18850	    @cached_property
 18851	
 18852	    def is_file():
 18853	
 18854		return ospath.isfile(path)
 18855	
 18856	
 18857	
 18858	    @cached_property
 18859	
 18860	    def is_empty():
 18861	
 18862		return not raw_listdir
 18863	
 18864	
 18865	
 18866	    @cached_property
 18867	
 18868	    def parent():
 18869	
 18870		if path == wl.config['directory_base']:
 18871	
 18872		    return None
 18873	
 18874		parent_class = parent_class or __class__
 18875	
 18876		return parent_class(ospath.dirname(path), wl)
 18877	
 18878	
 18879	
 18880	    @cached_property
 18881	
 18882	    def ancestors():
 18883	
 18884		ancestors = []
 18885	
 18886		parent = parent
 18887	
 18888		while parent:
 18889	
 18890		    ancestors.append(parent)
 18891	
 18892		    parent = parent.parent
 18893	
 18894		return tuple(ancestors)
 18895	
 18896	
 18897	
 18898	    @cached_property
 18899	
 18900	    def raw_listdir():
 18901	
 18902		return os.listdir()
 18903	
 18904	
 18905	
 18906	    @property
 18907	
 18908	    def modified():
 18909	
 18910		return datetime.datetime.fromtimestamp(stats.st_mtime).strftime('%Y.%m.%d %H:%M:%S')
 18911	
 18912	
 18913	
 18914	    @property
 18915	
 18916	    def size():
 18917	
 18918		size, unit = fmt_size(stats.st_size, wl.config["use_binary_multiples"])
 18919	
 18920		if unit == binary_units[0]:
 18921	
 18922		    return "%d %s" % (size, unit)
 18923	
 18924		return "%.2f %s" % (size, unit)
 18925	
 18926	
 18927	
 18928	    @property
 18929	
 18930	    def urlpath():
 18931	
 18932		return abspath_to_urlpath(path, wl.config['directory_base'])
 18933	
 18934	
 18935	
 18936	    @property
 18937	
 18938	    def name():
 18939	
 18940		return os.path.basename(path)
 18941	
 18942	
 18943	
 18944	    @property
 18945	
 18946	    def type():
 18947	
 18948		return mimetype.split(";", 1)[0]
 18949	
 18950	
 18951	
 18952	    @property
 18953	
 18954	    def encoding():
 18955	
 18956		if ";" in mimetype:
 18957	
 18958		    match = re_charset.search(mimetype)
 18959	
 18960		    gdict = match.groupdict() if match else {}
 18961	
 18962		    return gdict.get("charset") or "default"
 18963	
 18964		return "default"
 18965	
 18966	
 18967	
 18968	    def listdir():
 18969	
 18970		path_joiner = functools.partial(ospath.join, path)
 18971	
 18972		content = [
 18973	
 18974		    __class__(path=path_joiner(path), app=wl)
 18975	
 18976		    for path in raw_listdir
 18977	
 18978		]
 18979	
 18980		content.sort(key=lambda f: (f.is_directory, f.name.lower()))
 18981	
 18982		return content
 18983	
 18984	
 18985	
 18986	    @classmethod
 18987	
 18988	    def from_urlpath(cls, path, app=None):
 18989	
 18990		app = wl 
 18991	
 18992		base = wl.config['directory_base']
 18993	
 18994		return cls(path=urlpath_to_abspath(path, base), app=wl)
 18995	
 18996	
 18997	
 18998	
 18999	
 19000	class TarFileStream(object):
 19001	
 19002	    '''
 19003	
 19004	    Tarfile which compresses while reading for streaming.
 19005	
 19006	
 19007	
 19008	    Buffsize can be provided, it must be 512 multiple (the tar block size) for
 19009	
 19010	    compression.
 19011	
 19012	    '''
 19013	
 19014	    event_class = threading.Event
 19015	
 19016	    thread_class = threading.Thread
 19017	
 19018	    tarfile_class = tarfile.open
 19019	
 19020	
 19021	
 19022	    def __init__(path, buffsize=10240):
 19023	
 19024		path = path
 19025	
 19026		name = ospath.basename(path) + ".tgz"
 19027	
 19028	
 19029	
 19030		_finished = 0
 19031	
 19032		_want = 0
 19033	
 19034		_data = bytes()
 19035	
 19036		_add = event_class()
 19037	
 19038		_result = event_class()
 19039	
 19040		_tarfile = tarfile_class(file, mode="w|gz", bufsize=buffsize) # stream write
 19041	
 19042		_th = thread_class(target=fill)
 19043	
 19044		_th.start()
 19045	
 19046	
 19047	
 19048	    def fill():
 19049	
 19050		_tarfile.add(path, "")
 19051	
 19052		_tarfile.close() # force stream flush
 19053	
 19054		_finished += 1
 19055	
 19056		if not _result.is_set():
 19057	
 19058		    _result.set()
 19059	
 19060	
 19061	
 19062	    def write(data):
 19063	
 19064		_add.wait()
 19065	
 19066		_data += data
 19067	
 19068		if len(_data) > _want:
 19069	
 19070		    _add.clear()
 19071	
 19072		    _result.set()
 19073	
 19074		return len(data)
 19075	
 19076	
 19077	
 19078	    def read(want=0):
 19079	
 19080		if _finished:
 19081	
 19082		    if _finished == 1:
 19083	
 19084			_finished += 1
 19085	
 19086			return ""
 19087	
 19088		    return EOFError("EOF reached")
 19089	
 19090	
 19091	
 19092		# Thread communication
 19093	
 19094		_want = want
 19095	
 19096		_add.set()
 19097	
 19098		_result.wait()
 19099	
 19100		_result.clear()
 19101	
 19102	
 19103	
 19104		if want:
 19105	
 19106		    data = _data[:want]
 19107	
 19108		    _data = _data[want:]
 19109	
 19110		else:
 19111	
 19112		    data = _data
 19113	
 19114		    _data = bytes()
 19115	
 19116		return data
 19117	
 19118	
 19119	
 19120	    def __iter__():
 19121	
 19122		data = read()
 19123	
 19124		while data:
 19125	
 19126		    yield data
 19127	
 19128		    data = read()
 19129	
 19130	
 19131	
 19132	
 19133	
 19134	class OutsideDirectoryBase(Exception):
 19135	
 19136	    pass
 19137	
 19138	
 19139	
 19140	
 19141	
 19142	class OutsideRemovableBase(Exception):
 19143	
 19144	    pass
 19145	
 19146	
 19147	
 19148	
 19149	
 19150	def allowed_file(filename):
 19151	
 19152	    return '.' in filename and filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS']
 19153	
 19154	
 19155	
 19156	
 19157	
 19158	binary_units = ("B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB")
 19159	
 19160	standard_units = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
 19161	
 19162	def fmt_size(size, binary=True):
 19163	
 19164	    '''
 19165	
 19166	    Get size and unit.
 19167	
 19168	
 19169	
 19170	    :param size: size in bytes
 19171	
 19172	    :param binary: whether use binary or standard units, defaults to True
 19173	
 19174	    :return: size and unit
 19175	
 19176	    :rtype: tuple of int and unit as str
 19177	
 19178	    '''
 19179	
 19180	    if binary:
 19181	
 19182		fmt_sizes = binary_units
 19183	
 19184		fmt_divider = 1024.
 19185	
 19186	    else:
 19187	
 19188		fmt_sizes = standard_units
 19189	
 19190		fmt_divider = 1000.
 19191	
 19192	    for fmt in fmt_sizes[:-1]:
 19193	
 19194		if size < 1000:
 19195	
 19196		    return (size, fmt)
 19197	
 19198		size /= fmt_divider
 19199	
 19200	    return size, fmt_sizes[-1]
 19201	
 19202	
 19203	
 19204	def relativize_path(path, base, os_sep=os.sep):
 19205	
 19206	    '''
 19207	
 19208	    Make absolute path relative to an absolute base.
 19209	
 19210	
 19211	
 19212	    :param path: absolute path
 19213	
 19214	    :param base: absolute base path
 19215	
 19216	    :param os_sep: path component separator, defaults to current OS separator
 19217	
 19218	    :return: relative path
 19219	
 19220	    :rtype: str or unicode
 19221	
 19222	    :raises OutsideDirectoryBase: if path is not below base
 19223	
 19224	    '''
 19225	
 19226	  # if not check_under_base(path, base, os_sep):
 19227	
 19228	#	raise OutsideDirectoryBase("%r is not under %r" % (path, base))
 19229	
 19230	    prefix_len = len(base)
 19231	
 19232	    if not base.endswith(os_sep):
 19233	
 19234		prefix_len += len(os_sep)
 19235	
 19236	    return path[prefix_len:]
 19237	
 19238	
 19239	
 19240	def abspath_to_urlpath(path, base, os_sep=os.sep):
 19241	
 19242	    '''
 19243	
 19244	    Make filesystem absolute path uri relative using given absolute base path.
 19245	
 19246	
 19247	
 19248	    :param path: absolute path
 19249	
 19250	    :param base: absolute base path
 19251	
 19252	    :param os_sep: path component separator, defaults to current OS separator
 19253	
 19254	    :return: relative uri
 19255	
 19256	    :rtype: str or unicode
 19257	
 19258	    :raises OutsideDirectoryBase: if resulting path is not below base
 19259	
 19260	    '''
 19261	
 19262	    return relativize_path(path, base, os_sep).replace(os_sep, '/')
 19263	
 19264	
 19265	
 19266	def urlpath_to_abspath(path, base, os_sep=os.sep):
 19267	
 19268	    '''
 19269	
 19270	    Make uri relative path fs absolute using a given absolute base path.
 19271	
 19272	
 19273	
 19274	    :param path: relative path
 19275	
 19276	    :param base: absolute base path
 19277	
 19278	    :param os_sep: path component separator, defaults to current OS separator
 19279	
 19280	    :return: absolute path
 19281	
 19282	    :rtype: str or unicode
 19283	
 19284	    :raises OutsideDirectoryBase: if resulting path is not below base
 19285	
 19286	    '''
 19287	
 19288	    prefix = base if base.endswith(os_sep) else base + os_sep
 19289	
 19290	    realpath = os.path.abspath(prefix + path.replace('/', os_sep))
 19291	
 19292	#    if base == realpath or realpath.startswith(prefix):
 19293	
 19294		#return realpath
 19295	
 19296	   # raise OutsideDirectoryBase("%r is not under %r" % (realpath, base))
 19297	
 19298	
 19299	
 19300	common_path_separators = '\\/'
 19301	
 19302	def generic_filename(path):
 19303	
 19304	    '''
 19305	
 19306	    Extract filename of given path os-indepently, taking care of known path separators.
 19307	
 19308	
 19309	
 19310	    :param path: path
 19311	
 19312	    :return: filename
 19313	
 19314	    :rtype: str or unicode (depending on given path)
 19315	
 19316	    '''
 19317	
 19318	
 19319	
 19320	    for sep in common_path_separators:
 19321	
 19322		if sep in path:
 19323	
 19324		    _, path = path.rsplit(sep, 1)
 19325	
 19326	    return path
 19327	
 19328	
 19329	
 19330	restricted_chars = '\\/\0'
 19331	
 19332	def clean_restricted_chars(path, restricted_chars=restricted_chars):
 19333	
 19334	    '''
 19335	
 19336	    Get path without restricted characters.
 19337	
 19338	
 19339	
 19340	    :param path: path
 19341	
 19342	    :return: path without restricted characters
 19343	
 19344	    :rtype: str or unicode (depending on given path)
 19345	
 19346	    '''
 19347	
 19348	    for character in restricted_chars:
 19349	
 19350		path = path.replace(character, '_')
 19351	
 19352	    return path
 19353	
 19354	
 19355	
 19356	restricted_names = ('.', '..', '::', os.sep)
 19357	
 19358	nt_device_names = ('CON', 'AUX', 'COM1', 'COM2', 'COM3', 'COM4', 'LPT1', 'LPT2', 'LPT3', 'PRN', 'NUL')
 19359	
 19360	fs_encoding = 'unicode' if os.name == 'nt' else sys.getfilesystemencoding() or 'ascii'
 19361	
 19362	def check_forbidden_filename(filename, destiny_os=os.name, fs_encoding=fs_encoding,
 19363	
 19364	                             restricted_names=restricted_names):
 19365	
 19366	    '''
 19367	
 19368	    Get if given filename is forbidden for current OS or filesystem.
 19369	
 19370	
 19371	
 19372	    :param filename:
 19373	
 19374	    :param destiny_os: destination operative system
 19375	
 19376	    :param fs_encoding: destination filesystem filename encoding
 19377	
 19378	    :return: wether is forbidden on given OS (or filesystem) or not
 19379	
 19380	    :rtype: bool
 19381	
 19382	    '''
 19383	
 19384	    if destiny_os == 'nt':
 19385	
 19386		fpc = filename.split('.', 1)[0].upper()
 19387	
 19388		if fpc in nt_device_names:
 19389	
 19390		    return True
 19391	
 19392	
 19393	
 19394	    return filename in restricted_names
 19395	
 19396	
 19397	
 19398	def check_under_base(path, base, os_sep=os.sep):
 19399	
 19400	    '''
 19401	
 19402	    Check if given absolute path is under given base.
 19403	
 19404	
 19405	
 19406	    :param path: absolute path
 19407	
 19408	    :param base: absolute base path
 19409	
 19410	    :return: wether file is under given base or not
 19411	
 19412	    :rtype: bool
 19413	
 19414	    '''
 19415	
 19416	    prefix = base if base.endswith(os_sep) else base + os_sep
 19417	
 19418	    return path == base or path.startswith(prefix)
 19419	
 19420	
 19421	
 19422	#def secure_filename(path, destiny_os=os.name, fs_encoding=fs_encoding):
 19423	
 19424	    #'''
 19425	
 19426	    #Get rid of parent path components and special filenames.
 19427	
 19428	
 19429	
 19430	    #If path is invalid or protected, return empty string.
 19431	
 19432	
 19433	
 19434	    #:param path: unsafe path
 19435	
 19436	    #:param destiny_os: destination operative system
 19437	
 19438	    #:param fs_encoding: destination filesystem filename encoding
 19439	
 19440	    #:return: filename or empty string
 19441	
 19442	    #:rtype: str or unicode (depending on python version, destiny_os and fs_encoding)
 19443	
 19444	    #'''
 19445	
 19446	    #path = generic_filename(path)
 19447	
 19448	    #path = clean_restricted_chars(path)
 19449	
 19450	
 19451	
 19452	    #if check_forbidden_filename(path, destiny_os=destiny_os, fs_encoding=fs_encoding):
 19453	
 19454		#return ''
 19455	
 19456	
 19457	
 19458	    #if fs_encoding != 'unicode':
 19459	
 19460		#if PY_LEGACY and not isinstance(path, unicode):
 19461	
 19462		    #path = unicode(path, encoding='latin-1')
 19463	
 19464		#path = path.encode(fs_encoding, errors=undescore_replace).decode(fs_encoding)
 19465	
 19466	
 19467	
 19468	    #return path
 19469	
 19470	
 19471	
 19472	fs_safe_characters = string.ascii_uppercase + string.digits
 19473	
 19474	def alternative_filename(filename, attempt=None):
 19475	
 19476	    '''
 19477	
 19478	    Generates an alternative version of given filename.
 19479	
 19480	
 19481	
 19482	    If an number attempt parameter is given, will be used on the alternative
 19483	
 19484	    name, a random value will be used otherwise.
 19485	
 19486	
 19487	
 19488	    :param filename: original filename
 19489	
 19490	    :param attempt: optional attempt number, defaults to null
 19491	
 19492	    :return: new filename
 19493	
 19494	    :rtype: str or unicode
 19495	
 19496	    '''
 19497	
 19498	    filename_parts = filename.rsplit('.', 2)
 19499	
 19500	    name = filename_parts[0]
 19501	
 19502	    ext = ''.join('.%s' % ext for ext in filename_parts[1:])
 19503	
 19504	    if attempt is None:
 19505	
 19506		extra = ' %s' % ''.join(random.choice(fs_safe_characters) for i in range(8))
 19507	
 19508	    else:
 19509	
 19510		extra = ' (%d)' % attempt
 19511	
 19512	    return '%s%s%s' % (name, extra, ext)
 19513	
 19514	
 19515	
 19516	#--------------------------------------------------------------------------------------
 19517	
 19518	
 19519	
 19520	
 19521	
 19522	#MOD this
 19523	
 19524	#path = wl.config["directory_base"]
 19525	
 19526	#path = path.decode(fs_encoding)
 19527	
 19528	#urlpath = File(path).urlpath
 19529	
 19530	
 19531	
 19532	
 19533	
 19534	#@wl.route('/tgol/main', defaults={"path":""})
 19535	
 19536	#@wl.route('/tgol/main/<path:path>')
 19537	
 19538	
 19539	
 19540	
 19541	
 19542	
 19543	
 19544	#modded autoindex
 19545	
 19546	
 19547	
 19548	
 19549	
 19550	
 19551	
 19552	
 19553	
 19554	def dirsize(filename):
 19555	
 19556	    path = filename
 19557	
 19558	    total_size = 0
 19559	
 19560	    seen = set()
 19561	
 19562	
 19563	
 19564	    for dirpath, dirnames, filenames in os.walk(path):
 19565	
 19566		for f in filenames:
 19567	
 19568		    fp = os.path.join(dirpath, f)
 19569	
 19570	
 19571	
 19572		    try:
 19573	
 19574			stat = os.stat(fp)
 19575	
 19576		    except OSError:
 19577	
 19578			continue
 19579	
 19580	
 19581	
 19582		    if stat.st_ino in seen:
 19583	
 19584			continue
 19585	
 19586	
 19587	
 19588		    seen.add(stat.st_ino)
 19589	
 19590	
 19591	
 19592		    total_size += stat.st_size
 19593	
 19594	
 19595	
 19596	    return total_size
 19597	
 19598	
 19599	
 19600	
 19601	
 19602	
 19603	
 19604	def stream_template(template_name, **context):
 19605	
 19606	    '''
 19607	
 19608	    Some templates can be huge, this function returns an streaming response,
 19609	
 19610	    sending the content in chunks and preventing from timeout.
 19611	
 19612	
 19613	
 19614	    :param template_name: template
 19615	
 19616	    :param **context: parameters for templates.
 19617	
 19618	    :yields: HTML strings
 19619	
 19620	    '''
 19621	
 19622	    wl.update_template_context(context)
 19623	
 19624	    template = wl.jinja_env.get_template(template_name)
 19625	
 19626	    stream = template.generate(context)
 19627	
 19628	    return flask.Response(flask.stream_with_context(stream))
 19629	
 19630	
 19631	
 19632	
 19633	
 19634	#@wl.route('/tgol/m')
 19635	
 19636	#def lentilmain():
 19637	
 19638	        ##if PY_LEGACY and not isinstance(path, unicode):
 19639	
 19640	    #path = wl.config["directory_base"]
 19641	
 19642	    #if PY_LEGACY and not isinstance(path, unicode):
 19643	
 19644		#path = path.decode(fs_encoding)
 19645	
 19646	    #try:
 19647	
 19648		
 19649	
 19650	    ##try:
 19651	
 19652		#urlpath = File(path).urlpath
 19653	
 19654	    #except OutsideDirectoryBase:
 19655	
 19656		#return 'nope'
 19657	
 19658	    ##try:
 19659	
 19660	    ##directory = File.from_urlpath(path)
 19661	
 19662	    ##if directory.is_directory:
 19663	
 19664	##	files = directory.listdir()
 19665	
 19666	    #return browse(urlpath)#flask.stream_template('tgolindex.html', file=directory)
 19667	
 19668	 ##   else:
 19669	
 19670	##	return 'error'
 19671	
 19672	
 19673	
 19674	##extra html
 19675	
 19676	##{%  if getdir(line) = True %}
 19677	
 19678	##{% else %}
 19679	
 19680	    ##{% endif %} 
 19681	
 19682	
 19683	
 19684	
 19685	
 19686	
 19687	
 19688	
 19689	
 19690	
 19691	
 19692	
 19693	
 19694	#@wl.route('/tgol/main', defaults={"path":""})
 19695	
 19696	#@wl.route('/tgol/main/<path:path>')
 19697	
 19698	#def browse(path):
 19699	
 19700	    #try:
 19701	
 19702		#directory = os.getcwd() + '/' + wl.config["directory_base"] + '/' + path
 19703	
 19704		##if directory.is_directory:
 19705	
 19706		##dir2 = os.listdir(directory)
 19707	
 19708		##rslt = int(directory)+2
 19709	
 19710		#files = os.listdir(directory)
 19711	
 19712		#return stream_template('browse.html', getSize=getSize, file=os.getcwd(), getdir=getdir, files=files, getsize=getsize)#tgolindex.html 
 19713	
 19714	    #except OutsideDirectoryBase:
 19715	
 19716		#return 'error'
 19717	
 19718	    #except OSError:
 19719	
 19720		#return 'error'
 19721	
 19722	    #return 'Not found man'
 19723	
 19724	
 19725	
 19726	#starwars font
 19727	
 19728	@wl.route('/font.woff2')
 19729	
 19730	@noindex
 19731	
 19732	@axss
 19733	
 19734	@adate
 19735	
 19736	@af
 19737	
 19738	def fontt():
 19739	
 19740	    return flask.send_file('templates/font.woff2')
 19741	
 19742	
 19743	
 19744	@wl.route('/cssfamily=Droid')
 19745	
 19746	@noindex
 19747	
 19748	@axss
 19749	
 19750	@adate
 19751	
 19752	@af
 19753	
 19754	def css():
 19755	
 19756	    return '''
 19757	
 19758	    
 19759	
 19760	@font-face {
 19761	
 19762	  font-family: 'Droid Sans';
 19763	
 19764	  font-style: normal;
 19765	
 19766	  font-weight: 400;
 19767	
 19768	  src: local('Droid Sans'), local('DroidSans'), url(/font.woff2) format('woff2');
 19769	
 19770	  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2212, U+2215, U+E0FF, U+EFFD, U+F000;
 19771	
 19772	}
 19773	
 19774	    
 19775	
 19776	    
 19777	
 19778	    '''
 19779	
 19780	
 19781	
 19782	#download a directory as tgzv - todo implement, todo i want this feature:_)
 19783	
 19784	#@wl.route('/tgol/download/dir/<path:path>.tgz')
 19785	
 19786	#@noindex
 19787	
 19788	#@axss
 19789	
 19790	#@adate
 19791	
 19792	#@af
 19793	
 19794	#def downtheline(path):
 19795	
 19796	    #directory = os.getcwd() + '/' + wl.config["directory_base"] + '/' + path
 19797	
 19798	    #return flask.send_file(file)
 19799	
 19800	
 19801	
 19802	
 19803	
 19804	#IOError
 19805	
 19806	
 19807	
 19808	#download one file
 19809	
 19810	
 19811	
 19812	
 19813	
 19814	#open that file, view with syntax highlightning
 19815	
 19816	@wl.route('/tgol/open/<path:path>')
 19817	
 19818	@noindex
 19819	
 19820	@adate
 19821	
 19822	@axss
 19823	
 19824	@af
 19825	
 19826	def openthefile(path):
 19827	
 19828	    try:
 19829	
 19830		file = os.getcwd() + '/' + wl.config["directory_base"] + '/' + path
 19831	
 19832	    
 19833	
 19834		return flask.send_file(file)
 19835	
 19836	    except IOError:
 19837	
 19838		return flask.redirect(flask.url_for('browse'))
 19839	
 19840		
 19841	
 19842	    
 19843	
 19844	#redir all folders to this
 19845	
 19846	#browse the directory
 19847	
 19848	@wl.route('/tgol/look/<path:path>')
 19849	
 19850	@noindex
 19851	
 19852	@adate
 19853	
 19854	@axss
 19855	
 19856	@af
 19857	
 19858	def lookinlentil(path):
 19859	
 19860	    directory = os.getcwd() + '/' + wl.config["directory_base"] + '/' + path
 19861	
 19862	    files = os.listdir(directory)
 19863	
 19864	    return stream_template('browse.html', files=files)
 19865	
 19866	
 19867	
 19868	#return 'r'
 19869	
 19870	    #path=directory.urlpath
 19871	
 19872	    #directory = File.from_urlpath(path)
 19873	
 19874	    #for f in request.files.values():
 19875	
 19876		#filename = secure_filename(f.filename)
 19877	
 19878		#if filename:
 19879	
 19880		    #definitive_filename = directory.choose_filename(filename)
 19881	
 19882		    #f.save(os.path.join(directory.path, definitive_filename))
 19883	
 19884	    
 19885	
 19886	        
 19887	
 19888	    #if directory.is_directory:
 19889	
 19890		#files = directory.listdir()
 19891	
 19892	    
 19893	
 19894	    #eturn 'test'
 19895	
 19896	    #return flask.render_template('tgolindex.html', file=directory)
 19897	
 19898	
 19899	
 19900	
 19901	
 19902	#change time touch -d "Fri, 01 Jan 1984 01:01:01 +0100"
 19903	
 19904	
 19905	
 19906	
 19907	
 19908	class AutoIndex(object):
 19909	
 19910	    """This class makes the Flask application to serve automatically
 19911	
 19912	    generated index page. The wrapped application will route ``/`` and
 19913	
 19914	    ``/<path:path>`` when ``add_url_rules`` is ``True``. Here's a simple
 19915	
 19916	    example::
 19917	
 19918	
 19919	
 19920	        app = Flask(__name__)
 19921	
 19922	        AutoIndex(app, '/home/someone/public_html', add_url_rules=True)
 19923	
 19924	
 19925	
 19926	    :param base: a Flask application.
 19927	
 19928	    :param browse_root: a path which is served by root address. By default,
 19929	
 19930	                        this is the working directory, but you can set it to
 19931	
 19932	                        fix your app to always use one location if you like.
 19933	
 19934	    :param add_url_rules: if it is ``True``, the wrapped application routes
 19935	
 19936	                          ``/`` and ``/<path:path>`` to autoindex. default
 19937	
 19938	                          is ``True``.
 19939	
 19940	    :param template_context: would be passed to the Jinja2 template when
 19941	
 19942	                             rendering an AutoIndex page.
 19943	
 19944	    :param silk_options: keyword options for :class:`flask_silk.Silk`.
 19945	
 19946	    """
 19947	
 19948	
 19949	
 19950	    shared = None
 19951	
 19952	
 19953	
 19954	    def _register_shared_autoindex(self, state=None, app=None):
 19955	
 19956		"""Registers a magic module named __autoindex__."""
 19957	
 19958		app = app or state.app
 19959	
 19960		if __autoindex__ not in app.blueprints:
 19961	
 19962		    static_folder = os.path.join(__path__[0], 'static')
 19963	
 19964		    template_folder = os.path.join(__path__[0], 'templates')
 19965	
 19966		    shared = Blueprint(__autoindex__, __name__,
 19967	
 19968		                       template_folder=template_folder)
 19969	
 19970		    @shared.route('/tgol/__autoindex__/<path:filename>')
 19971	
 19972		    def static(filename):
 19973		#sprint 'hello'
 19974	
 19975			return flask.send_from_directory(static_folder, filename)
 19976	
 19977		    app.register_blueprint(shared)
 19978	
 19979	
 19980	
 19981	    def __new__(cls, base, *args, **kwargs):
 19982	
 19983		if isinstance(base, Flask):
 19984	
 19985		    return object.__new__(AutoIndexApplication)
 19986	
 19987		elif isinstance(base, Blueprint):
 19988	
 19989		    return object.__new__(AutoIndexBlueprint)
 19990	
 19991		else:
 19992	
 19993		    raise TypeError("'base' should be Flask or Blueprint.")
 19994	
 19995	
 19996	
 19997	    def __init__(self, base, browse_root=None, add_url_rules=True,
 19998	
 19999	                 template_context=None, silk_options=None,
 20000	
 20001	                 show_hidden=False):
 20002	
 20003		"""Initializes an autoindex instance."""
 20004	
 20005		self.base = base
 20006	
 20007		if browse_root:
 20008	
 20009		    browse_root = str(browse_root + 'lib/')
 20010	
 20011		else:
 20012	
 20013		    browse_root = os.path.curdir + 'lib/'
 20014	
 20015		self.rootdir = RootDirectory(browse_root + 'lib/', autoindex=self)
 20016	
 20017		self.template_context = template_context
 20018	
 20019		if silk_options is None:
 20020	
 20021		    silk_options = {}
 20022	
 20023		silk_options['silk_path'] = silk_options.get('silk_path', '/__icons__')
 20024	
 20025		self.silk = Silk(self.base, **silk_options)
 20026	
 20027		self.show_hidden = show_hidden
 20028	
 20029		self.icon_map = []
 20030	
 20031		self.converter_map = []
 20032	
 20033		if add_url_rules:
 20034	
 20035		    @self.base.route('/tgol/')
 20036	
 20037		    @self.base.route('/tgol/<path:path>')
 20038	
 20039		    def autoindex(path='lib/'):
 20040	
 20041			return self.render_autoindex(path)
 20042	
 20043	
 20044	
 20045	    def render_autoindex(self, path, browse_root='lib', template=None,
 20046	
 20047	                         template_context=None, endpoint='.autoindex',
 20048	
 20049	                         show_hidden=None, sort_by='name',
 20050	
 20051	                         mimetype=None):
 20052	
 20053	
 20054	
 20055		if browse_root:
 20056	
 20057		    rootdir = RootDirectory(browse_root, autoindex=self)
 20058	
 20059		else:
 20060	
 20061		    rootdir = self.rootdir
 20062	
 20063		path = re.sub(r'\/*$', '', path)
 20064	
 20065		abspath = os.path.join(rootdir.abspath, path)
 20066	
 20067	#sprint 'run by'
 20068		if os.path.isdir(abspath):
 20069	
 20070		    sort_by = request.args.get('sort_by', sort_by)
 20071		    defaultargs = ['modified', 'size', 'name']
 20072	
 20073		    if not defaultargs.__contains__(sort_by):#dont feed me bad args!
 20074			return flask.redirect('/tgol/', code=302)
 20075		    #print 'got sort by!'
 20076		    #print sort_by
 20077		    order = {'asc': 1, 'desc': -1}[request.args.get('order', 'asc')]
 20078		#   #sprint 'sorted'
 20079	
 20080		    curdir = Directory(path, str(rootdir + 'lib/'))
 20081	
 20082		    if show_hidden == None: show_hidden = self.show_hidden
 20083	
 20084		    entries = curdir.explore(sort_by=sort_by, order=order,
 20085	
 20086		                             show_hidden=show_hidden)
 20087	
 20088		    if callable(endpoint):
 20089	
 20090			endpoint = endpoint.__name__
 20091	
 20092		    context = {}
 20093	
 20094		    if template_context is not None:
 20095	
 20096			context.update(template_context)
 20097	
 20098		    if self.template_context is not None:
 20099	
 20100			context.update(self.template_context)
 20101	
 20102		    context.update(
 20103	
 20104		        curdir=curdir, entries=entries,
 20105	
 20106		        sort_by=sort_by, order=order, endpoint=endpoint)
 20107	
 20108		    if template:
 20109	
 20110			return flask.render_template(template, **context)
 20111	
 20112		    try:
 20113	
 20114			template = '{0}autoindex.html'.format(self.template_prefix)
 20115	
 20116			return flask.render_template(template, **context)
 20117	
 20118		    except TemplateNotFound as e:
 20119	
 20120			template = '{0}/autoindex.html'.format(__autoindex__)
 20121	
 20122			return flask.render_template(template, **context)
 20123	
 20124		elif os.path.isfile(abspath):
 20125	
 20126		    if mimetype:
 20127	
 20128			return flask.send_file(abspath, mimetype=mimetype)
 20129	
 20130		    else:
 20131	
 20132			return flask.send_file(abspath)
 20133	
 20134		else:
 20135	
 20136		    return flask.redirect(flask.url_for('fourofour'))
 20137	
 20138	    def add_icon_rule(self, icon, rule=None, ext=None, mimetype=None,
 20139	
 20140	                      name=None, filename=None, dirname=None, cls=None):
 20141	
 20142		"""Adds a new icon rule.
 20143	
 20144	
 20145	
 20146		There are many shortcuts for rule. You can use one or more shortcuts in
 20147	
 20148		a rule.
 20149	
 20150	
 20151	
 20152		`rule`
 20153	
 20154		    A function which returns ``True`` or ``False``. It has one argument
 20155	
 20156		    which is an instance of :class:`Entry`. Example usage::
 20157	
 20158	
 20159	
 20160		        def has_long_name(ent):
 20161	
 20162		            return len(ent.name) > 10
 20163	
 20164		        idx.add_icon_rule('brick.png', rule=has_log_name)
 20165	
 20166	
 20167	
 20168		    Now the application represents files or directorys such as
 20169	
 20170		    ``very-very-long-name.js`` with ``brick.png`` icon.
 20171	
 20172	
 20173	
 20174		`ext`
 20175	
 20176		    A file extension or file extensions to match with a file::
 20177	
 20178	
 20179	
 20180		        idx.add_icon_rule('ruby.png', ext='ruby')
 20181	
 20182		        idx.add_icon_rule('bug.png', ext=['bug', 'insect'])
 20183	
 20184	
 20185	
 20186		`mimetype`
 20187	
 20188		    A mimetype or mimetypes to match with a file::
 20189	
 20190	
 20191	
 20192		        idx.add_icon_rule('application.png', mimetype='application/*')
 20193	
 20194		        idx.add_icon_rule('world.png', mimetype=['image/icon', 'x/*'])
 20195	
 20196	
 20197	
 20198		`name`
 20199	
 20200		    A name or names to match with a file or directory::
 20201	
 20202	
 20203	
 20204		        idx.add_icon_rule('error.png', name='error')
 20205	
 20206		        idx.add_icon_rule('database.png', name=['mysql', 'sqlite'])
 20207	
 20208	
 20209	
 20210		`filename`
 20211	
 20212		    Same as `name`, but it matches only a file.
 20213	
 20214	
 20215	
 20216		`dirname`
 20217	
 20218		    Same as `name`, but it matches only a directory.
 20219	
 20220	
 20221	
 20222		If ``icon`` is callable, it is used to ``rule`` function and the result
 20223	
 20224		is used to the url for an icon. This way is useful for getting an icon
 20225	
 20226		url dynamically. Here's a nice example::
 20227	
 20228	
 20229	
 20230		    def get_favicon(ent):
 20231	
 20232		        favicon = 'favicon.ico'
 20233	
 20234		        if type(ent) is Directory and favicon in ent:
 20235	
 20236		            return '/' + os.path.join(ent.path, favicon)
 20237	
 20238		        return False
 20239	
 20240		    idx.add_icon_rule(get_favicon)
 20241	
 20242	
 20243	
 20244		Now a directory which has a ``favicon.ico`` guesses the ``favicon.ico``
 20245	
 20246		instead of silk's ``folder.png``.
 20247	
 20248		"""
 20249	
 20250		if name:
 20251	
 20252		    filename = name
 20253	
 20254		    directoryname = name
 20255	
 20256		call = lambda m, *args: m.__func__(self, *args)
 20257	
 20258		if ext:
 20259	
 20260		    call(File.add_icon_rule_by_ext, icon, ext)
 20261	
 20262		if mimetype:
 20263	
 20264		    call(File.add_icon_rule_by_mimetype, icon, mimetype)
 20265	
 20266		if filename:
 20267	
 20268		    call(File.add_icon_rule_by_name, icon, filename)
 20269	
 20270		if dirname:
 20271	
 20272		    call(Directory.add_icon_rule_by_name, icon, dirname)
 20273	
 20274		if cls:
 20275	
 20276		    call(Entry.add_icon_rule_by_class, icon, cls)
 20277	
 20278		if callable(rule) or callable(icon):
 20279	
 20280		    call(Entry.add_icon_rule, icon, rule)
 20281	
 20282	
 20283	
 20284	    @property
 20285	
 20286	    def template_prefix(self):
 20287	
 20288		raise NotImplementedError()
 20289	
 20290	
 20291	
 20292	
 20293	
 20294	class AutoIndexApplication(AutoIndex):
 20295	
 20296	    """An AutoIndex which supports flask applications."""
 20297	
 20298	
 20299	
 20300	    template_prefix = ''
 20301	
 20302	
 20303	
 20304	    def __init__(self, app, browse_root=None, **silk_options):
 20305	
 20306		super(AutoIndexApplication, self).__init__(app, browse_root,
 20307	
 20308		                                           **silk_options)
 20309	
 20310		self.app = app
 20311	
 20312		self._register_shared_autoindex(app=self.app)
 20313	
 20314	
 20315	
 20316	
 20317	
 20318	class AutoIndexBlueprint(AutoIndex):
 20319	
 20320	    """An AutoIndex which supports flask blueprints.
 20321	
 20322	
 20323	
 20324	    .. versionadded:: 0.3.1
 20325	
 20326	    """
 20327	
 20328	
 20329	
 20330	    def __init__(self, blueprint, browse_root=None, **silk_options):
 20331	
 20332		super(AutoIndexBlueprint, self).__init__(blueprint, browse_root,
 20333	
 20334		                                         **silk_options)
 20335	
 20336		self.blueprint = self.base
 20337	
 20338		self.blueprint.record_once(self._register_shared_autoindex)
 20339	
 20340	
 20341	
 20342	    @cached_property
 20343	
 20344	    def template_prefix(self):
 20345	
 20346		return self.blueprint.name + '/'
 20347	
 20348	
 20349	
 20350	
 20351	
 20352	class AutoIndexModule(AutoIndexBlueprint):
 20353	
 20354	    """Deprecated module support.
 20355	
 20356	
 20357	
 20358	    .. versionchanged:: 0.3.1
 20359	
 20360	       ``AutoIndexModule`` was deprecated. Use ``AutoIndexBlueprint`` instead.
 20361	
 20362	    """
 20363	
 20364	
 20365	
 20366	    def __init__(self, *args, **kwargs):
 20367	
 20368		import warnings
 20369	
 20370		warnings.warn('AutoIndexModule is deprecated; ' \
 20371	
 20372		              'use AutoIndexBlueprint instead.', DeprecationWarning)
 20373	
 20374		super(AutoIndexModule, self).__init__(*args, **kwargs)
 20375	
 20376	
 20377	
 20378	    @property
 20379	
 20380	    def mod(self):
 20381	
 20382		return self.blueprint
 20383	
 20384	
 20385	
 20386	
 20387	
 20388	
 20389	
 20390	def _make_mimetype_matcher(mimetype):
 20391	
 20392	    return lambda ent: fnmatch(guess_type(ent.name)[0] or '', mimetype)
 20393	
 20394	
 20395	
 20396	
 20397	
 20398	def _make_args_for_entry(args, kwargs):
 20399	
 20400	    if not args:
 20401	
 20402		raise TypeError('path is required, but not given')
 20403	
 20404	    rootdir = autoindex = None
 20405	
 20406	    args = list(args)
 20407	
 20408	    try:
 20409	
 20410		path = kwargs.get('path', args.pop(0))
 20411	
 20412		rootdir = kwargs.get('rootdir', args.pop(0))
 20413	
 20414		autoindex = kwargs.get('autoindex', args.pop(0))
 20415	
 20416	    except IndexError:
 20417	
 20418		pass
 20419	
 20420	    return (path, rootdir, autoindex)
 20421	
 20422	
 20423	
 20424	class _EntryMeta(type):
 20425	
 20426	    """The meta class for :class:`Entry`."""
 20427	
 20428	
 20429	
 20430	    def __call__(cls, *args, **kwargs):
 20431	
 20432		"""If an instance already initialized, just returns."""
 20433	
 20434		ent = cls.__new__(cls, *args, **kwargs)
 20435	
 20436		try:
 20437	
 20438		    ent.path
 20439	
 20440		except AttributeError:
 20441	
 20442		    ent.__init__(*args, **kwargs)
 20443	
 20444		return ent
 20445	
 20446	
 20447	
 20448	class Entry(with_metaclass(_EntryMeta, object)):
 20449	
 20450	    """This class wraps file or directory. It is an abstract class, but it
 20451	
 20452	    returns a derived instance. You can make an instance such as::
 20453	
 20454	
 20455	
 20456	        directory = Entry('/home/someone/public_html')
 20457	
 20458	        assert isinstance(foler, Directory)
 20459	
 20460	        file = Entry('/home/someone/public_html/favicon.ico')
 20461	
 20462	        assert isinstance(file, File)
 20463	
 20464	    """
 20465	
 20466	
 20467	
 20468	    HIDDEN = re.compile('^\.')
 20469	
 20470	
 20471	
 20472	    def __new__(cls, *args, **kwargs):
 20473	
 20474		"""Returns a file or directory instance."""
 20475	
 20476		path, rootdir, autoindex = _make_args_for_entry(args, kwargs)
 20477	
 20478		if rootdir:
 20479	
 20480		    abspath = os.path.join(rootdir.abspath, path)
 20481	
 20482		else:
 20483	
 20484		    abspath = os.path.abspath(path)
 20485	
 20486		if os.path.isdir(abspath):
 20487	
 20488		    return Directory.__new__(Directory, path, rootdir, autoindex)
 20489	
 20490		elif os.path.isfile(abspath):
 20491	
 20492		    return File.__new__(File, path, rootdir, autoindex)
 20493	
 20494		else:
 20495	
 20496		    raise IOError('{0} does not exists.'.format(abspath))
 20497	
 20498	
 20499	
 20500	    def __init__(self, path, rootdir=None, autoindex=None):
 20501	
 20502		"""Initializes an entry instance."""
 20503	
 20504		self.rootdir = rootdir
 20505	
 20506		self.autoindex = autoindex
 20507	
 20508		try:
 20509	
 20510		    rootpath = self.rootdir.abspath
 20511	
 20512		    if not autoindex and self.rootdir:
 20513	
 20514			self.autoindex = self.rootdir.autoindex
 20515	
 20516		except AttributeError:
 20517	
 20518		    rootpath = ''
 20519	
 20520		self.path = path
 20521	
 20522		self.abspath = os.path.join(rootpath, self.path)
 20523	
 20524		self.name = os.path.basename(self.abspath)
 20525	
 20526		self.hidden = bool(self.HIDDEN.match(self.name))
 20527	
 20528		if self.rootdir:
 20529	
 20530		    self.rootdir._register_descendant(self)
 20531	
 20532	
 20533	
 20534	    def is_root(self):
 20535	
 20536		"""Returns ``True`` if it is a root directory."""
 20537	
 20538		return isinstance(self, RootDirectory)
 20539	
 20540	
 20541	
 20542	    @property
 20543	
 20544	    def parent(self):
 20545	
 20546		if self.is_root():
 20547	
 20548		    return None
 20549	
 20550		elif is_same_path(os.path.dirname(self.abspath), self.rootdir.abspath):
 20551	
 20552		    return self.rootdir
 20553	
 20554		return Entry(os.path.dirname(self.path), self.rootdir)
 20555	
 20556	
 20557	
 20558	    @property
 20559	
 20560	    def modified(self):
 20561	
 20562		"""Returns modified time of this."""
 20563	
 20564		return datetime.fromtimestamp(os.path.getmtime(self.abspath))
 20565	
 20566	
 20567	
 20568	    @classmethod
 20569	
 20570	    def add_icon_rule(cls, icon, rule=None):
 20571	
 20572		"""Adds a new icon rule globally."""
 20573	
 20574		cls.icon_map.append((icon, rule))
 20575	
 20576	
 20577	
 20578	    @classmethod
 20579	
 20580	    def add_icon_rule_by_name(cls, icon, name):
 20581	
 20582		"""Adds a new icon rule by the name globally."""
 20583	
 20584		cls.add_icon_rule(icon, lambda ent: ent.name == name)
 20585	
 20586	
 20587	
 20588	    @classmethod
 20589	
 20590	    def add_icon_rule_by_class(cls, icon, _class):
 20591	
 20592		"""Adds a new icon rule by the class globally."""
 20593	
 20594		cls.add_icon_rule(icon, lambda ent: isinstance(ent, _class))
 20595	
 20596	
 20597	
 20598	    def guess_icon(self):
 20599	
 20600		"""Guesses an icon from itself."""
 20601	
 20602		def get_icon_url():
 20603	
 20604		    try:
 20605	
 20606			if self.autoindex:
 20607	
 20608			    icon_map = self.autoindex.icon_map + self.icon_map
 20609	
 20610			else:
 20611	
 20612			    icon_map = self.icon_map
 20613	
 20614			for icon, rule in icon_map:
 20615	
 20616			    if not rule and callable(icon):
 20617	
 20618				matched = icon = icon(self)
 20619	
 20620			    else:
 20621	
 20622				matched = rule(self)
 20623	
 20624			    if matched:
 20625	
 20626				return icon
 20627	
 20628		    except AttributeError:
 20629	
 20630			pass
 20631	
 20632		    try:
 20633	
 20634			return self.default_icon
 20635	
 20636		    except AttributeError:
 20637	
 20638			raise GuessError('There is no matched icon.')
 20639	
 20640		try:
 20641	
 20642		    return urljoin(url_for('.silkicon', filename=''), get_icon_url())
 20643	
 20644		except (AttributeError, RuntimeError):
 20645	
 20646		    return 'ERROR'
 20647	
 20648		return get_icon_url()
 20649	
 20650	
 20651	
 20652	def alertsignal():
 20653	
 20654	    db = connectvens()
 20655	    db2 = connectnews()
 20656	
 20657	    ds = db.cursor()
 20658	
 20659	    msg = '''
 20660	
 20661	    The legion of Warezloaders
 20662	
 20663	    have just activated the emergency alarm switch which 
 20664	
 20665	    was triggerd by a secret code that only the sites administrators
 20666	
 20667	    know of. This is a function we build in, In case any of us where to
 20668	
 20669	    be forced to login to warezloader and change data under threat
 20670	
 20671	    
 20672	
 20673	    if you are reading this. !EXPECT THE WORST!
 20674	
 20675	    we advice you to delete you account before its to late.
 20676	
 20677	    all data is encrypted but to ensure that all our members are safe we advice
 20678	
 20679	    you to delete your account and lay low for a while.
 20680	
 20681	    
 20682	
 20683	    if we go down we ask everyone to rise up, code new platforms, 
 20684	
 20685	    keep the spirit alive, everyone can do something 
 20686	
 20687	    
 20688	
 20689	    
 20690	
 20691	    If we must die we will be sure to give em hell first
 20692	
 20693	    ~The legion of Warezloaders 
 20694	
 20695		'''    
 20696	
 20697	    ds.execute('select nick from vens')
 20698	
 20699	    token = gettoken()
 20700	
 20701	    swq = db.cursor()
 20702	
 20703	
 20704	
 20705	    rt = ds.fetchall()
 20706	
 20707	    today = datetime.date.today()
 20708	
 20709	    today = str(today)
 20710	
 20711	    ioo = db2.cursor()
 20712	
 20713	    ioo.execute('insert into news(datu, news) value(%s, %s)', (today, 'emergency alert triggerd'))
 20714	
 20715	    for line in rt:
 20716	
 20717		token = str(token)
 20718	
 20719		msg = str(msg)
 20720	
 20721		linee = line[0]
 20722	
 20723		liner = str(linee)
 20724	
 20725		if not liner:
 20726	
 20727		    pass
 20728	
 20729		else:
 20730		    db3 = connectinbox()
 20731	
 20732		    swq.execute('insert into inbox(msg, token, title, send, sender, hread) value(%s, %s, %s, %s, %s, %s)', (msg, token, 'alert', liner, 'Legion of Warezloaders', 'no')) 
 20733	
 20734		    db3.commit()
 20735	
 20736		    db3.close()
 20737	
 20738		    
 20739	
 20740		    pass
 20741	
 20742		pass
 20743	
 20744	    else:
 20745	
 20746		pass
 20747	
 20748	    db.close()
 20749	
 20750	    db2.close()
 20751	    return 'hi'
 20752	
 20753	    
 20754	
 20755	
 20756	
 20757	
 20758	
 20759	
 20760	
 20761	
 20762	
 20763	
 20764	
 20765	class File(Entry):
 20766	
 20767	    """This class wraps a file."""
 20768	
 20769	
 20770	
 20771	    EXTENSION = re.compile('\.([^.]+)$')
 20772	
 20773	
 20774	
 20775	    default_icon = 'page_white.png'
 20776	
 20777	    icon_map = []
 20778	
 20779	    def __new__(cls, path, rootdir=None, autoindex=None):
 20780	
 20781		try:
 20782	
 20783		    return rootdir._descendants[(path, autoindex)]
 20784	
 20785		except (AttributeError, KeyError):
 20786	
 20787		    pass
 20788	
 20789		return object.__new__(cls)
 20790	
 20791	
 20792	
 20793	    def __init__(self, path, rootdir=None, autoindex=None):
 20794	
 20795		super(File, self).__init__(path, rootdir, autoindex)
 20796	
 20797		try:
 20798	
 20799		    self.ext = re.search(self.EXTENSION, self.name).group(1)
 20800	
 20801		except AttributeError:
 20802	
 20803		    self.ext = None
 20804	
 20805	
 20806	
 20807	    @cached_property
 20808	
 20809	    def data(self):
 20810	
 20811		"""Data of this file."""
 20812	
 20813		with open(self.abspath) as f:
 20814	
 20815		    return ''.join(f.readlines())
 20816	
 20817	
 20818	
 20819	    @cached_property
 20820	
 20821	    def mimetype(self):
 20822	
 20823		"""A mimetype of this file."""
 20824	
 20825		return guess_type(self.abspath)
 20826	
 20827	
 20828	
 20829	    @cached_property
 20830	
 20831	    def size(self):
 20832	
 20833		"""A size of this file."""
 20834	
 20835		return os.path.getsize(self.abspath)
 20836	
 20837	
 20838	
 20839	    @classmethod
 20840	
 20841	    def add_icon_rule_by_ext(cls, icon, ext):
 20842	
 20843		"""Adds a new icon rule by the file extension globally."""
 20844	
 20845		cls.add_icon_rule(icon, lambda ent: ent.ext == ext)
 20846	
 20847	
 20848	
 20849	    @classmethod
 20850	
 20851	    def add_icon_rule_by_mimetype(cls, icon, mimetype):
 20852	
 20853		"""Adds a new icon rule by the mimetype globally."""
 20854	
 20855		cls.add_icon_rule(icon, _make_mimetype_matcher(mimetype))
 20856	
 20857	
 20858	
 20859	
 20860	
 20861	class Directory(Entry):
 20862	
 20863	    """This class wraps a directory."""
 20864	
 20865	
 20866	
 20867	    default_icon = 'folder.png'
 20868	
 20869	    icon_map = []
 20870	
 20871	
 20872	
 20873	    def __new__(cls, *args, **kwargs):
 20874	
 20875		"""If the path is same with root path, it returns a
 20876	
 20877		:class:`RootDirectory` object.
 20878	
 20879		"""
 20880	
 20881		path, rootdir, autoindex = _make_args_for_entry(args, kwargs)
 20882	
 20883		if not rootdir:
 20884	
 20885		    return RootDirectory(path, autoindex)
 20886	
 20887		try:
 20888	
 20889		    return rootdir._descendants[(path, autoindex)]
 20890	
 20891		except KeyError:
 20892	
 20893		    pass
 20894	
 20895		rootpath = rootdir.abspath
 20896	
 20897		if is_same_path(os.path.join(rootpath, path), rootpath):
 20898	
 20899		    if not rootdir:
 20900	
 20901			rootdir = RootDirectory(rootpath, autoindex)
 20902	
 20903		    return rootdir
 20904	
 20905		return object.__new__(cls)
 20906	
 20907	
 20908	
 20909	    def explore(self, sort_by='name', order=1, show_hidden=False):
 20910	
 20911		"""It is a generator. Each item is a child entry."""
 20912	
 20913	#sprint 'explorer called!'
 20914	
 20915		def compare(ent1, ent2):
 20916	
 20917		    def asc():
 20918		#sprint 'explorer called!'
 20919	
 20920			if sort_by != 'modified' and type(ent1) is not type(ent2):
 20921	
 20922			    return 1 if type(ent1) is File else -1
 20923	
 20924			else:
 20925	
 20926			    try:
 20927	
 20928				return cmp(getattr(ent1, sort_by),
 20929	
 20930				           getattr(ent2, sort_by))
 20931	
 20932			    except AttributeError:
 20933	
 20934				return cmp(getattr(ent1, 'name'),
 20935	
 20936				           getattr(ent2, 'name'))
 20937	
 20938		    return asc() * order
 20939	
 20940		if not self.is_root():
 20941	
 20942		    yield _ParentDirectory(self)
 20943	
 20944		    rootdir = self.rootdir
 20945	
 20946		else:
 20947	
 20948		    rootdir = self
 20949	
 20950		dirlist = os.listdir(self.abspath)
 20951	
 20952		entries = []
 20953	
 20954		for name in dirlist:
 20955	
 20956		    try:
 20957	
 20958			entries.append(Entry(os.path.join(self.path, name), rootdir))
 20959	
 20960		    except IOError:
 20961	
 20962			continue  # ignore stuff like broken links
 20963	
 20964		entries = sorted(entries, key=functools.cmp_to_key(compare))
 20965	
 20966		for ent in entries:
 20967	
 20968		    if show_hidden or not ent.hidden:
 20969	
 20970			yield ent
 20971	
 20972	
 20973	
 20974	    def get_child(self, childname):
 20975	
 20976		"""Returns a child file or directory."""
 20977	
 20978		if childname in self:
 20979	
 20980		    if self.path != '.':
 20981	
 20982			path = os.path.join(self.path, childname)
 20983	
 20984		    else:
 20985	
 20986			path = childname
 20987	
 20988		    return Entry(path, self.rootdir)
 20989	
 20990		else:
 20991	
 20992		    raise IOError('{0} does not exist'.format(childname))
 20993	
 20994	
 20995	
 20996	    def __contains__(self, path_or_entry):
 20997	
 20998		"""Checks this directory has a file or directory.
 20999	
 21000	
 21001	
 21002		    public_html = Directory('public_html')
 21003	
 21004		    'favicon.ico' in public_html
 21005	
 21006		    File('favicon.ico', public_html) in public_html
 21007	
 21008		"""
 21009	
 21010		if isinstance(path_or_entry, Entry):
 21011	
 21012		    path = os.path.relpath(path_or_entry.path, self.path)
 21013	
 21014		    if os.path.pardir in path:
 21015	
 21016			return False
 21017	
 21018		else:
 21019
 21020		    path = path_or_entry
 21021	
 21022		return os.path.exists(os.path.join(self.abspath, path))
 21023	
 21024	
 21025	
 21026	
 21027	
 21028	class RootDirectory(Directory):
 21029	
 21030	    """This class wraps a root directory."""
 21031	
 21032	
 21033	
 21034	    default_icon = 'server.png'
 21035	
 21036	    icon_map = []
 21037	
 21038	    _rootdirs = {}
 21039	
 21040	
 21041	
 21042	    def __new__(cls, path, autoindex=None):
 21043	
 21044		try:
 21045	
 21046		    return RootDirectory._rootdirs[(path, autoindex)]
 21047	
 21048		except KeyError:
 21049	
 21050		    return object.__new__(cls)
 21051	
 21052	
 21053	
 21054	    def __init__(self, path, autoindex=None):
 21055	
 21056		super(RootDirectory, self).__init__('.', autoindex=autoindex)
 21057	
 21058		self.abspath = os.path.abspath(path)
 21059	
 21060		self.rootdir = self
 21061	
 21062		self._descendants = {}
 21063	
 21064		RootDirectory._register_rootdir(self)
 21065	
 21066	
 21067	
 21068	    @classmethod
 21069	
 21070	    def _register_rootdir(cls, rootdir):
 21071	
 21072		cls._rootdirs[(rootdir.abspath, rootdir.autoindex)] = rootdir
 21073	
 21074	
 21075	
 21076	    def _register_descendant(self, entry):
 21077	
 21078		self._descendants[(entry.path, entry.autoindex)] = entry
 21079	
 21080	
 21081	
 21082	
 21083	
 21084	class _ParentDirectory(Directory):
 21085	
 21086	    """This class wraps a parent directory."""
 21087	
 21088	
 21089	
 21090	    default_icon = 'arrow_turn_up.png'
 21091	
 21092	    icon_map = []
 21093	
 21094	
 21095	
 21096	    def __new__(cls, *args, **kwargs):
 21097	
 21098		return object.__new__(cls)
 21099	
 21100	
 21101	
 21102	    def __init__(self, child_directory):
 21103	
 21104		path = os.path.join(child_directory.path, '..')
 21105	
 21106		super(_ParentDirectory, self).__init__(path, child_directory.rootdir)
 21107	
 21108	
 21109	
 21110	
 21111	
 21112	class GuessError(RuntimeError): pass
 21113	
 21114	class MarkupError(RuntimeError): pass
 21115	
 21116	
 21117	
 21118	
 21119	
 21120	
 21121	
 21122	#gateway to wl market, publishing, lentil, paste, metacleaner
 21123	
 21124	@wl.route('/gateway/')
 21125	@wl.route('/GateWay')
 21126	@wl.route('/gateway')
 21127	@noindex
 21128	@axss
 21129	@af
 21130	@adate
 21131	def gateway():
 21132	    meh = flask.render_template
 21133	    return wl_html_cache().return_page('gateway', meh)    
 21134	
 21135	   # return flask.render_template('gateway.html')
 21136	
 21137	
 21138	
 21139	
 21140	
 21141	#next version
 21142	
 21143	#paste
 21144	
 21145	#@wl.route('/paste/main')
 21146	
 21147	#@noindex
 21148	#@axss
 21149	#@af
 21150	#@adate
 21151	#def paste():
 21152	
 21153	    #meh = flask.render_template
 21154	    #return wl_html_cache().return_page('paste', meh)#flask.render_template('pastev.html')
 21155	
 21156	
 21157	
 21158	##@wl.route('/paste')
 21159	
 21160	
 21161	
 21162	#@wl.route('/paste/<string:pasteid>')
 21163	
 21164	#@noindex
 21165	#@axss
 21166	#@af
 21167	#@adate
 21168	#def pasten(pasteid):
 21169	
 21170	    #return flask.render_template('')
 21171	
 21172	
 21173	
 21174	#@wl.route('/paste/latest')# remove this
 21175	
 21176	#@noindex
 21177	#@axss
 21178	#@af
 21179	#@adate
 21180	#def latestpaste():
 21181	    #return flask.render_template('pastelatest.html')
 21182	
 21183	
 21184	##add spider condom
 21185	
 21186	
 21187	##raw
 21188	
 21189	#@wl.route('/paste/<string:pasteid>.txt')
 21190	
 21191	#@noindex
 21192	#@axss
 21193	#@af
 21194	#@adate
 21195	#def rawpaste(pasteid):
 21196	
 21197	    #return ''#flask send from 
 21198	
 21199	
 21200	
 21201	#@wl.route('/paste/find')
 21202	
 21203	#@noindex
 21204	#@axss
 21205	#@af
 21206	#@adate
 21207	#def findpaste():
 21208	
 21209	    #return ''
 21210	
 21211	
 21212	
 21213	##api for paste
 21214	
 21215	
 21216	
 21217	
 21218	
 21219	
 21220	
 21221	#wrap in a class
 21222	
 21223	
 21224	
 21225	#get grtzphrase
 21226	
 21227	def getgrtzphrase():
 21228	
 21229	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 21230	
 21231	    db = connectvens()
 21232	
 21233	    sd = db.cursor()
 21234	
 21235	    sd.execute('select p_phrase from vens where nick=%s', (nick,))
 21236	
 21237	    gpz = sd.fetchone()
 21238	
 21239	    gpz = gpz[0]
 21240	
 21241	    db.close()
 21242	    return gpz
 21243	
 21244	
 21245	
 21246	#get token
 21247	
 21248	def gettoken():
 21249	
 21250	    num = random.randint(128,600)
 21251	
 21252	
 21253	
 21254	    code = str(base64.b64encode(urandom(num))) #token
 21255	
 21256	    code = code.replace('/', 'g')
 21257	
 21258	    code = code.replace('=', '')    
 21259	
 21260	    return code
 21261	
 21262	
 21263	def getatoken():
 21264	    num = random.randint(128,600)
 21265	
 21266	    code = base64.b64encode(urandom(num)).decode('ascii') #token
 21267	    code = code.replace('/', 'g')
 21268	    code = code.replace('=', '')    
 21269	    return code
 21270	
 21271	#get pricetable
 21272	
 21273	#def getpt():
 21274	
 21275	    #price = session.get('https://coinbase.com/api/v1/prices/buy').json()['total']['amount']
 21276	
 21277	    #price = int(float(price))
 21278	
 21279	    #price = int(markup * price)
 21280	
 21281	    ##soo = b.get_latest_price('USD')
 21282	
 21283	    #pricetable = []
 21284	
 21285	    #for dollarvalue in [100,200,300,400,(price - (price % 100)),price,(price + 100 - (price % 100)), 1000,2000]:
 21286	
 21287		#pricetable.append((dollarvalue, decimal.Decimal(dollarvalue)/price))    
 21288	
 21289	    #return pricetable
 21290	
 21291	
 21292	
 21293	
 21294	
 21295	#get current msgs
 21296	
 21297	def getmsgs():
 21298	
 21299	
 21300	
 21301	    nick = decode_session(flask.session["special"])[0] #flask.escape(flask.session['nick'])
 21302	
 21303	    if not nick:
 21304	        return '0'
 21305	
 21306	
 21307	    db = connectinbox()
 21308	    luo = db.cursor()
 21309	
 21310	    luo.execute('select COUNT(msg) from inbox where send=%s and hread=%s', (nick, 'no'))
 21311	
 21312	    mess = luo.fetchone()
 21313	
 21314	    mess = mess[0]
 21315	
 21316	    if not mess:
 21317	
 21318		mess = '0'  
 21319	
 21320	    msg = mess
 21321	
 21322	    db.close() 
 21323	
 21324	    return msg
 21325	
 21326	
 21327	
 21328	
 21329	
 21330	
 21331	
 21332	def conti(inu):
 21333	
 21334	    db = connectitems()
 21335	
 21336	    dsa = db.cursor()
 21337	
 21338	    inu = str(inu)
 21339	
 21340	    thing = '%' + inu + '%'
 21341	
 21342	    thing = str(thing)
 21343	
 21344	    dsa.execute('select COUNT(*) from items where item_category LIKE %s', (thing,)) 
 21345	
 21346	    th = dsa.fetchone()
 21347	
 21348	    if not th:
 21349	
 21350		th = 0
 21351	
 21352	    th = th[0]
 21353	    db.close()
 21354	
 21355	    return th
 21356	
 21357	
 21358	
 21359	
 21360	
 21361	def getind():
 21362	
 21363	    thc = 'indica'
 21364	
 21365	    thc = conti(thc)
 21366	
 21367	    return thc
 21368	
 21369	   
 21370	
 21371	def getsat():
 21372	
 21373	    thc = 'sativa'
 21374	
 21375	    thc = conti(thc)
 21376	
 21377	    return thc    
 21378	
 21379	
 21380	
 21381	def getHybrid():
 21382	
 21383	    thc = 'Hybrid'
 21384	
 21385	    thc = conti(thc)
 21386	
 21387	    return thc 
 21388	
 21389	
 21390	
 21391	def getHash():
 21392	
 21393	    thc = 'Hash'
 21394	
 21395	    thc = conti(thc)
 21396	
 21397	    return thc    
 21398	
 21399	
 21400	
 21401	
 21402	
 21403	
 21404	
 21405	
 21406	
 21407	def getmdma():
 21408	
 21409	    thc = 'Mdma'
 21410	
 21411	    thc = conti(thc)
 21412	
 21413	    return thc
 21414	
 21415	
 21416	
 21417	
 21418	
 21419	def getthc():
 21420	
 21421	    thc = 'Cannabis'
 21422	
 21423	    thc = conti(thc)
 21424	
 21425	    return thc
 21426	
 21427	
 21428	
 21429	
 21430	
 21431	def getbenz():
 21432	
 21433	    thc = 'Benzos'
 21434	
 21435	    thc = conti(thc)
 21436	
 21437	    return thc
 21438	
 21439	    
 21440	
 21441	def getext():
 21442	
 21443	    thc = 'Ecstasy'
 21444	
 21445	    thc = conti(thc)
 21446	
 21447	    return thc
 21448	
 21449	
 21450	
 21451	def getcoce():
 21452	
 21453	    thc = 'Cocaine'
 21454	
 21455	    thc = conti(thc)
 21456	
 21457	    return thc
 21458	
 21459	
 21460	
 21461	def getmth():
 21462	
 21463	    thc = 'Meth'
 21464	
 21465	    thc = conti(thc)
 21466	
 21467	    return thc
 21468	
 21469	
 21470	
 21471	def getamp():
 21472	
 21473	    thc = 'amphetamine'
 21474	
 21475	    thc = conti(thc)
 21476	
 21477	    return thc
 21478	
 21479	
 21480	
 21481	def getrtl():
 21482	
 21483	    thc = 'ritalin'
 21484	
 21485	    thc = conti(thc)
 21486	
 21487	    return thc
 21488	
 21489	
 21490	
 21491	def getopi():
 21492	
 21493	    thc = 'Opiods'
 21494	
 21495	    thc = conti(thc)
 21496	
 21497	    return thc
 21498	
 21499	
 21500	
 21501	def getstd():
 21502	
 21503	    thc = 'Steroids'
 21504	
 21505	    thc = conti(thc)
 21506	
 21507	    return thc
 21508	
 21509	
 21510	
 21511	def getpts():
 21512	
 21513	    thc = 'Perscription'
 21514	
 21515	    thc = conti(thc)
 21516	
 21517	    return thc
 21518	
 21519	
 21520	
 21521	def getsdd():
 21522	
 21523	    thc = 'Stimulations'
 21524	
 21525	    thc = conti(thc)
 21526	
 21527	    return thc
 21528	
 21529	
 21530	
 21531	def getphsy():
 21532	
 21533	    thc = 'Psychedelics'
 21534	
 21535	    thc = conti(thc)
 21536	
 21537	    return thc
 21538	
 21539	
 21540	
 21541	def getwel():
 21542	
 21543	    thc = 'Weight Loss'
 21544	
 21545	    thc = conti(thc)
 21546	
 21547	    return thc
 21548	
 21549	
 21550	
 21551	def getoth():
 21552	
 21553	    thc = 'Others'
 21554	
 21555	    thc = conti(thc)
 21556	
 21557	    return thc
 21558	
 21559	#
 21560	
 21561	
 21562	
 21563	#this has been outsourced 2 class
 21564	
 21565	#
 21566	
 21567	# list categories
 21568	
 21569	# getd, getcf, geta, getci, getcj, gets, getw, getget, geths, geta, getc, getce, getvhpi, getsss, getco, getl, getma, geth, getm, geto
 21570	
 21571	#def getd():
 21572	
 21573	    #db = connectitems()
 21574	
 21575	    #lsd = db.cursor()
 21576	
 21577	    #pie = 'drugs'
 21578	
 21579	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21580	
 21581	    #hell = lsd.fetchone()
 21582	
 21583	    #hellocat = hell[0]
 21584	
 21585	    #db.close()
 21586	    #return hellocat
 21587	
 21588	
 21589	
 21590	#def getcf():
 21591	
 21592	    #db = connectitems()
 21593	
 21594	    #pie = 'Carding/Fraud' #Related items
 21595	
 21596	    #sd = db.cursor()
 21597	
 21598	    #sd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21599	
 21600	    #hell = sd.fetchone()
 21601	
 21602	    #hellocat2 = hell[0]
 21603	
 21604	    #db.close()
 21605	    #return hellocat2
 21606	
 21607	
 21608	
 21609	#def geta():
 21610	
 21611	    #db = connectitems()
 21612	
 21613	    #pie = 'Activism'
 21614	
 21615	    #lsd = db.cursor()
 21616	
 21617	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21618	
 21619	    #hell = lsd.fetchone()
 21620	
 21621	    #hellocat3 = hell[0]
 21622	
 21623	    #db.close()
 21624	    #return hellocat3
 21625	
 21626	
 21627	
 21628	#def getci():
 21629	
 21630	    #db = connect()
 21631	
 21632	    #pie = 'Carded Items'
 21633	
 21634	    #lsd = db.cursor()
 21635	
 21636	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21637	
 21638	    #hell = lsd.fetchone()
 21639	
 21640	    #hellocat4 = hell[0]
 21641	
 21642	    #return hellocat4
 21643	
 21644	
 21645	
 21646	
 21647	
 21648	#def getcj():
 21649	
 21650	    #db = connect()
 21651	
 21652	    #pie = 'Clothes/Jewellery'
 21653	
 21654	    #lsd = db.cursor()
 21655	
 21656	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21657	
 21658	    #hell = lsd.fetchone()
 21659	
 21660	    #hellocat5 = hell[0]
 21661	
 21662	    #return hellocat5
 21663	
 21664	
 21665	
 21666	#def gets():
 21667	
 21668	    #db = connect()
 21669	
 21670	    #pie = 'Services'
 21671	
 21672	    #lsd = db.cursor()
 21673	
 21674	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21675	
 21676	    #hell = lsd.fetchone()
 21677	
 21678	    #hellocat6 = hell[0]
 21679	
 21680	    #return hellocat6
 21681	
 21682	
 21683	
 21684	#def getw():
 21685	
 21686	    #db = connect()
 21687	
 21688	    #pie = 'Weapons'
 21689	
 21690	    #lsd = db.cursor()
 21691	
 21692	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21693	
 21694	    #hell = lsd.fetchone()
 21695	
 21696	    #hellocat7 = hell[0]
 21697	
 21698	    #return hellocat7
 21699	
 21700	
 21701	
 21702	#def getget():
 21703	
 21704	    #db = connect()
 21705	
 21706	    #pie = 'Guides/E-books Tutorials'
 21707	
 21708	    #lsd = db.cursor()
 21709	
 21710	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21711	
 21712	    #hell = lsd.fetchone()
 21713	
 21714	    #hellocat8 = hell[0]	
 21715	
 21716	    #return hellocat8
 21717	
 21718	
 21719	
 21720	#def geths():
 21721	
 21722	    #db = connect()
 21723	
 21724	    #pie = 'Hosting/servers'
 21725	
 21726	    #lsd = db.cursor()
 21727	
 21728	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21729	
 21730	    #hell = lsd.fetchone()
 21731	
 21732	    #hellocat9 = hell[0]
 21733	
 21734	    #return hellocat9
 21735	
 21736	
 21737	
 21738	#def geta():
 21739	
 21740	    #db = connect()
 21741	
 21742	    #pie = 'Art'
 21743	
 21744	    #lsd = db.cursor()
 21745	
 21746	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21747	
 21748	    #hell = lsd.fetchone()
 21749	
 21750	    #hellocat10 = hell[0]	
 21751	
 21752	    #return hellocat10
 21753	
 21754	
 21755	
 21756	#def getc():
 21757	
 21758	    #db = connect()
 21759	
 21760	    #pie = 'Collectibles'
 21761	
 21762	    #lsd = db.cursor()
 21763	
 21764	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21765	
 21766	    #hell = lsd.fetchone()
 21767	
 21768	    #hellocat11 = hell[0]
 21769	
 21770	    #return hellocat11
 21771	
 21772	
 21773	
 21774	
 21775	
 21776	#def getce():
 21777	
 21778	    #db = connect()
 21779	
 21780	    #pie = 'Computer equipment'
 21781	
 21782	    #lsd = db.cursor()
 21783	
 21784	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21785	
 21786	    #hell = lsd.fetchone()
 21787	
 21788	    #hellocat12 = hell[0]
 21789	
 21790	    #return hellocat12
 21791	
 21792	
 21793	
 21794	
 21795	
 21796	#def getvhpi():
 21797	
 21798	    #db = connect()
 21799	
 21800	    #pie = 'Various hacking/phreaking items'
 21801	
 21802	    #lsd = db.cursor()
 21803	
 21804	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21805	
 21806	    #hell = lsd.fetchone()
 21807	
 21808	    #hellocat13 = hell[0]
 21809	
 21810	    #return hellocat13
 21811	
 21812	
 21813	
 21814	
 21815	
 21816	#def getsss():
 21817	
 21818	    #db = connect()
 21819	
 21820	    #pie = 'Software/scripts/source-codes'
 21821	
 21822	    #lsd = db.cursor()
 21823	
 21824	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21825	
 21826	    #hell = lsd.fetchone()
 21827	
 21828	    #hellocat14 = hell[0]
 21829	
 21830	    #return hellocat14
 21831	
 21832	
 21833	
 21834	
 21835	
 21836	#def getco():
 21837	
 21838	    #db = connect()
 21839	
 21840	    #pie = 'Custom Orders'
 21841	
 21842	    #lsd = db.cursor()
 21843	
 21844	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21845	
 21846	    #hell = lsd.fetchone()
 21847	
 21848	    #hellocat15 = hell[0]
 21849	
 21850	    #return hellocat15
 21851	
 21852	
 21853	
 21854	
 21855	
 21856	#def getl():
 21857	
 21858	    #db = connect()
 21859	
 21860	    #pie = 'Lab supplies'
 21861	
 21862	    #lsd = db.cursor()
 21863	
 21864	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21865	
 21866	    #hell = lsd.fetchone()
 21867	
 21868	    #hellocat16 = hell[0]
 21869	
 21870	
 21871	
 21872	
 21873	
 21874	#def getma():
 21875	
 21876	    #db = connect()
 21877	
 21878	    #pie = 'Malware'
 21879	
 21880	    #lsd = db.cursor()
 21881	
 21882	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21883	
 21884	    #hell = lsd.fetchone()
 21885	
 21886	    #hellocat17 = hell[0]
 21887	
 21888	    #return hellocat17
 21889	
 21890	
 21891	
 21892	#def geth():
 21893	
 21894	    #db = connect()
 21895	
 21896	    #pie = 'Home and Garden'
 21897	
 21898	    #lsd = db.cursor()
 21899	
 21900	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21901	
 21902	    #hell = lsd.fetchone()
 21903	
 21904	    #hellocat18 = hell[0]
 21905	
 21906	    #return hellocat18
 21907	
 21908	
 21909	
 21910	#def getm():
 21911	
 21912	    #db = connect()
 21913	
 21914	    #pie = 'Music'
 21915	
 21916	    #lsd = db.cursor()
 21917	
 21918	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21919	
 21920	    #hell = lsd.fetchone()
 21921	
 21922	    #hellocat19 = hell[0]
 21923	
 21924	    #return hellocat19
 21925	
 21926	
 21927	
 21928	#def geto():
 21929	
 21930	    #db = connect()
 21931	
 21932	    #pie = 'Others'	
 21933	
 21934	    #lsd = db.cursor()
 21935	
 21936	    #lsd.execute('select COUNT(item_id) from items where item_category LIKE %s', ('%' + pie + '%',))
 21937	
 21938	    #hell = lsd.fetchone()
 21939	
 21940	    #hellocat20 = hell[0]
 21941	
 21942	    #return hellocat20
 21943	
 21944	
 21945	
 21946	
 21947	
 21948	
 21949	
 21950	
 21951	
 21952	
 21953	
 21954	#todo on a rainy day
 21955	
 21956	#password share
 21957	
 21958	@wl.route('/passwordshare', methods=['GET', 'POST'])
 21959	@noindex
 21960	@axss
 21961	@af
 21962	@adate
 21963	def wifipass():#   upload a password -> <a href='/ps/submit'>
 21964	
 21965	    return '''
 21966	
 21967	    
 21968	
 21969	    a place to share  passwords to wifi-networks wlans, accounts and more  
 21970	
 21971	    browse and c if you can find something useful
 21972	
 21973	we are looking for art to this project    
 21974	    '''
 21975	
 21976	
 21977	
 21978	#??? - nope
 21979	
 21980	#@wl.route('/search', methods=['GET'])
 21981	
 21982	#@noindex
 21983	
 21984	#@axss
 21985	
 21986	#@adate
 21987	
 21988	#@af
 21989	
 21990	#def search():
 21991	
 21992	    #if not flask.session.has_key("nick"):
 21993	
 21994		#return flask.redirect(flask.url_for('choice_mode'))  
 21995	
 21996	    #if flask.session.has_key('special') and flask.session:
 21997		#if not vertify_session(flask.session['special']):
 21998		    #return flask.redirect(flask.url_for('choice_mode'))
 21999		#pass
 22000	    #else:
 22001		#return flask.redirect(flask.url_for('choice_mode'))    
 22002	
 22003	    #if flask.session:
 22004	
 22005	        #return flask.render_template('search.html', search=s)
 22006	
 22007	    
 22008	
 22009	    #db = connectitems()
 22010	
 22011	    #searchword = flask.request.args.get('tag','')#or change
 22012	
 22013	    #cur = db.cursor()
 22014	
 22015	    #cur.execute('select * from items where item_name LIKE %s or item_des LIKE %s', ('%' + searchword + '%', '%' + searchword + '%'))
 22016	
 22017	    #db.close()
 22018	    #return flask.redirect(flask.url_for('nono'))
 22019	
 22020	
 22021	
 22022	#gen rss feed for wl news
 22023	
 22024	@wl.route('/rss.xml', methods=['GET'])
 22025	@wl.route('/rss', methods=['GET'])
 22026	@noindex
 22027	@axss
 22028	@rss
 22029	@adate
 22030	@af
 22031	def rss():
 22032	
 22033	    meh = flask.render_template
 22034	
 22035	    return wl_html_cache().return_page('rss', meh)#flask.render_template('rss.xml')
 22036	
 22037	
 22038	
 22039	
 22040	
 22041	#to be dev'ed
 22042	
 22043	@wl.route('/blog/<nickname>')
 22044	@noindex
 22045	@axss
 22046	@adate
 22047	@af
 22048	def blogs(nickname):
 22049	    if not flask.session:
 22050		return flask.redirect(flask.url_for('choice_mode'))    
 22051	
 22052	
 22053	    if flask.session.has_key('special') and flask.session:
 22054		if not vertify_session(flask.session['special']):
 22055		    return flask.redirect(flask.url_for('choice_mode'))
 22056		pass
 22057	    else:
 22058		return flask.redirect(flask.url_for('choice_mode'))     
 22059	
 22060	    return 'soon soon..'
 22061	    
 22062	
 22063	    #return flask.render_template('blog.html')
 22064	
 22065	
 22066	
 22067	@wl.route('/nono/')
 22068	@wl.route('/nono')
 22069	@noindex
 22070	@axss
 22071	@af
 22072	@adate
 22073	def nono():
 22074	
 22075	    return '''
 22076	
 22077	
 22078	
 22079	No no no thats forbidden..
 22080	
 22081	    
 22082	
 22083	    '''#redirect to large file, http://www.gutenberg.org/ebooks/search/?sort_order=random
 22084	
 22085	
 22086	
 22087	@wl.route('/logout')
 22088	@noindex
 22089	@axss
 22090	@af
 22091	@adate
 22092	def logout():
 22093	    flask.session["present"] = False
 22094	    flask.session['online'] = False
 22095	    flask.session.pop('nick', None)
 22096	    #s_db.rem(flask.session['special'] + str('-n'))
 22097	    #s_db.rem(flask.session['special'] + str('-r'))
 22098	    try:
 22099		nick = decode_session(flask.session["special"])[0]
 22100		remove_session(nick)
 22101	#sprint 'loged out!'
 22102	    except KeyError:
 22103	#sprint 'meh, could not remove the nick from the s_db'
 22104		pass
 22105	    
 22106	    flask.session.pop("special", None)    
 22107	    flask.session.pop("role", None)
 22108	    flask.session.pop('2faw', None)
 22109	    flask.session.pop('2fa', None)    
 22110	    flask.session.pop("nick2", None)    
 22111	#    try:# flask.session['special']:#
 22112	#	s_db.rem(flask.session['special'] + str('-n'))    
 22113	#	s_db.rem(flask.session['special'] + str('-r'))
 22114	
 22115	 #   except KeyError:
 22116	    #else:
 22117	#	pass
 22118	    return '''
 22119	
 22120	    <center>
 22121	
 22122	    c ya later!
 22123	
 22124	    '''
 22125	
 22126	
 22127	def poke_admin(msg):
 22128	    return 'i have an error - check me!'
 22129	
 22130	
 22131	
 22132	
 22133	
 22134	#@wl.errorhandler(301)
 22135	
 22136	#@noindex
 22137	
 22138	#@axss
 22139	
 22140	#@af
 22141	
 22142	#@adate
 22143	
 22144	#def freeoone(error):
 22145	
 22146	    #return '''
 22147	
 22148	#error m8    
 22149	
 22150	    #'''
 22151	
 22152	
 22153	
 22154	#@wl.errorhandler()
 22155	
 22156	@wl.errorhandler(413)
 22157	@noindex
 22158	@axss
 22159	@af
 22160	@adate
 22161	def fiii(error):
 22162	    return '''
 22163	To much data, Go back and try again// Legion of Warezloaders
 22164	    '''
 22165	
 22166	
 22167	@wl.errorhandler(500)
 22168	@noindex
 22169	@axss
 22170	@af
 22171	@adate
 22172	def fiii(error):
 22173	    return '''
 22174	error m8    
 22175	    '''
 22176	
 22177	'''
 22178	#works??????, blackmagic i assume
 22179	@wl.errorhandler(1142)
 22180	@noindex
 22181	@axss
 22182	@af
 22183	@adate
 22184	def fiii(error):
 22185	    return '
 22186	what ya doing? //Legion of Warezloaders   
 22187	    '''
 22188	
 22189	
 22190	
 22191	#@wl.errorhandler(ValueError)
 22192	
 22193	@wl.errorhandler(500)
 22194	
 22195	@noindex
 22196	
 22197	@axss
 22198	
 22199	@af
 22200	
 22201	@adate
 22202	
 22203	def fiii(error):#todo poke admin if error
 22204	
 22205	    return '''
 22206	    <html><pre>
 22207	
 22208	error 
 22209	      error
 22210	
 22211	   
 22212	
 22213	                    / \     / \
 22214	                   [   ]   [   ]
 22215	                   [   ]   [   ]
 22216	                    \   \ /   /
 22217	 the                 \   Y   /
 22218	    WL               .-"`"`"-.
 22219	      rabbit       ,`         `.
 22220	   is             /             \
 22221	      working    /               \
 22222	   on it        {     ;"";,       }
 22223	                {  /";`'`,;       }
 22224	                 \{  ;`,'`;.     /
 22225	                  {  }`""`  }   /}
 22226	                  {  }      {  // 
 22227	                  {||}      {  /
 22228	                  `"'       `"'   
 22229	   </html>
 22230	    '''
 22231	
 22232	
 22233	@wl.errorhandler(BadRequestKeyError)
 22234	@noindex
 22235	@axss
 22236	@adate
 22237	@af
 22238	def handlemybiz(e):
 22239	    return 'Whoops, go back and try again, if the error is the same contact the support asap!'
 22240	
 22241	
 22242	
 22243	#@wl.errorhandler(400)
 22244	
 22245	#@noindex
 22246	#@axss
 22247	#@adate
 22248	#@af
 22249	#def fouuu(error):
 22250	
 22251	    #return '''
 22252	
 22253	#pirate on..    
 22254	
 22255	  #'''
 22256	
 22257	
 22258	
 22259	
 22260	
 22261	@wl.route('/share_everthing')
 22262	@noindex
 22263	@axss
 22264	@adate
 22265	@af
 22266	def sharee():
 22267	
 22268	    return '''
 22269	
 22270	<html>    
 22271	
 22272	
 22273	
 22274	<title>share</title>
 22275	
 22276	   
 22277	
 22278	<body>
 22279	
 22280	
 22281	
 22282	<pre>
 22283	
 22284	we need to share all that helps us grow 
 22285	
 22286	every line of code,-> share it!
 22287	
 22288	together we need to spread ideas, no mather what they are
 22289	
 22290	
 22291	
 22292	We are free people with anarchistics ideals
 22293	
 22294	</pre>
 22295	
 22296	
 22297	
 22298	
 22299	
 22300	<br>
 22301	
 22302	
 22303	
 22304	<center><h2>404</h2></center>
 22305	
 22306	  <br>
 22307	
 22308	   <pre>
 22309	
 22310	666 -!- system: Looking up YOUR.request.now
 22311	
 22312	666 -!- system: Connecting to warezloader [127.0.0.1] port ?
 22313	
 22314	666 -!- system: Connection to warezloader established
 22315	
 22316	666 !/dev/null *** Looking up your request...
 22317	
 22318	666 !/dev/random *** Checking ident...
 22319	
 22320	666 !/dev/null *** No ident response; 404
 22321	
 22322	666 !/dev/urandom *** Didnt find your requested page
 22323	
 22324	666 -!- Welcome to the Warezloader underground marketplace !~urlogin@localhost
 22325	
 22326	666 -!- Your host is hidden, running encrypted
 22327	
 22328	   </pre>
 22329	
 22330	   </body>
 22331	
 22332	    
 22333	
 22334	 </html>   
 22335	
 22336	    '''
 22337	
 22338	
 22339	
 22340	@wl.route('/4_0_4')
 22341	
 22342	@noindex
 22343	
 22344	@adate
 22345	
 22346	@axss
 22347	
 22348	@af
 22349	
 22350	def fourofour2():
 22351	
 22352	    return '''
 22353	
 22354	<html>    
 22355	
 22356	
 22357	
 22358	<title>404</title>
 22359	
 22360	   
 22361	
 22362	<body><center><h2>404</h2></center>
 22363	
 22364	  <br>
 22365	
 22366	   <pre>
 22367	
 22368	666 -!- system: Looking up YOUR.request.now
 22369	666 -!- system: Connecting to warezloader [127.0.0.1] port ?
 22370	666 -!- system: Connection to warezloader established
 22371	666 !/dev/null *** Looking up your request...
 22372	666 !/dev/random *** Checking ident...
 22373	666 !/dev/null *** No ident response; 404
 22374	666 !/dev/urandom *** Didnt find your requested page
 22375	666 -!- Welcome to the Warezloader underground marketplace !~urlogin@localhost
 22376	666 -!- Your host is hidden, running encrypted
 22377	
 22378	   </pre>
 22379	
 22380	   </body>
 22381	
 22382	    
 22383	
 22384	 </html>   '''
 22385	
 22386	    
 22387	@wl.errorhandler(400)
 22388	@noindex
 22389	@adate
 22390	@axss
 22391	@af
 22392	def fooour(error):#todo poke admin if error
 22393	    return "merping in the shadows , rdy to take me out everyone that i hear... oh yeah something went wrong , contact support or try again"
 22394	    
 22395	    
 22396	    
 22397	
 22398	@wl.errorhandler(KeyError)
 22399	@noindex
 22400	@adate
 22401	@axss
 22402	@af
 22403	def keyerror(error):#todo poke admin if error
 22404	    return """
 22405	<html>
 22406	
 22407	<head>
 22408	<title>error</title>
 22409	</head>
 22410	<body>
 22411	<pre><code>    
 22412	    
 22413	
 22414	
 22415	Whooooooooops
 22416	
 22417	             _\_.                  ._/_
 22418	          .\'    ```-`\|    |/'-'''    `/.
 22419	        #.\'            \|  |/            `/.
 22420	     #\.\'               \||/               `/./
 22421	    #.'              ._._ || _._.              `.
 22422	   #./             ./'  | || |  `\.             \.
 22423	  #/'            .'\ \  / /\ \  / /`.            `\
 22424	 #/|            /|  \ \/ /..\ \/ /  |\            |\
 22425	 #/|            /  /'   .\||/.   `\  \            |\
 22426	  #/|          /` .'.---.    .---.`. '\          |\
 22427	   #'/-/|--|-/'  / /     \  /     \ \  `\-|--|\-\`
 22428	               #| /       \/       \ |
 22429	               #| `.   ._()()_.   .' |
 22430	            #_\_\|  `._\.    ./_.'  |/_/_
 22431	        #\_\`            \__/            '/_/
 22432	      #\`    ____     o   /\   o     ____    '/
 22433	      #=   .'`.   o    o /  \ o   o    .'`.   =
 22434	      #'/  |   `._____..'    `.._____.'   |  \`
 22435	      #-/        \                  /        \-
 22436	       #'/-       \       ..       /       -\`
 22437	         #'/     _.\      `'      /._     \`     
 22438	          #'//-''   \     ||     /   ``-\\`
 22439	                    \____/\____/
 22440	
 22441	our space bunny is working on it 
 22442	   should be sorted out in 20-40seconds
 22443	just refresh the page
 22444	                    
 22445	  <pre></code></body></html>  """
 22446	
 22447	
 22448	#@wl.errorhandler(op)
 22449	#def m(error):
 22450	    #return ''
 22451	    
 22452	
 22453	
 22454	
 22455	@wl.errorhandler(404)
 22456	@noindex
 22457	@adate
 22458	@axss
 22459	@af
 22460	def fourofour(error):
 22461	    return '''
 22462	
 22463	<html>    
 22464	
 22465	
 22466	
 22467	<title>404</title>
 22468	
 22469	   
 22470	
 22471	<body><center><h2>404</h2></center>
 22472	
 22473	  <br>
 22474	
 22475	   <pre>
 22476	
 22477	666 -!- system: Looking up YOUR.request.now
 22478	666 -!- system: Connecting to warezloader [127.0.0.1] port ?
 22479	666 -!- system: Connection to warezloader established
 22480	666 !/dev/null *** Looking up your request...
 22481	666 !/dev/random *** Checking ident...
 22482	666 !/dev/null *** No ident response; 404
 22483	666 !/dev/urandom *** Didnt find your requested page
 22484	666 -!- Welcome to the Warezloader underground marketplace !~urlogin@localhost
 22485	666 -!- Your host is hidden, running 
 22486	    '''
 22487	
 22488	
 22489	
 22490	@wl.errorhandler(405)
 22491	@noindex
 22492	@axss
 22493	@adate
 22494	@af
 22495	def fourofive(error):
 22496	    return 'searching for anything? Go back and try again'
 22497	
 22498	
 22499	
 22500	print 'checking stuff'
 22501	#print handle_monero().check_status()
 22502	print 'done'
 22503	
 22504	
 22505	#run it in debug mode
 22506	if __name__ == '__main__':    
 22507	    log = logging.getLogger(__name__)
 22508	    log.setLevel(logging.DEBUG)
 22509	    fh = lhandlers.TimedRotatingFileHandler("test.log",when='M',interval=1,backupCount=0)
 22510	    fh.setLevel(logging.DEBUG)
 22511	    frmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
 22512	    fh.setFormatter(frmt)
 22513	    log.addHandler(fh)    
 22514	    wl_entries_cache().update_cache()#update cache
 22515	    wl.run(debug=False,port=1337,threaded=True,host='127.0.0.1')
 22516	
 22517	

Mirrors:
https://0xacab.org/Warezloader/warezloader/
https://github.com/warezloader/warezloader

We all now one thing: WL was released by hackers so create new marketplaces and do the net a favor

Copy this!
Spread it!

     ***** **                            
  ******  ***                            
 **   *  * **                            
*    *  *  **                            
    *  *   *    **   ****                
   ** **  *      **    ***  *     ***    
   ** ** *       **     ****     * ***   
   ** ***        **      **     *   ***  
   ** ** ***     **      **    **    *** 
   ** **   ***   **      **    ********  
   *  **     **  **      **    *******   
      *      **  **      **    **        
  ****     ***    *********    ****    * 
 *  ********        **** ***    *******  
*     ****                ***    *****   
*                  *****   ***           
 **              ********  **            
                *      ****              
                                         


